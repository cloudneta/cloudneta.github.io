<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>CloudNet@</title>
    <link>http://cloudneta.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Tue, 02 Jun 2020 02:25:44 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>LabGuide - AWS Transit Gateway</title>
      <link>http://cloudneta.github.io/2020/05/16/Transit-Gateway/</link>
      <guid>http://cloudneta.github.io/2020/05/16/Transit-Gateway/</guid>
      <pubDate>Sat, 16 May 2020 04:10:03 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;em&gt;작성자 : ongja.cloudnet@&lt;/em&gt;&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><em>작성자 : ongja.cloudnet@</em></p><a id="more"></a><br><details><summary>AWS Transit Gateway 참고 링크</summary><div markdown="1"><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL3ZwYy9sYXRlc3QvdGd3L3doYXQtaXMtdHJhbnNpdC1nYXRld2F5Lmh0bWw=">AWS Transit Gateway 공식 문서<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS9rby90cmFuc2l0LWdhdGV3YXkv">AWS Transit Gateway 개요<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL3ZwYy9sYXRlc3QvdGd3L3Rndy1tdWx0aWNhc3Qtb3ZlcnZpZXcuaHRtbA==">Multicast on AWS Transit G<i class="fa fa-external-link-alt"></i></span><span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS9rby9ibG9ncy9uZXR3b3JraW5nLWFuZC1jb250ZW50LWRlbGl2ZXJ5L3RyYWZmaWMtbWFuYWdlbWVudC13aXRoLWF3cy1nbG9iYWwtYWNjZWxlcmF0b3Iv">ateway<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS9rby9ibG9ncy9rb3JlYS9uZXctZm9yLWF3cy10cmFuc2l0LWdhdGV3YXktYnVpbGQtZ2xvYmFsLW5ldHdvcmtzLWFuZC1jZW50cmFsaXplLW1vbml0b3JpbmctdXNpbmctbmV0d29yay1tYW5hZ2VyLw==">AWS Transit Gateway 모니터링 중앙 집중화<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS9rby90cmFuc2l0LWdhdGV3YXkvcHJpY2luZy8=">AWS Transit Gateway 요금<i class="fa fa-external-link-alt"></i></span></p></div></details><blockquote><p>💡 AWS 서비스 관련해서는 항상 최우선으로 ‘AWS 설명서’ 를 읽어보는 것을 추천한다.<br>한글 번역이 매끄럽지 못하면 English 로 변경 후 읽어보길 바란다.</p></blockquote><hr><br><h3 id="1-AWS-Transit-Gateway-Theory"><a href="#1-AWS-Transit-Gateway-Theory" class="headerlink" title="1. AWS Transit Gateway Theory"></a>1. AWS Transit Gateway Theory</h3><br><p><span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS9rby90cmFuc2l0LWdhdGV3YXkv">1.1 AWS Transit Gateway 란?<i class="fa fa-external-link-alt"></i></span></p><ul><li>AWS Transit Gateway는 VPC나 On-Premise 등의 네트워크를 단일 Gateway에 연결할 수 있도록 지원해 주는 서비스이다.</li><li>AWS Transit Gateway를 사용하면 중앙 게이트웨이와 네트워크 전반의 단일 연결만 생성하여 관리하면 된다.</li><li>Hub &amp; Spoke 모델로 구성되며, 연결 된 네트워크들은 다른 네트워크에 연결할 필요 없이 AWS Transit Gateway에만 연결하면 되므로 관리를 크게 간소화하고 운영 비용을 크게 줄여 준다.</li></ul><br><p><span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS9rby90cmFuc2l0LWdhdGV3YXkvZmVhdHVyZXMv">1.2 AWS Transit Gateway 주요 기능<i class="fa fa-external-link-alt"></i></span></p><ul><li><p><em>라우팅</em></p><p>  : 동적 / 정적의 Layer 3 라우팅을 지원한다. </p></li><li><p><em>엣지 연결</em></p><p>  : VPN을 사용하여 AWS Transit Gateway와 온프레미스 게이트웨이 간에 VPN 연결을 생성할 수 있다.</p></li><li><p><em>VPC 기능 상호 운용성</em></p><p>  : VPC에 있는 인스턴스가 AWS Transit Gateway에 연결된 다른 Amazon VPC에 있는 NAT 게이트웨이, Network Load Balancer, AWS PrivateLink 및 Amazon Elastic File System 등에 액세스할 수 있다.</p></li><li><p><em>모니터링</em></p><p>  : AWS Transit Gateway는 Amazon CloudWatch 및 Amazon VPC 흐름 로그와 같은 서비스에서 사용하는 통계와 로그를 제공한다.</p></li><li><p><em>리전 간 VPC 피어링</em></p><p>  : AWS Transit Gateway 리전 간 VPC 피어링은 AWS 글로벌 네트워크를 사용하여 AWS 리전을 통해 트래픽을 라우팅할 수 있도록 지원한다.</p></li><li><p><em>멀티캐스트</em></p><p>  : 고객이 클라우드에서 멀티캐스트 애플리케이션을 쉽게 구축하고 수백 개의 수신자까지 멀티캐스트 구성을 쉽게 모니터링, 관리 및 확장할 수 있도록 지원한다. </p></li><li><p><em>보안</em></p><p>  : AWS Transit Gateway는 Identity and Access Management(IAM)와 통합되므로, AWS Transit Gateway에 대한 액세스를 안전하게 관리할 수 있다.</p></li><li><p><em>지표</em></p><p>  : 성능과 송수신된 바이트, 패킷, 폐기된 패킷을 비롯한 트래픽 지표를 통해 글로벌 네트워크를 모니터링한다.</p></li></ul><br><p>1.3 Non Transit Gateway vs Transit Gateway</p><p><img src="/images/LabGuide-AWS-Transit-Gateway/Untitled.png" alt="LabGuide%20AWS%20Transit%20Gateway%20efff213e58a546c5bc56273e4425244a/Untitled.png"></p><p>그림 1.1 Transit Gateway 미사용 / 사용 비교 Diagram</p><ul><li><p>다수의 VPC 환경이나 On-Premise 환경에 대해 Transit Gateway를 사용하지 않고, VPC Peering과 VPN, Direct Connect를 통한 개별 연결이 이루어져 복잡한 작업 환경</p></li><li><p>Transit Gateway를 중심으로 연결만 하면 되어, 중앙 집중형 간략한 작업 환경</p></li></ul><blockquote><p>💡 Transit Gateway를 사용하면 복잡한 AWS 네트워크 아키텍처를 간소화 가능하여 관리 및 운용 효율이 보장되며, 향상된 보안과 멀티캐스트를 활용하여 유용한 통신이 가능하다.</p></blockquote><br><p>1.4 AWS Transit Gateway Key Words</p><ul><li><p><em>Transit Gateway</em> - VPC들의 접점이 되는 중앙 집중형 단일 Gateway로 Hub &amp; Spoke 환경에서 Hub 역할</p></li><li><p><em>Transit Gateway Attachment</em> - VPC를 연결하는 방식 (현재 버전으로 3가지 방식 지원)</p><ul><li><p>VPC Attachment : TGW와 동일 Region 내 VPC를 직접적으로 연결 (다른 계정에 생성한 VPC도 연결 가능)</p></li><li><p>VPN Attachment : TGW와 VPN를 연결 (Site to Site VPN)</p></li><li><p>TGW Peering : TGW와 다른 Region의 TGW 간 연결 (Inter Region TGW Peering)</p></li></ul></li><li><p><em>Transit Gateway Routing Table</em> - TGW에서 관리하는 라우팅 테이블</p></li><li><p><em>Transit Gateway Sharing</em> - TGW를 공유하여 다른 AWS 계정에게 전달하여 연결 가능 (Resource Access Manager 활용)</p></li><li><p><em>Transit Gateway Multicast</em> - TGW를 통해 Multicast 트래픽을 전달</p><ul><li><p>Multicast Domain : Multicast 트래픽을 처리할 TGW 지정</p></li><li><p>Multicast Associate : Multicast 트래픽을 처리할 TGW Attachment 지정</p></li><li><p>Multicast Group Source : Multicast Sender 대상 지정</p></li><li><p>Multicast Group Member : Multicast Reciever 대상 지정</p></li></ul></li><li><p><em>Transit Gateway Network Manager</em> - 논리적 다이어그램 또는 지리적 맵으로 중앙 대시 보드에서 글로벌 네트워크를 시각화</p></li></ul><hr><br><h3 id="2-AWS-Transit-Gateway-Lab-Preview"><a href="#2-AWS-Transit-Gateway-Lab-Preview" class="headerlink" title="2. AWS Transit Gateway Lab Preview"></a>2. AWS Transit Gateway Lab Preview</h3><br><p>2.1 Lab Topology</p><p><img src="/images/LabGuide-AWS-Transit-Gateway/Untitled1.png" alt="LabGuide%20AWS%20Transit%20Gateway%20efff213e58a546c5bc56273e4425244a/Untitled%201.png"></p><p>그림 2.1 AWS Transit Gateway Lab Topology</p><p>① <em>TGW Intra Region VPC Attachment</em> - <code>버지니아</code>에 MAIN SITE 구축 (동일 리전 내 VPC와 TGW를 생성하여 연결)</p><p>② <em>Multicast on TGW</em> - <code>버지니아</code> MAIN SITE에서 Multicast 통신 테스트</p><p>③ <em>TGW Multi Account VPC Attachment</em> - 다른 계정의 <code>버지니아</code>에 SUB SITE 구축 후 Resource Access Manager를 통해 TGW를 공유하고 다른 계정의 VPC와 연결</p><p>④ <em>TGW Inter Region Peering</em> - <code>아일랜드</code> 에 BRANCH SITE 구축 후 TGW 간 피어링 연결</p><p>⑤ <em>TGW VPN Attachment</em> - <code>서울</code>에 OpenSwan VPN 서버를 설치 후 TGW와 연결</p><p>⑥ <em>NATGW though TGW</em> - Private Subnet 중 DEV 환경의 대상으로, TGW를 통해 <code>버지니아</code> MAIN SITE의 Egress VPC에 존재하는 NAT GW로 인터넷 통신</p><p>⑦ <em>TGW Network Manager</em> - TGW 네트워크 매니저를 통해 글로벌 네트워크 시각화</p><br><p>2.2 AWS 기본 설정</p><ul><li>본 실습에서 활용할 AWS Region은 <code>버지니아, 아일랜드, 서울</code> 이다. 해당 Region에 대한 <em>EC2-Key Pair</em>를 생성</li><li>TGW Multi Account VPC Attachment 테스트를 위해 본 계정 외에 서브 계정이 필요</li><li>모든 Region에 대한 기본적인 인프라는 <em>CloudFormation</em>에 의해 자동 구축 (모든 인프라가 구축되는 것은 아니다.)</li><li>생성된 모든 EC2-Instance의 IP 주소는 X.X.X.10으로 고정하였다. (예시: 10.1.1.10, 10.5.1.10 …)</li></ul><br><p>2.3 CloudFormation (Infrastructure as Code)</p><p>⤵ <span class="exturl" data-url="aHR0cHM6Ly9zMy5hcC1ub3J0aGVhc3QtMi5hbWF6b25hd3MuY29tL2Nsb3VkZm9ybWF0aW9uLmNsb3VkbmV0YS5uZXQvVEdXL1ZpcmdpbmlhX1RyYW5zaXRHV19MYWJfQ0YueWFtbA==">Download Virginia_TransitGW_Lab_CF.yaml<i class="fa fa-external-link-alt"></i></span></p><p>⤵ <span class="exturl" data-url="aHR0cHM6Ly9zMy5hcC1ub3J0aGVhc3QtMi5hbWF6b25hd3MuY29tL2Nsb3VkZm9ybWF0aW9uLmNsb3VkbmV0YS5uZXQvVEdXL0lyZWxhbmRfVHJhbnNpdEdXX0xhYl9DRi55YW1s">Download Ireland_TransitGW_Lab_CF.yaml<i class="fa fa-external-link-alt"></i></span></p><p>⤵ <span class="exturl" data-url="aHR0cHM6Ly9zMy5hcC1ub3J0aGVhc3QtMi5hbWF6b25hd3MuY29tL2Nsb3VkZm9ybWF0aW9uLmNsb3VkbmV0YS5uZXQvVEdXL1Nlb3VsX1RyYW5zaXRHV19MYWJfQ0YueWFtbA==">Download Seoul_TransitGW_Lab_CF.yaml<i class="fa fa-external-link-alt"></i></span></p><ul><li><code>버지니아, 아일랜드, 서울</code>에 배포할 Cloud Formation 템플릿이다.</li><li>지금 바로 배포하지 않고, 실습 단계 별로 하나씩 배포할 것이니 일단 다운로드만 받아 두자.</li></ul><blockquote><p>💡 본격적인 실습에 앞서, 리소스 당 소량의 과금이 불가피 하다.<br>자세한 사항은 <span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS9rby90cmFuc2l0LWdhdGV3YXkvcHJpY2luZy8=">Transit Gateway 요금<i class="fa fa-external-link-alt"></i></span> 링크를 참고 바란다.</p></blockquote><hr><br><h3 id="3-AWS-Transit-Gateway-Intra-Region-VPC-Attachment-Test"><a href="#3-AWS-Transit-Gateway-Intra-Region-VPC-Attachment-Test" class="headerlink" title="3. AWS Transit Gateway Intra Region VPC Attachment Test"></a>3. AWS Transit Gateway Intra Region VPC Attachment Test</h3><ul><li><strong>이 번 단계의 실습은 동일 리전에 존재하는 VPC와 TGW 간의 연결을 테스트한다. (Intra Region VPC Attachment)</strong></li><li>실습 환경: Region - <code>버지니아</code> , Account - 본 AWS 계정</li></ul><br><p>3.1 버지니아 CloufFormation 배포</p><p>3.1.1) CloudFormation 배포</p><ul><li>2.3항에서 제공한 Virginia_TransitGW_Lab_CF.yaml 파일을 배포하자.</li></ul><blockquote><p>💡 주의: CF Condition에 의해 Main Site와 Sub Site의 생성 인프라가 다르다. <strong>파라미터 값을 Main으로 지정</strong>하자!</p></blockquote><p><img src="/images/LabGuide-AWS-Transit-Gateway/Untitled2.png" alt="LabGuide%20AWS%20Transit%20Gateway%20efff213e58a546c5bc56273e4425244a/Untitled%202.png"></p><p>그림 3.1 버지니아 CF 템플릿 생성 중 EnvType 파라미터 값을 Main으로 지정</p><details><summary>버지니아 CF 생성 인프라</summary><div markdown="1"><pre><code>- EC2-Instance 3개- VPC 2개, Public Subnet 1개, Private Subnet 2개, Routing Table 3개, IGW 1개- Security Group 2개</code></pre></div></details><ul><li>위 생성된 인프라가 정상적으로 올라왔는 지 확인하자.</li></ul><p>3.1.2) MAIN-MGT EC2 접속</p><ul><li>현재 접속 가능한 Public Subnet에 위치한 MAIN-MGT EC2에 SSH 접속</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOT &gt;&gt; list.txt</span><br><span class="line">google.com</span><br><span class="line">10.1.1.10</span><br><span class="line">10.2.1.10</span><br><span class="line">10.2.2.10</span><br><span class="line">10.3.1.10</span><br><span class="line">10.3.2.10</span><br><span class="line">10.4.1.10</span><br><span class="line">10.5.1.10</span><br><span class="line">10.6.1.10</span><br><span class="line">EOT</span><br></pre></td></tr></table></figure><ul><li>list.txt 파일을 생성을 위해 위 값을 붙여넣자 (본 실습에서 생성될 모든 EC2 IP와 구글주소)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@MAIN-MGT ec2-user]<span class="comment"># vi pingall.sh</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">cat list.txt |  <span class="keyword">while</span> <span class="built_in">read</span> output</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    ping -c 1 -W 1 <span class="string">"<span class="variable">$output</span>"</span> &gt; /dev/null</span><br><span class="line">    <span class="keyword">if</span> [ $? -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"node <span class="variable">$output</span> is up"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"node <span class="variable">$output</span> is down"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">[root@MAIN-MGT ec2-user]<span class="comment"># chmod +x pingall.sh</span></span><br></pre></td></tr></table></figure><ul><li><code>vi pingall.sh</code> 로 진입하여 위와 같이 스크립트를 생성한다.</li><li><code>chmod +x pingall.sh</code> 로 스크립트 권한을 부여한다.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@MAIN-MGT ec2-user]<span class="comment"># ./pingall.sh</span></span><br><span class="line">node google.com is up</span><br><span class="line">node 10.1.1.10 is up</span><br><span class="line">node 10.2.1.10 is down</span><br><span class="line">node 10.2.2.10 is down</span><br><span class="line">node 10.3.1.10 is down</span><br><span class="line">node 10.3.2.10 is down</span><br><span class="line">node 10.4.1.10 is down</span><br><span class="line">node 10.5.1.10 is down</span><br><span class="line">node 10.6.1.10 is down</span><br><span class="line">[root@MAIN-MGT ec2-user]<span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li><code>./pingall.sh</code> 로 전체 타겟에 대한 Ping 테스트가 가능하다.</li><li>현재 자기 자신과 외부 인터넷만 가능하다.</li></ul><br><p>3.2 Transit Gatewaay 생성</p><ul><li>VPC  —&gt; Transit Gateway —&gt; Create Transit Gateway</li></ul><p><img src="/images/LabGuide-AWS-Transit-Gateway/Untitled3.png" alt="LabGuide%20AWS%20Transit%20Gateway%20efff213e58a546c5bc56273e4425244a/Untitled%203.png"><br>그림 3.2 Create Transit Gateway</p><ul><li>Name Tag 기입하고, Multicast support enable을 반드시 체크 하자! (4장 Multicast on TGW 실습 때 필요하다. 추후 수정이 되지 않아 미리 활성화)</li><li>1~2분 정도 대기하면, 상태가 available 로 변경 된다.</li></ul><br><p>3.3 Transit Gateway Attachment 생성</p><ul><li><p>VPC —&gt; Transit Gateway Attachment —&gt; Create Transit Gateway Attachment (😓 굳이 한글 번역을 해놔서 Attachment를 첨부파일로 표현함;)</p><ul><li><p>Transit Gateway ID 지정</p></li><li><p>Attachment Type : VPC</p></li><li><p>Attachment Name Tag : MAIN-VPC01-ATT</p></li><li><p>VPC ID : VPC01 —&gt; AZ &amp; Subnet 지정</p></li></ul><hr><ul><li><p><em>상동</em></p></li><li><p>Attachment Name Tag : MAIN-VPC02-ATT</p></li><li><p>VPC ID : VPC02 —&gt; AZ &amp; Subnet 지정</p></li></ul></li><li><p>Transit Gateway Attachment 를 2개 생성 한다. (1~2분 정도 대기)</p></li></ul><p><img src="/images/LabGuide-AWS-Transit-Gateway/Untitled4.png" alt="LabGuide%20AWS%20Transit%20Gateway%20efff213e58a546c5bc56273e4425244a/Untitled%204.png"><br>그림 3.3 TGW Attachment 정보 확인</p><ul><li>생성된 2개의 TGW Attachment를 확인할 수 있다. (Resource Type: VPC, State: available)</li></ul><br><p>3.4 Routing Table 설정</p><ul><li><p>CloudFormation에 의해 생성된 3개의 라우팅 테이블에 경로를 추가한다.</p><ul><li>라우팅 편집 —&gt; 라우팅 추가 —&gt; 10.0.0.0/8 대역, tgw-xxxx 타겟</li></ul></li></ul><p><img src="/images/LabGuide-AWS-Transit-Gateway/Untitled5.png" alt="LabGuide%20AWS%20Transit%20Gateway%20efff213e58a546c5bc56273e4425244a/Untitled%205.png"></p><p>그림 3.4 라우팅 테이블 편집 (10.0.0.0/8 대역을 TGW로 전달하는 경로 추가)</p><ul><li>라우팅 테이블 3개 모두 라우팅 정책 추가</li></ul><br><p>3.5 Verify</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@MAIN-MGT ec2-user]<span class="comment"># ./pingall.sh</span></span><br><span class="line">node google.com is up</span><br><span class="line">node 10.1.1.10 is up</span><br><span class="line">node 10.2.1.10 is up</span><br><span class="line">node 10.2.2.10 is up</span><br><span class="line">node 10.3.1.10 is down</span><br><span class="line">node 10.3.2.10 is down</span><br><span class="line">node 10.4.1.10 is down</span><br><span class="line">node 10.5.1.10 is down</span><br><span class="line">node 10.6.1.10 is down</span><br><span class="line">[root@MAIN-MGT ec2-user]<span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li>MAIN-MGT EC2에 접속하여 <code>pingall.sh</code> 스크립트를 수행한다.</li><li><code>버지니아</code> MAIN에 존재하는 EC2 끼리 통신이 가능하다.</li></ul><details><summary><b>3장 현재까지 완료된 구성도 확인</summary></b><div markdown="1"><p><img src="/images/LabGuide-AWS-Transit-Gateway/Untitled6.png" alt="LabGuide%20AWS%20Transit%20Gateway%20efff213e58a546c5bc56273e4425244a/Untitled%206.png"></p></div></details><hr><br><h3 id="4-Multicast-on-Transit-Gateway-Test"><a href="#4-Multicast-on-Transit-Gateway-Test" class="headerlink" title="4. Multicast on Transit Gateway Test"></a>4. Multicast on Transit Gateway Test</h3><ul><li><strong>이 번 단계의 실습은 TGW을 통해 Multicast 통신을 테스트한다. (Multicast on Transit Gateway)</strong></li><li>MAIN-MGT 인스턴스를 Multicast Sender로 하고, MAIN-TEST와 MAIN-DEV 인스턴스를 Multicast Receiver로 한다.</li><li>Multicast 트래픽의 UDP 포트 번호에 대해 Security Group에서 허용해야 한다. (CF로 미리 설정해 놈)</li><li>실습 환경: Region - <code>버지니아</code> , Account - 본 AWS 계정</li></ul><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL3ZwYy9sYXRlc3QvdGd3L3Rndy1tdWx0aWNhc3Qtb3ZlcnZpZXcuaHRtbA==">Multicast on transit gateways<i class="fa fa-external-link-alt"></i></span></p><p>참고 링크 : Multicast on transit gateway</p><p><em>Multicast 실습에 앞서 고려 사항</em></p><ul><li>현재 Multicast 라우팅 기능은 <code>버지니아</code> 리전에서만 지원하고 있다.</li><li>해당 기능을 사용하려면 TGW를 생성할 때 Multicast Support를 활성해야 한다. (이미 활성화 함)</li><li>IGMP는 미지원으로 TGW에서 Multicast Domain과 Sender / Receiver를 관리하여 라우팅 된다.</li><li>EC2 인스턴스 타입이 Nitro 여야 Sender가 될 수 있고, Non Nitro가 Receicer가 될 수 있지만 Source/Destination Check를 비활성화해야 동작한다.</li><li>본 실습에서 CloudFormation으로 생성한 EC2 인스턴스 타입은 Nitro 타입으로 지정하였다.</li></ul><br><p>4.1 Multicast 라우팅 설정 전에 테스트</p><p>4.1.1) MAIN-MGT 인스턴스에 접속 (Sender)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@MAIN-MGT ec2-user]<span class="comment"># omping -m 239.1.1.1 -p 10000 10.1.1.10</span></span><br><span class="line">10.1.1.10 : waiting <span class="keyword">for</span> response msg</span><br><span class="line">10.1.1.10 : joined (S,G) = (*, 239.1.1.1), pinging</span><br><span class="line">10.1.1.10 :   unicast, seq=1, size=69 bytes, dist=0, time=0.016ms</span><br><span class="line">10.1.1.10 : multicast, seq=1, size=69 bytes, dist=0, time=0.021ms</span><br><span class="line">10.1.1.10 :   unicast, seq=2, size=69 bytes, dist=0, time=0.041ms</span><br><span class="line">10.1.1.10 : multicast, seq=2, size=69 bytes, dist=0, time=0.046ms</span><br><span class="line">10.1.1.10 :   unicast, seq=3, size=69 bytes, dist=0, time=0.050ms</span><br></pre></td></tr></table></figure><ul><li><code>omping -m 239.1.1.1 -p 10000 10.1.1.10</code> 명령어로 Multicast 트래픽을 발생 시킨다.</li><li>Multicast IP 대역 : 239.1.1.1 , Port 번호 : UDP 10000</li></ul><p>4.1.2) MAIN-TEST, MAIN-DEV 인스턴스에 접속 (Receiver)</p><ul><li>MAIN-TEST, MAIN-DEV은 Private Subnet에 위치하여 다이렉트로 SSH 접근이 불가하다.</li><li>MAIN-MGT에 접근 후 <code>ssh root@10.2.1.10</code>과 <code>ssh root@10.2.2.10</code> 명령어로 거쳐서 접근한다.</li><li>Key-Pair 없이 Root 계정으로 접근하며, 패스워드는 qwe123 이다.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[ec2-user@MAIN-MGT ~]$ ssh root@10.2.1.10</span><br><span class="line">:</span><br><span class="line">password:</span><br><span class="line">:</span><br><span class="line">[root@MAIN-TEST ~]<span class="comment">#</span></span><br><span class="line">[root@MAIN-TEST ~]<span class="comment"># tcpdump ip dst 239.1.1.1 -nn</span></span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br></pre></td></tr></table></figure><ul><li><code>tcpdump ip dst 239.1.1.1 -nn</code> 명령어로 목적지 IP가 239.1.1.1인 패킷을 잡아 출력한다.</li></ul><p><img src="/images/LabGuide-AWS-Transit-Gateway/Untitled7.png" alt="LabGuide%20AWS%20Transit%20Gateway%20efff213e58a546c5bc56273e4425244a/Untitled%207.png"></p><p>그림 4.1 Multicast 라우팅 설정 전 테스트</p><ul><li>좌측 Multicast Sender에서 239.1.1.1 트래픽을 발생하고 있지만, 우측 Multicast Receiver들로 인입되지 않는다.</li></ul><br><p>4.2 Transit Gateway Multicast 설정</p><p>4.2.1) Create Transit Gateway Multicast Domain</p><ul><li><p>VPC —&gt; Transit Gateway Multicast —&gt; Create Transit Gateway Multicast Domain</p><ul><li>Transit Gateway ID 지정</li></ul></li></ul><p><img src="/images/LabGuide-AWS-Transit-Gateway/Untitled8.png" alt="LabGuide%20AWS%20Transit%20Gateway%20efff213e58a546c5bc56273e4425244a/Untitled%208.png"><br>그림 4.2 Transit Gateway Multicast Domain 확인</p><p>4.2.2) Create Association</p><ul><li><p>VPC —&gt; Transit Gateway Multicast —&gt; 작업 —&gt; Create Association</p><ul><li><p>Choose attachment to associate : MAIN-VPC01-ATT</p></li><li><p>Choose Subnets to associate : Subnet 선택</p></li></ul><hr><ul><li><p>Choose attachment to associate : MAIN-VPC02-ATT</p></li><li><p>Choose Subnets to associate : Subnet 선택</p></li></ul></li><li><p>3장에서 생성한 2개의 TGW Attachment를 선택한 후 Subnet을 지정한다. (TGW-VPC01-ATT, TGW-VPC02-ATT)</p></li></ul><p><img src="/images/LabGuide-AWS-Transit-Gateway/Untitled9.png" alt="LabGuide%20AWS%20Transit%20Gateway%20efff213e58a546c5bc56273e4425244a/Untitled%209.png"></p><p>그림 4.3 TGW Multicast Domain의 Assoiciate 정보 &amp; 지정된 Subnet 확인</p><p>4.2.3) Add group sources</p><ul><li><p>VPC —&gt; Transit Gateway Multicast —&gt; 작업 —&gt; Add group sources</p><ul><li><p>Group IP Address : 239.1.1.1</p></li><li><p>Choose network interfaces : MAIN-MGT 지정</p></li></ul></li><li><p>EC2 인스턴스 MAIN-MGT 지정을 할 때 구분이 힘들다. (설정 전에 MAIN-MGT에 대한 정보를 확인 후 지정하자)</p></li></ul><p><img src="/images/LabGuide-AWS-Transit-Gateway/Untitled10.png" alt="LabGuide%20AWS%20Transit%20Gateway%20efff213e58a546c5bc56273e4425244a/Untitled%2010.png"></p><p>그림 4.4 Group Source 확인</p><ul><li>Groups 탭에 진입하면 대상 별 Source와 Member 확인이 가능하다. (MAIN-MGT를 source 로 지정)</li></ul><p>4.2.4) Add group members</p><ul><li><p>VPC —&gt; Transit Gateway Multicast —&gt; 작업 —&gt; Add group members</p><ul><li><p>Group IP Address : 239.1.1.1</p></li><li><p>Choose network interfaces : MAIN-TEST와 MAIN-DEV 지정</p></li></ul></li><li><p>마찬가지로 대상 구분이 힘들어 미리 확인 후 2개의 대상 지정한다.</p></li></ul><p><img src="/images/LabGuide-AWS-Transit-Gateway/Untitled11.png" alt="LabGuide%20AWS%20Transit%20Gateway%20efff213e58a546c5bc56273e4425244a/Untitled%2011.png"></p><p>그림 4.5 Group Member 확인</p><ul><li>MAIN-TEST와 MAIN-DEV를 member 로 지정</li></ul><br><p>4.3 Verify</p><ul><li>4.1.2항과 같이 테스트를 해본다.</li></ul><p><img src="/images/LabGuide-AWS-Transit-Gateway/Untitled12.png" alt="LabGuide%20AWS%20Transit%20Gateway%20efff213e58a546c5bc56273e4425244a/Untitled%2012.png"></p><p>그림 4.6 Multicast on Transit Gateway 테스트 결과</p><ul><li>MAIN-MGT (Multicast Sender)에서 발생하는 239.1.1.1 Multicast 트래픽은 MAIN-TEST와 MAIN-DEV (Multicast Receiver)로 인입된다.</li><li>즉, TGW가 Multicast Group을 관리하여 라우팅하여 Source 정보를 Member에게 전달해 준다.</li><li>TGW에서 Multicast 설정을 하면 바로 적용되지 않고 1~2분정도 대기 시간이 필요하다.</li></ul><blockquote><p>💡 현재 Transit Gateway 상에서 동작하는 Multicast는 미완성 서비스이며, 버지니아 리전에만 동작하는 제약이 있다. 향후 다른 리전까지 서비스가 동작하거나 기능이 추가되면, 추가적인 실습을 진행할 예정이다.<br>그리고, 현재 실습 상 Multicast 동작은 강제로 트래픽을 인입하는 형태의 실습이라 추후 기회가 되면 실제 Multicast Stram을 통해 실습을 진행해 보도록 하겠다.</p></blockquote><hr><br><h3 id="5-AWS-Transit-Gateway-Multi-Account-VPC-Attachment-Test"><a href="#5-AWS-Transit-Gateway-Multi-Account-VPC-Attachment-Test" class="headerlink" title="5. AWS Transit Gateway Multi Account VPC Attachment Test"></a>5. AWS Transit Gateway Multi Account VPC Attachment Test</h3><ul><li><strong>이 번 단계의 실습은 TGW을 정보를 다른 계정으로 공유하여 VPC 연결을 테스트한다. (Multi Account VPC Attachment)</strong></li><li>이 번 단계에서는 서브 AWS 계정이 필요하다. (<code>버지니아</code> 리전에서 테스트하며, CF 배포 전에 Key-Pair를 미리 생성해 두자)</li><li>동일한 브라우저에서 로그인 시 기존 계정은 로그아웃이 된다. 다른 브라우저 추가하여 실습하면 본 계정과 서브 계정을 같이 사용할 수 있다.</li><li>실습 환경: Region - <code>버지니아</code> , Account - 본 AWS 계정 + 서브 AWS 계정</li></ul><p><span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS9rby9ibG9ncy9rb3JlYS9uZXctdXNlLWFuLWF3cy10cmFuc2l0LWdhdGV3YXktdG8tc2ltcGxpZnkteW91ci1uZXR3b3JrLWFyY2hpdGVjdHVyZS8=">AWS Transit Gateway 출시 - VPC 네트워크 아키텍처 단순화 가능 (서울 리전 포함) | Amazon Web Services<i class="fa fa-external-link-alt"></i></span></p><p>참고 링크 : Resource Access Manager를 활용하여 Multi Account VPC Attachment</p><br><p>5.1 버지니아 CloufFormation 배포 (서브 계정)</p><p>5.1.1) CloudFormation 배포</p><ul><li>2.3항에서 제공한 Virginia_TransitGW_Lab_CF.yaml 파일을 배포하자.</li></ul><blockquote><p>💡 주의: CF Condition에 의해 Main Site와 Sub Site의 생성 인프라가 다르다. <strong>파라미터 값을 Sub로 지정</strong>하자!</p></blockquote><p><img src="/images/LabGuide-AWS-Transit-Gateway/Untitled13.png" alt="LabGuide%20AWS%20Transit%20Gateway%20efff213e58a546c5bc56273e4425244a/Untitled%2013.png"></p><p>그림 5.1 서브 계정에서 버지니아 CF 템플릿 생성 중 EnvType 파라미터 값을 Sub로 지정</p><ul><li>서브 계정으로 로그인 후 <code>버지니아</code>에서 CloudFormation 템플릿을 실행한다.</li><li>EnvType은 Sub로 지정하자!!</li></ul><details><summary>버지니아 CF 생성 인프라 (서브 계정)</summary><div markdown="1"><pre><code>- EC2-Instance 2개- VPC 1개, Private Subnet 2개, Routing Table 2개- Security Group 1개</code></pre></div></details><ul><li>위 생성된 인프라가 정상적으로 올라왔는 지 확인하자</li></ul><br><p>5.2 Resource Access Manager를 활용하여 TGW 공유 (본 계정 &amp; 서브 계정)</p><p>5.2.1) Resource Access Manager 리소스 공유 생성 (본 계정)</p><p><img src="/images/LabGuide-AWS-Transit-Gateway/Untitled14.png" alt="LabGuide%20AWS%20Transit%20Gateway%20efff213e58a546c5bc56273e4425244a/Untitled%2014.png"></p><p>그림 5.2 본 계정에서 Resource Access Manager 진입</p><ul><li><p>Resource Access Manager —&gt; 리소스 공유 생성</p><ul><li><p>이름 : CloudNeta-TGW-Sharing</p></li><li><p>리소스 유형 선택 : 전송 게이트웨이 —&gt; MAIN SITE에 생성한 TGW 지정</p></li><li><p>프린시펄 AWS 계정 번호 —&gt; 서브 AWS 계정 번호 입력</p></li></ul></li></ul><p><img src="/images/LabGuide-AWS-Transit-Gateway/Untitled15.png" alt="LabGuide%20AWS%20Transit%20Gateway%20efff213e58a546c5bc56273e4425244a/Untitled%2015.png"></p><p>그림 5.3 서브 계정에서 내 보안 자격 증명에 진입하여 AWS 계정 ID 확인</p><p><img src="/images/LabGuide-AWS-Transit-Gateway/Untitled16.png" alt="LabGuide%20AWS%20Transit%20Gateway%20efff213e58a546c5bc56273e4425244a/Untitled%2016.png"></p><p>그림 5.4 리소스 공유 설정 화면</p><p>5.2.2) Resource Access Manager 리소스 공유 수락 (서브 계정)</p><p><img src="/images/LabGuide-AWS-Transit-Gateway/Untitled17.png" alt="LabGuide%20AWS%20Transit%20Gateway%20efff213e58a546c5bc56273e4425244a/Untitled%2017.png"></p><p>그림 5.5 서브 계정에서 RAM에 진입하여 리소스 공유 초대 확인</p><ul><li>본 계정에서 공유한 TGW를 선택 후 리소스 공유 수락</li></ul><p><img src="/images/LabGuide-AWS-Transit-Gateway/Untitled18.png" alt="LabGuide%20AWS%20Transit%20Gateway%20efff213e58a546c5bc56273e4425244a/Untitled%2018.png"></p><p>그림 5.6 서브 계정에서 공유 리소스 확인</p><ul><li>공유 리소스 메뉴로 접근하여 공유된 TGW 정보 확인</li></ul><p>5.2.3) Multi Account VPC Attachment (본 계정 / 서브 계정)</p><ul><li><p>VPC —&gt; Transit Gateway로 진입하면 공유 받은 TGW 정보 확인 (서브 계정)</p></li><li><p>VPC —&gt; Transit Gateway Attachment (서브 계정)</p><ul><li><p>Transit Gateway ID : 지정</p></li><li><p>Attachment Type : VPC</p></li><li><p>Attachment Name Tag : SUB-VPC03-ATT</p></li><li><p>VPC ID : MAIN-A —&gt; AZ &amp; Subnet 지정</p></li></ul></li><li><p>VPC —&gt; Transit Gateway Attachment —&gt; 작업 —&gt; Accept (본 계정)</p></li></ul><p><img src="/images/LabGuide-AWS-Transit-Gateway/Untitled19.png" alt="LabGuide%20AWS%20Transit%20Gateway%20efff213e58a546c5bc56273e4425244a/Untitled%2019.png"></p><p>그림 5.7 서브 계정에서 TGW Attachment 상태 확인</p><ul><li>서브 계정에서 TGW VPC Attachment를 수행해도 바로 연결이 되지 않고 pending acceptance 상태이다.</li><li>본 계정에 진입하여 Accept 해준다. (1~2분 후 성공)</li></ul><br><p>5.3 Routing Table 설정 (서브 계정)</p><ul><li><p>CloudFormation에 의해 생성된 2개의 라우팅 테이블에 경로를 추가한다.</p><ul><li>라우팅 편집 —&gt; 라우팅 추가 —&gt; 10.0.0.0/8 대역, tgw-xxxx 타겟</li></ul></li></ul><br><p>5.4 Verify</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@MAIN-MGT ec2-user]<span class="comment"># ./pingall.sh</span></span><br><span class="line">node google.com is up</span><br><span class="line">node 10.1.1.10 is up</span><br><span class="line">node 10.2.1.10 is up</span><br><span class="line">node 10.2.2.10 is up</span><br><span class="line">node 10.3.1.10 is up</span><br><span class="line">node 10.3.2.10 is up</span><br><span class="line">node 10.4.1.10 is down</span><br><span class="line">node 10.5.1.10 is down</span><br><span class="line">node 10.6.1.10 is down</span><br><span class="line">[root@MAIN-MGT ec2-user]<span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li>MAIN-MGT EC2에 접속하여 <code>pingall.sh</code> 스크립트를 수행한다.</li><li><code>버지니아</code> MAIN과 SUB SITE에 존재하는 EC2 끼리 통신이 가능하다.</li></ul><details><summary><b>5장 현재까지 완료된 구성도 확인</summary></summary></b><div markdown="1"><p><img src="/images/LabGuide-AWS-Transit-Gateway/Untitled20.png" alt="LabGuide%20AWS%20Transit%20Gateway%20efff213e58a546c5bc56273e4425244a/Untitled%2020.png"></p></div></details><hr><br><h3 id="6-AWS-Transit-Gateway-Inter-Region-Peering-Test"><a href="#6-AWS-Transit-Gateway-Inter-Region-Peering-Test" class="headerlink" title="6. AWS Transit Gateway Inter Region Peering Test"></a>6. AWS Transit Gateway Inter Region Peering Test</h3><ul><li><strong>이 번 단계의 실습은 MAIN SITE TGW와 다른 리전에 있는 BRANCH SITE TGW를 연결하여  테스트한다. (Inter Region Peering TGW Attachment)</strong></li><li>참고로 Inter-Regional-Peering은 <code>버지니아, 오하이오, 오레곤, 아일랜드, 프랑크푸르트</code> 리전 에서만 지원한다.</li><li>실습 환경: Region - <code>아일랜드</code> , Account - 본 AWS 계정</li></ul><p><span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS9rby9ibG9ncy9hd3MvYXdzLXRyYW5zaXQtZ2F0ZXdheS1hZGRzLW11bHRpY2FzdC1hbmQtaW50ZXItcmVnaW9uYWwtcGVlcmluZy8=">AWS Transit Gateway Adds Multicast and Inter-Regional Peering | Amazon Web Services<i class="fa fa-external-link-alt"></i></span></p><p>참고 링크 : AWS Transit Gateway Adds Multicast &amp; Inter Regional Peering</p><br><p>6.1 아일랜드 CloufFormation 배포</p><p>6.1.1) CloudFormation 배포</p><ul><li>2.3항에서 제공한 Ireland_TransitGW_Lab_CF.yaml 파일을 배포하자.</li></ul><details><summary>아일랜드 CF 생성 인프라</summary><div markdown="1"><pre><code>- EC2-Instance 2개- VPC 2개, Public Subnet 1개, Private Subnet 1개, Routing Table 2개, IGW 1개- Security Group 2개- Transit Gateway 1개, Transit Gateway Attachment 2개</code></pre></div></details><ul><li>위 생성된 인프라가 정상적으로 올라왔는 지 확인하자</li><li>아일랜드에서 사용할 인프라를 CloudFormation에서 모두 정의하였다. (TGW까지 포함)</li><li>Routing Table 추가는 정의하지 않아 수동으로 작업 (🤢TGW 생성 및 Attachment 되는 딜레이가 발생하여 경로 설정을 못하고 타임 아웃)</li></ul><br><p>6.2 Inter Region Peering 설정</p><p>6.2.1) TGW Attachment - Inter Region Peering </p><ul><li><p>VPC —&gt; Transit Gateway Attachment —&gt; Create Transit Gateway Attachment (<code>아일랜드</code>)</p><ul><li><p>Transit Gateway ID : BRC-TGW 대상 지정</p></li><li><p>Attachment Type : Peering</p></li><li><p>Attachment Name Tag : MAIN-TGW-ATT</p></li><li><p>Region : N. Virginia</p></li><li><p>Transit Gateway (accepter) : MAIN-TGW 대상 지정 (<code>버지니아</code>에 집입하여 TGW ID를 확인 후 직접 입력해야 한다)</p></li></ul></li></ul><p><img src="/images/LabGuide-AWS-Transit-Gateway/Untitled21.png" alt="LabGuide%20AWS%20Transit%20Gateway%20efff213e58a546c5bc56273e4425244a/Untitled%2021.png"></p><p>그림 6.1 아일랜드 리전에서 Inter Region Peering 설정</p><p><img src="/images/LabGuide-AWS-Transit-Gateway/Untitled22.png" alt="LabGuide%20AWS%20Transit%20Gateway%20efff213e58a546c5bc56273e4425244a/Untitled%2022.png"></p><p>그림 6.2 Transit Gateway Attachment Inter Region Peering 은 바로 적용이 되지 않음 (버지니아에서 수락)</p><ul><li>VPC —&gt; Transit Gateway Attachment —&gt; 대상 지정 —&gt; 작업 —&gt; Accept (<code>버지니아</code>)</li></ul><p><img src="/images/LabGuide-AWS-Transit-Gateway/Untitled23.png" alt="LabGuide%20AWS%20Transit%20Gateway%20efff213e58a546c5bc56273e4425244a/Untitled%2023.png"></p><p>그림 6.3 Transit Gateway Attachment Inter Region Peering 확인</p><ul><li>Inter Region Peering Attachment 된 것을 확인 할 수 있다. (구분을 위해 BRC-TGW-ATT로 Tag함)</li></ul><br><p>6.3 Routing Table 설정</p><p>6.3.1) BRANCH SITE VPC의 Routing Table 설정</p><ul><li><p>CloudFormation에 의해 생성된 2개의 라우팅 테이블에 경로를 추가한다.</p><ul><li>라우팅 편집 —&gt; 라우팅 추가 —&gt; 10.0.0.0/8 대역, tgw-xxxx 타겟</li></ul></li></ul><p>6.3.2) MAIN-TGW의 Routing Table 설정</p><ul><li><p>VPC —&gt; Transit Gateway Routing Table —&gt; 대상 선택 —&gt; Route 탭 —&gt; Create Route</p><ul><li>10.0.0.0/8 대역, BRANCH-TGW 타겟 (tgw-xxxx)</li></ul></li></ul><p>6.3.3) BRANCH-TGW의 Routing Table 설정</p><ul><li><p>VPC —&gt; Transit Gateway Routing Table —&gt; 대상 선택 —&gt; Route 탭 —&gt; Create Route</p><ul><li>10.0.0.0/8 대역, MAIN-TGW 타겟 (tgw-xxxx)</li></ul></li></ul><br><p>6.4 Verify</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[ec2-user@MAIN-MGT ~]$ ./pingall.sh</span><br><span class="line">node google.com is up</span><br><span class="line">node 10.1.1.10 is up</span><br><span class="line">node 10.2.1.10 is up</span><br><span class="line">node 10.2.2.10 is up</span><br><span class="line">node 10.3.1.10 is up</span><br><span class="line">node 10.3.2.10 is up</span><br><span class="line">node 10.4.1.10 is up</span><br><span class="line">node 10.5.1.10 is up</span><br><span class="line">node 10.6.1.10 is down</span><br><span class="line">[ec2-user@MAIN-MGT ~]$</span><br></pre></td></tr></table></figure><ul><li>MAIN-MGT EC2에 접속하여 <code>pingall.sh</code> 스크립트를 수행한다.</li><li><code>버지니아</code> MAIN / SUB / BRANCH SITE에 존재하는 EC2 끼리 통신이 가능하다.</li></ul><details><summary><b>6장 현재까지 완료된 구성도 확인</summary></summary></b><div markdown="1"><p><img src="/images/LabGuide-AWS-Transit-Gateway/Untitled24.png" alt="LabGuide%20AWS%20Transit%20Gateway%20efff213e58a546c5bc56273e4425244a/Untitled%2024.png"></p></div></details><hr><br><h3 id="7-AWS-Transit-Gateway-VPN-Attachment"><a href="#7-AWS-Transit-Gateway-VPN-Attachment" class="headerlink" title="7. AWS Transit Gateway VPN Attachment"></a>7. AWS Transit Gateway VPN Attachment</h3><ul><li><strong>이 번 단계의 실습은 MAIN SITE TGW와 다른 리전에 있는 Site-to-Site VPN을 연결하는  테스트를 한다. (AWS Transit Gateway VPN Attachment)</strong></li><li>서울 리전에 VPC를 생성하여 VPN 서버를 배치하는데, 가상으로 On-Premise 환경이라 가정하여 테스트 한다.</li><li>실습 환경: Region - <code>버지니아, 서울</code> , Account - 본 AWS 계정</li></ul><br><p>7.1 서울 CloufFormation 배포</p><p>7.1.1) CloudFormation 배포</p><ul><li><p>2.3항에서 제공한 Seoul_TransitGW_Lab_CF.yaml 파일을 배포하자.</p></li><li><p>서울 CF 생성 인프라</p><ul><li><p>EC2-Instance 1개</p></li><li><p>VPC 1개, Public Subnet 1개, Routing Table 1개, IGW 1개</p></li><li><p>Security Group 1개</p></li></ul></li><li><p>위 생성된 인프라가 정상적으로 올라왔는 지 확인하자.</p></li></ul><br><p>7.2 AWS Site to Site VPN 설정</p><p>7.2.1) Custom Gateway 생성</p><ul><li><p>VPC —&gt; VPN —&gt; 고객 게이트웨이 —&gt; 고객 게이트웨이 생성 (<code>버지니아</code>)</p><ul><li><p>이름 : CloudNeta-CGW</p></li><li><p>라우팅 : 정적</p></li><li><p>IP 주소 : <code>서울</code>에 위치한 EC2 Public IP 주소</p></li></ul></li></ul><p>7.2.2) TGW VPN Attachment</p><ul><li><p>VPC —&gt; Transit Gateway Attachment —&gt; 사이트 간 VPN 연결 —&gt; VPN 연결 생성 (<code>버지니아</code>)</p><ul><li><p>Transit Gateway ID : MAIN-TGW 선택</p></li><li><p>Attachment Type : VPN</p></li></ul><hr><ul><li><p>고객 게이트웨이 : Existing</p></li><li><p>Customer Gateway ID : 생성한 CGW 선택</p></li></ul><hr><ul><li>라우팅 옵션 : 정적</li></ul></li></ul><p><img src="/images/LabGuide-AWS-Transit-Gateway/Untitled25.png" alt="LabGuide%20AWS%20Transit%20Gateway%20efff213e58a546c5bc56273e4425244a/Untitled%2025.png"></p><p>7.2.3) VPN 구성 다운로드</p><ul><li>VPC —&gt; VPN —&gt; 사이트 간 VPN에 접근한다</li><li>일정 시간이 지나면 Site to Site VPN 연결 상태는 사용 가능 상태로 전환된다.</li><li>AWS에서는 연결 할 상대방 VPN 서버에 대한 구성 정보를 친절히 제공하고 있다.</li><li>구성 다운로드  —&gt; 공급업체 : Openswan 선택</li></ul><p><img src="/images/LabGuide-AWS-Transit-Gateway/Untitled26.png" alt="LabGuide%20AWS%20Transit%20Gateway%20efff213e58a546c5bc56273e4425244a/Untitled%2026.png"></p><br><p>7.3 OpenSwan VPN 서버 설정</p><ul><li><code>서울</code>에 생성한 EC2-Instance에 SSH 접속을 한다.</li></ul><p>7.3.1) aws-vpn.conf 생성 및 입력</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[ec2-user@OPM-VPN ~]$ sudo su</span><br><span class="line">[root@OPM-VPN ec2-user]<span class="comment">#</span></span><br><span class="line">[root@OPM-VPN ec2-user]<span class="comment"># vi /etc/ipsec.d/aws-vpn.conf</span></span><br></pre></td></tr></table></figure><ul><li>vi 편집기 모드로 <code>/etc/ipsec.d/aws-vpn.conf</code> 파일을 생성하여 접근한다.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ipsec.d/aws-vpn.conf</span><br><span class="line">--------------------------------------------------------------------------</span><br><span class="line">conn Tunnel1</span><br><span class="line">authby=secret</span><br><span class="line">auto=start</span><br><span class="line">left=%defaultroute</span><br><span class="line">leftid=54.180.131.143</span><br><span class="line">right=34.231.125.200</span><br><span class="line"><span class="built_in">type</span>=tunnel</span><br><span class="line">ikelifetime=8h</span><br><span class="line">keylife=1h</span><br><span class="line">phase2alg=aes128-sha1;modp1024</span><br><span class="line">ike=aes128-sha1;modp1024</span><br><span class="line">~~auth=esp~~ 삭제</span><br><span class="line">keyingtries=%forever</span><br><span class="line">keyexchange=ike</span><br><span class="line">leftsubnet=&lt;LOCAL NETWORK&gt; 10.6.0.0/16 으로 입력</span><br><span class="line">rightsubnet=&lt;REMOTE NETWORK&gt; 10.0.0.0/8 으로 입력</span><br><span class="line">dpddelay=10</span><br><span class="line">dpdtimeout=30</span><br><span class="line">dpdaction=restart_by_peer</span><br></pre></td></tr></table></figure><ul><li><p>해당 코드 정보는 <strong>7.2.3항에서 다운 받은 TXT 파일에서 4항의 내용</strong>을 사용한다. (☢ 위 코드 값을 넣으라는 것이 아니라 각자 다운받은 TXT 파일을 참조해서 설정)</p></li><li><p><em>코드 내용 중 수정이 필요한 사항</em></p><ul><li><p>LOCAL NETWORK는 VPC-OPM의 대역으로 10.6.0.0/16 입력한다.</p></li><li><p>REMOTE NETWORK는 AWS 대역으로 10.0.0.0/8 입력한다.</p></li><li><p>auto=esp 삭제</p></li><li><p>나머지는 있는 그대로 사용</p></li></ul></li></ul><p>7.3.2) aws-vpn.secrets 생성</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@OPM-VPN ec2-user]<span class="comment"># vi /etc/ipsec.d/aws-vpn.secrets</span></span><br></pre></td></tr></table></figure><ul><li>vi 편집기 모드로 <code>/etc/ipsec.d/aws-vpn.secrets</code> 파일을 생성하여 접근한다.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ipsec.d/aws-vpn.conf</span><br><span class="line">--------------------------------------------------------------------------</span><br><span class="line">54.180.131.143 34.231.125.200: PSK <span class="string">"DWJ2n0smRq6gDlMUuIweGa45m8c_RvZ3"</span></span><br></pre></td></tr></table></figure><ul><li>해당 코드 정보는 <strong>7.2.3항에서 다운 받은 TXT 파일에서 5항의 내용</strong>을 사용한다. (☢ 위 코드 값을 넣으라는 것이 아니라 각자 다운받은 TXT 파일을 참조해서 설정)</li></ul><p>7.3.3) OpenSwan VPN 서버 시작</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@OPM-VPN ec2-user]<span class="comment"># chkconfig ipsec on</span></span><br><span class="line">:</span><br><span class="line">[root@OPM-VPN ec2-user]<span class="comment"># service ipsec start</span></span><br><span class="line">:</span><br><span class="line">[root@OPM-VPN ec2-user]<span class="comment"># service ipsec status</span></span><br><span class="line">Redirecting to /bin/systemctl status ipsec.service</span><br><span class="line">● ipsec.service - Internet Key Exchange (IKE) Protocol Daemon <span class="keyword">for</span> IPsec</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/ipsec.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Fri 2020-05-08 07:49:18 UTC; 10s ago</span><br><span class="line">     Docs: man:ipsec(8)</span><br><span class="line">           man:pluto(8)</span><br><span class="line">           man:ipsec.conf(5)</span><br><span class="line">  Process: 4718 ExecStopPost=/usr/sbin/ipsec --stopnflog (code=exited, status=0/SUCCESS)</span><br><span class="line">:</span><br></pre></td></tr></table></figure><ul><li>OpenSwan의 상태가 Active 임을 확인 한다.</li></ul><p><img src="/images/LabGuide-AWS-Transit-Gateway/Untitled27.png" alt="LabGuide%20AWS%20Transit%20Gateway%20efff213e58a546c5bc56273e4425244a/Untitled%2027.png"></p><ul><li>버지니아 Site to Site VPN 상태를 보면 Tunnel 1이 작동 상태로 올라왔다.</li></ul><br><p>7.4 TGW 라우팅 테이블 설정</p><ul><li><p>Transit Gateway 라우팅 테이블에서 On-Premise 대역에 대한 라우팅을 잡아야 한다.</p></li><li><p>VPC —&gt; Transit Gateway 라우팅 테이블 —&gt; TGW 대상 지정 —&gt; Route 탭 —&gt; Create Route</p><ul><li><p>CIDR : 10.6.0.0/16</p></li><li><p>Choose Attachment : 위에 생성한 VPN Attachment 지정</p><p><img src="/images/LabGuide-AWS-Transit-Gateway/Untitled28.png" alt="LabGuide%20AWS%20Transit%20Gateway%20efff213e58a546c5bc56273e4425244a/Untitled%2028.png"></p></li></ul></li></ul><br><p>7.5 Verify</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@MAIN-MGT ec2-user]<span class="comment"># ./pingall.sh</span></span><br><span class="line">node google.com is up</span><br><span class="line">node 10.1.1.10 is up</span><br><span class="line">node 10.2.1.10 is up</span><br><span class="line">node 10.2.2.10 is up</span><br><span class="line">node 10.3.1.10 is up</span><br><span class="line">node 10.3.2.10 is up</span><br><span class="line">node 10.4.1.10 is up</span><br><span class="line">node 10.5.1.10 is up</span><br><span class="line">node 10.6.1.10 is up</span><br><span class="line">[root@MAIN-MGT ec2-user]<span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li>MAIN-MGT EC2에 접속하여 <code>pingall.sh</code> 스크립트를 수행한다.</li><li>드디어 모든 구간으로 통신이 가능하다.</li></ul><details><summary><b>7장 현재까지 완료된 구성도 확인</summary></summary></b><div markdown="1"><p><img src="/images/LabGuide-AWS-Transit-Gateway/Untitled29.png" alt="LabGuide%20AWS%20Transit%20Gateway%20efff213e58a546c5bc56273e4425244a/Untitled%2029.png"></p></div></details><hr><br><h3 id="8-NAT-Gateway-through-AWS-Transit-Gateway"><a href="#8-NAT-Gateway-through-AWS-Transit-Gateway" class="headerlink" title="8. NAT Gateway through AWS Transit Gateway"></a>8. NAT Gateway through AWS Transit Gateway</h3><ul><li><strong>이 번 단계의 실습은 Private Subnet에 존재하는 인스턴스를 TGW를 통해 MAIN SITE의 Egress VPC에 존재하는 NAT GW를 통해 외부 인터넷 통신을 테스트한다.</strong></li><li>본 실습에서 Private Subnet은 크게 TEST 환경과 DEV 환경으로 구분할 수 있다. 이 중에 DEV 환경만 NAT GW를 통해 외부 인터넷 통신을하고, TEST 환경은 폐쇄망 성격으로 외부 인터넷 통신을 하지 않도록 하는 컨셉이다.</li><li>실습 환경: Region - <code>버지니아</code> , Account - 본 AWS 계정 + 서브 AWS 계정</li></ul><br><p>8.1 버지니아 CloufFormation 배포</p><p>8.1.1) CloudFormation 배포</p><ul><li>2.3항에서 제공한 Virginia_TransitGW_Lab_CF.yaml 파일을 배포하자.</li></ul><blockquote><p>💡 주의: CF Condition에 의해 <strong>파라미터 값을 Nat로 지정</strong>하자!</p></blockquote><p><img src="/images/LabGuide-AWS-Transit-Gateway/Untitled30.png" alt="LabGuide%20AWS%20Transit%20Gateway%20efff213e58a546c5bc56273e4425244a/Untitled%2030.png"><br>그림 8.1 NAT 용도의 CloudFormation 생성 (EnvType을 Nat로 지정)</p><details><summary>버지니아 CF 생성 인프라 (NAT)</summary><div markdown="1"><pre><code>- NAT Gateway 1개- VPC 1개, Public Subnet 1개, Private Subnet 1개, Routing Table 2개, IGW 1개</code></pre></div></details><ul><li>위 생성된 인프라가 정상적으로 올라왔는 지 확인하자.</li></ul><br><p>8.2 TGW Attachment</p><ul><li><p>VPC —&gt; Transit Gateway Attachment —&gt; Create Transit Gateway Attachment</p><ul><li><p>Transit Gateway ID 지정</p></li><li><p>Attachment Type : VPC</p></li><li><p>Attachment Name Tag : MAIN-VPCEG-ATT</p></li><li><p>VPC ID : VPC01 —&gt; AZ &amp; Subnet 지정</p></li></ul></li></ul><br><p>8.3 Routing Table 설정</p><p>8.3.1) DEV 환경의 라우팅 설정</p><ul><li><p>DEV 환경은 MAIN-DEV와 SUB-DEV 2군데만 설정 이다.</p></li><li><p>VPC —&gt; 라우팅 테이블 —&gt; 대상 지정 (본 계정, 서브계정 모두 설정)</p><ul><li>라우팅 편집 —&gt; 라우팅 추가 —&gt; 0.0.0.0/0 대역, TGW 타겟(tgw-xxxx)</li></ul></li></ul><p>8.3.2) TGW의 라우팅설정</p><ul><li><p>VPC —&gt; Transit Gateway 라우팅 테이블 —&gt; 대상 지정 —&gt; Route 탭 —&gt; Create Route</p><ul><li>0.0.0.0/0 대역, MAIN-VPCEG-ATT 대상 지정</li></ul></li></ul><p>8.3.3) VPCEG의 Private와 Public 라우팅 설정 (2 군데 설정)</p><ul><li><p>VPC —&gt; 라우팅 테이블 —&gt; 대상 지정</p><ul><li>라우팅 편집 —&gt; 라우팅 추가 —&gt; 10.0.0.0/8 대역, TGW 타겟(tgw-xxxx)</li></ul></li></ul><p>8.3 Verify</p><ul><li>MAIN-TEST, MAIN-DEV, SUB-TEST, SUB-DEV에 SSH로 접근하여 pingall.sh 수행 (root계정 암호: qwe123)</li></ul><p>8.3.1) MAIN-TEST 테스트</p><ul><li><p>View Result</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@MAIN-TEST ~]<span class="comment"># ./pingall.sh</span></span><br><span class="line">node google.com is down</span><br><span class="line">node 10.1.1.10 is up</span><br><span class="line">node 10.2.1.10 is up</span><br><span class="line">node 10.2.2.10 is up</span><br><span class="line">node 10.3.1.10 is up</span><br><span class="line">node 10.3.2.10 is up</span><br><span class="line">node 10.4.1.10 is up</span><br><span class="line">node 10.5.1.10 is up</span><br><span class="line">node 10.6.1.10 is up</span><br><span class="line">[root@MAIN-TEST ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li>내부 인프라와는통신되지만 외부 인터넷 통신은 불가하다.</li></ul></li></ul><p>8.3.2) MAIN-DEV 테스트</p><ul><li><p>View Result</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@MAIN-DEV ~]<span class="comment"># ./pingall.sh</span></span><br><span class="line">node google.com is up</span><br><span class="line">node 10.1.1.10 is up</span><br><span class="line">node 10.2.1.10 is up</span><br><span class="line">node 10.2.2.10 is up</span><br><span class="line">node 10.3.1.10 is up</span><br><span class="line">node 10.3.2.10 is up</span><br><span class="line">node 10.4.1.10 is up</span><br><span class="line">node 10.5.1.10 is up</span><br><span class="line">node 10.6.1.10 is up</span><br><span class="line">[root@MAIN-DEV ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li>모든 영역으로 통신이 가능하다.</li></ul></li></ul><p>8.3.3) SUB-TEST 테스트</p><ul><li><p>View Result</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@SUB-TEST ~]<span class="comment"># ./pingall.sh</span></span><br><span class="line">node google.com is down</span><br><span class="line">node 10.1.1.10 is up</span><br><span class="line">node 10.2.1.10 is up</span><br><span class="line">node 10.2.2.10 is up</span><br><span class="line">node 10.3.1.10 is up</span><br><span class="line">node 10.3.2.10 is up</span><br><span class="line">node 10.4.1.10 is up</span><br><span class="line">node 10.5.1.10 is up</span><br><span class="line">node 10.6.1.10 is up</span><br><span class="line">[root@SUB-TEST ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li>내부 인프라와는통신되지만 외부 인터넷 통신은 불가하다.</li></ul></li></ul><p>8.3.4) SUB-DEV 테스트</p><ul><li><p>View Result</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@SUB-DEV ~]<span class="comment"># ./pingall.sh</span></span><br><span class="line">node google.com is up</span><br><span class="line">node 10.1.1.10 is up</span><br><span class="line">node 10.2.1.10 is up</span><br><span class="line">node 10.2.2.10 is up</span><br><span class="line">node 10.3.1.10 is up</span><br><span class="line">node 10.3.2.10 is up</span><br><span class="line">node 10.4.1.10 is up</span><br><span class="line">node 10.5.1.10 is up</span><br><span class="line">node 10.6.1.10 is up</span><br><span class="line">[root@SUB-DEV ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li>모든 영역으로 통신이 가능하다.</li></ul></li></ul><details><summary><b>8장 현재까지 완료된 구성도 확인</summary></summary></b><div markdown="1"><p><img src="/images/LabGuide-AWS-Transit-Gateway/Untitled31.png" alt="LabGuide%20AWS%20Transit%20Gateway%20efff213e58a546c5bc56273e4425244a/Untitled%2031.png"></p></div></details><hr><br><h3 id="9-AWS-Transit-Gateway-Network-Manager"><a href="#9-AWS-Transit-Gateway-Network-Manager" class="headerlink" title="9. AWS Transit Gateway Network Manager"></a>9. AWS Transit Gateway Network Manager</h3><ul><li><strong>이 번 단계의 실습은 TGW Network Manager 기능을 통해 가시성 있게 Global Network를 모니터링한다.</strong></li></ul><br><p>9.1 Create Global Network</p><ul><li><p>VPC —&gt; Transit Gateway —&gt; 네트워크 관리자 —&gt; Create a Global Network</p><ul><li>이름 : CloudNeta-GN</li></ul></li></ul><br><p>9.2 Transit Gateway 등록</p><ul><li><p>네트워크 관리자 데시보드에서 전송 게이트웨이 추가한다.</p><ul><li><p>CloudNeta-MAIN-TGW</p></li><li><p>BRC-TGW</p></li></ul></li></ul><p><img src="/images/LabGuide-AWS-Transit-Gateway/Untitled32.png" alt="LabGuide%20AWS%20Transit%20Gateway%20efff213e58a546c5bc56273e4425244a/Untitled%2032.png"></p><p>그림 9.1 TGW Global Network 네트워크 관리자에서 Transit Gateway 등록</p><br><p>9.3 Verify</p><p>9.3.1) 지리적 정보</p><p><img src="/images/LabGuide-AWS-Transit-Gateway/Untitled33.png" alt="LabGuide%20AWS%20Transit%20Gateway%20efff213e58a546c5bc56273e4425244a/Untitled%2033.png"></p><p>그림 9.2 TGW의 지리적 위치 표현</p><p>9.3.2) 토폴로지</p><p><img src="/images/LabGuide-AWS-Transit-Gateway/Untitled34.png" alt="LabGuide%20AWS%20Transit%20Gateway%20efff213e58a546c5bc56273e4425244a/Untitled%2034.png"></p><p>그림 9.3 Global Network 연결 토폴로지 확인</p><p>9.3.4) 모니터링</p><p><img src="/images/LabGuide-AWS-Transit-Gateway/Untitled35.png" alt="LabGuide%20AWS%20Transit%20Gateway%20efff213e58a546c5bc56273e4425244a/Untitled%2035.png"></p><p>그림 9.4 Global Network 모니터링 정보</p><p>9.3.5) Route Analyzer</p><p><img src="/images/LabGuide-AWS-Transit-Gateway/Untitled36.png" alt="LabGuide%20AWS%20Transit%20Gateway%20efff213e58a546c5bc56273e4425244a/Untitled%2036.png"></p><p>그림 9.5 경로 분석기 (Route Analyzer) 정보 입력</p><p><img src="/images/LabGuide-AWS-Transit-Gateway/Untitled37.png" alt="LabGuide%20AWS%20Transit%20Gateway%20efff213e58a546c5bc56273e4425244a/Untitled%2037.png"><br>그림 9.6 경로 분석기 결과 확인</p><p><span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS9rby9hYm91dC1hd3Mvd2hhdHMtbmV3LzIwMjAvMDUvYW5ub3VuY2luZy1yb3V0ZS1hbmFseXplci1pbi1hd3MtdHJhbnNpdC1nYXRld2F5LW5ldHdvcmstbWFuYWdlci8=">AWS Transit Gateway 네트워크 관리자 Route Analyzer 발표<i class="fa fa-external-link-alt"></i></span></p><p>참고 링크 : AWS TGW 네트워크 관리 Route Analyzer 발표</p><hr><br><h3 id="10-Delete-Resources"><a href="#10-Delete-Resources" class="headerlink" title="10. Delete Resources"></a>10. Delete Resources</h3><p>01) TGW 네트워크 매니저 전송 게이트웨이 등록 취소</p><p>02) 글로벌 네트워크 삭제</p><p>03) <code>서울</code> CloudFormation 스택 삭제</p><p>04) <code>아이랜드</code> TGW Attachment에서 TGW Peering 대상 삭제</p><p>05) <code>아일랜드</code> CloudFormation 스택 삭제</p><p>06) 서브 계정 Resource Access Manager에서 리소스 공유 나가기</p><p>07) 메인 계정 Resource Access Manager에서 리소스 삭제</p><p>08) 서브 계정 TGW Attachment에서 VPC Attachment 대상 삭제</p><p>09) 서브 계정 <code>버지니아</code> CloudFormation 스택 삭제</p><p>10) <code>버지니아</code> 사이트 간 VPN 연결 삭제 후 고객 게이트웨이 삭제</p><p>11) <code>버지니아</code> TGW Multicast Domain 삭제 (우선 Delete Association 후 삭제)</p><p>12) <code>버지니아</code> TGW Attachment 대상 모두 삭제</p><p>13) <code>버지니아</code> Trasit Gateway 삭제</p><p>14) <code>버지니아</code> NAT CloudFormation 스택 삭제</p><p>15) <code>버지니아</code> MAIN CloudFormation 스택  삭제</p><blockquote><p>🔔 CloudFormation 스택을 삭제 시 일정 시간이 소요되는데, 너무 시간이 오래 걸린다면 수동으로 관련 인프라를 삭제해야 한다.<br>반드시, 실습을 위해 생성한 리소스는 삭제한다.</p></blockquote><br>]]></content:encoded>
      
      <comments>http://cloudneta.github.io/2020/05/16/Transit-Gateway/#disqus_thread</comments>
    </item>
    
    <item>
      <title>AWS VPN Site to Site with Dynamic Route</title>
      <link>http://cloudneta.github.io/2020/05/07/VPN-SitetoSite-with-Dynamic-Route/</link>
      <guid>http://cloudneta.github.io/2020/05/07/VPN-SitetoSite-with-Dynamic-Route/</guid>
      <pubDate>Thu, 07 May 2020 10:45:01 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;em&gt;작성자 : gasida.cloudnet@&lt;/em&gt;&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><em>작성자 : gasida.cloudnet@</em></p><a id="more"></a><br><details><summary>AWS Document Link</summary><div markdown="1"><ul><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2tvX2tyL3Zwbi9sYXRlc3QvczJzdnBuL1ZQQ19WUE4uaHRtbA==">Site-to-Site VPN User Guide<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2tvX2tyL3ZwYy9sYXRlc3QvYWRtaW5ndWlkZS9XZWxjb21lLmh0bWw=">Site-to-Site VPN Network Administrator Guide<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93aWtpLnZ5b3MubmV0L3dpa2kvVXNlcl9HdWlkZQ==">VYOS User Guide<i class="fa fa-external-link-alt"></i></span></li></ul></div></details><hr><br><h3 id="1-AWS-VPN-Site-to-Site-with-Dynamic-Route-BGP"><a href="#1-AWS-VPN-Site-to-Site-with-Dynamic-Route-BGP" class="headerlink" title="1. AWS VPN Site to Site with Dynamic Route (BGP)"></a>1. AWS VPN Site to Site with Dynamic Route (BGP)</h3><ul><li><p>VPN 을 통한 내부 네트워크 대역에 대한 라우팅 광로를 BGP 를 통하여 동적으로 업데이트 한다</p></li><li><p>BGP AS 는 2- or 4-byte ASN 를 사용</p></li><li><p>AWS VGW는 BGP로 Amazon VPC 대역을 광고한다</p><p>  → 즉, IDC(고객측)에는 AWS VPC대역의 네트워크 정보를 알게 된다</p></li><li><p>AWS VGW는 BGP로 VPC대역 광고 시 BGP MED 100 과 200 을 각각 Tunnel 로 광고한다</p><p>  → 즉, IDC(고객측)에서는 BGP MED 100이 우선함으로 1개의 Tunnel 이 선정되고 실제 트래픽이 해당 Tunnel 로 통신한다</p></li><li><p>IPsec tunnels 과 BGP sessions 는 항상 고객측(CGW)에서 시작한다</p></li></ul><hr><br><h3 id="2-AWS-VPN-Site-to-Site-with-Dynamic-Route-BGP-Lab-Preview"><a href="#2-AWS-VPN-Site-to-Site-with-Dynamic-Route-BGP-Lab-Preview" class="headerlink" title="2. AWS VPN Site to Site with Dynamic Route (BGP) Lab Preview"></a>2. AWS VPN Site to Site with Dynamic Route (BGP) Lab Preview</h3><br><p>2.1 Lab Topology</p><ul><li><p><code>서울, 싱가폴</code> Region에 각각 AWS 환경과, IDC 환경(가정)으로 구성</p><ul><li>IDC 환경은 실제 AWS 영역이 아니라 일반 기업 물리망이지만 실습의 편리성을 위해서 AWS 환경에서 구성함</li></ul></li><li><p><code>서울</code> Region 은 AWS VGW를 배치하고 Public Subnet 에 테스트 용도의 EC2를 배치함</p></li><li><p><code>싱가폴</code> Region (IDC환경)은 VPN 역할을 VYOS(커뮤니티AMI)로 하며 Private Subnet에 테스트 용도의 EC2를 배치함</p><p>  <img src="/images/VPN-SitetoSite-with-Dynamic-Route/Untitled.png" alt="AWS%20VPN%20Site%20to%20Site%20with%20Dynamic%20Route%20BGP%2005b6a5e86b864ae6b876cae1b8184477/Untitled.png"></p></li></ul><blockquote><p>💡 VYOS는 리눅스(Debina) 기반에 라우팅, 방화벽, VPN 기능을 제공하여 VPN 역할로 선택함. <span class="exturl" data-url="aHR0cHM6Ly93aWtpLnZ5b3MubmV0L3dpa2kvVXNlcl9HdWlkZQ==">참고 링크<i class="fa fa-external-link-alt"></i></span></p></blockquote><br><p>2.2 기본 설정</p><ul><li>본 실습에서 활용할 AWS Region은 <code>서울, 싱가폴</code> 입니다. 해당 Region에 대한 <em>EC2-Key Pair</em>를 생성</li><li><code>시드니, 상파울루</code> Region 에 리소스는 <em>CloudFormation</em>에 의해 2.1 그림의 인프라를 자동 구축 (2.3항에서 진행)</li></ul><br><p>2.3 CloudFormation (Infrastructure as Code)</p><details><summary><b>싱가폴 Region에서 CloudFormation 스택을 생성한다.</summary></b><div markdown="1"><ul><li>1단계 템플릿 지정<ul><li>템플릿 준비 : 준비된 템플릿</li><li>템플릿 소스 : Amazon S3 URL</li><li>Amazon S3 URL : <span class="exturl" data-url="aHR0cHM6Ly9zMy5hcC1ub3J0aGVhc3QtMi5hbWF6b25hd3MuY29tL2Nsb3VkZm9ybWF0aW9uLmNsb3VkbmV0YS5uZXQvVlBOL2dhc2lkYV92cG5faWRjMS55YW1s">https://s3.ap-northeast-2.amazonaws.com/cloudformation.cloudneta.net/VPN/gasida_vpn_idc1.yaml<i class="fa fa-external-link-alt"></i></span><ul><li>우측 하단 <code>다음</code> 클릭</li></ul></li></ul></li><li>2단계 스택 세부 정보 지정<ul><li>스택 이름 : VPN-IDC</li><li>KeyName : 자신의 <em>EC2-Key Pair</em> 를 지정<ul><li>우측 하단 <code>다음</code> 클릭</li></ul></li></ul></li><li>3단계 스택 옵션 구성<ul><li>우측 하단 <code>다음</code> 클릭</li></ul></li><li>4단계 검토<ul><li>우측 하단 <code>스택 생성</code> 클릭</li></ul></li></ul></div></details><details><summary><b>싱가폴 Region에서 CloudFormation 스택 생성 완료 후 (5분 정도 소요) 출력에서 VYOSInstancePublicIP 의 값(IP)를 확인한다.</summary></b><div markdown="1"><p><img src="/images/VPN-SitetoSite-with-Dynamic-Route/Untitled1.png" alt="AWS%20VPN%20Site%20to%20Site%20with%20Dynamic%20Route%20BGP%2005b6a5e86b864ae6b876cae1b8184477/Untitled%201.png"></p></div></details><details><summary><b>서울 Region에서 CloudFormation 스택을 생성한다.</summary></b><div markdown="1"><ul><li>1단계 템플릿 지정<ul><li>템플릿 준비 : 준비된 템플릿</li><li>템플릿 소스 : Amazon S3 URL</li><li>Amazon S3 URL : <span class="exturl" data-url="aHR0cHM6Ly9zMy5hcC1ub3J0aGVhc3QtMi5hbWF6b25hd3MuY29tL2Nsb3VkZm9ybWF0aW9uLmNsb3VkbmV0YS5uZXQvVlBOL2dhc2lkYV92cG5fYXdzLnlhbWw=">https://s3.ap-northeast-2.amazonaws.com/cloudformation.cloudneta.net/VPN/gasida_vpn_aws.yaml<i class="fa fa-external-link-alt"></i></span><ul><li>우측 하단 <code>다음</code> 클릭</li></ul></li></ul></li><li>2단계 스택 세부 정보 지정<ul><li>스택 이름 : VPN-AWS</li><li>KeyName : 자신의 <em>EC2-Key Pair</em> 를 지정</li><li>StaticRoutesOnlyForVPN : <strong>false</strong> ← AWS VPN 와 IDC VPN 간 <strong>Dynamic Route(BGP)</strong> 설정을 할 예정이므로</li><li>VPCAWSCustomerGatewayIP : 52.76.100.41 ← 위 싱가폴에서 스택 출력에서 VYOSInstancePublicIP 값<ul><li>우측 하단 <code>다음</code> 클릭</li></ul></li></ul></li><li>3단계 스택 옵션 구성<ul><li>우측 하단 <code>다음</code> 클릭</li></ul></li><li>4단계 검토<ul><li>우측 하단 <code>스택 생성</code> 클릭</li></ul></li></ul></div></details><ul><li>CloudFormation에 의해 생성되는 리소스는 아래와 같으며, 각 Region 별 정상적으로 생성되었는지 확인한다.</li></ul><details><summary>싱가폴 CloudFormation 생성 인프라</summary><div markdown="1"><pre><code>- VPC, 2 Subnet, IGW, 2 Route table- EIP, VYOS EC2 Instance (eth0, eth1)- Amazon Linux 2 EC2 Instance (Test용)</code></pre></div></details><details><summary>서울 CloudFormation 생성 인프라</summary><div markdown="1"><pre><code>- VPC, 2 Subnet, IGW, 2 Route table- VGW, CGW, VPN Connection- EIP, Amazon Linux 2 EC2 Instance (Test용)</code></pre></div></details><br><blockquote><p>💡 실무에서의 AWS VGW 와 연결 시 IDC 위치한 VPN(예. VYOS)설정은 보통 ‘IDC 네트워크(혹은 보안) 엔지니어’ 가 설정을 하게 되어서 개발자 분들의 경우 아래 Lab 따라하기가 어려운 부분이 있다. 그래서 VYOS 관련 설정과 IDC1에 관련 설정은 toggle ‘▶︎’ 접어 두었다. 필요 시 toggle 클릭하여 상세히 내용을 보시기 바란다. VYOS 내용을 제외한 AWS VPN 관련 설정 내용을 위주로 보시면 된다.</p></blockquote><br><p>2.4 검증</p><ul><li><p>사용자 PC에서 <code>싱가폴</code> VYOS Public IP 주소로 SSH 접근한다. 추가로 VYOS 인터페이스 설정을 한다.</p><ul><li><p>VYOS 설정 모드(conf) 로 진입해서 VYOS eth1 IP(스택 출력 VYOSInstanceINTERNALPrivateIP 확인)는 설정 후 적용한다.</p></li><li><p>Private Subnet 에 있는 Test EC2 IP 로 ping 및 SSH 접근한다. 접속 계정 root / qwe123</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 자신의 VYOSInstanceINTERNALPrivateIP 로 SSH 접속</span></span><br><span class="line">ssh -i <span class="string">'*EC2-Key Pair'</span>* vyos@52.76.100.41</span><br><span class="line">..</span><br><span class="line"></span><br><span class="line"><span class="comment"># 해당 AMI 이미지는 기본적으로 eth1 IP 가 미설정 되어 있다</span></span><br><span class="line">vyos@ip-10-100-1-198:~$ show interfaces</span><br><span class="line">Codes: S - State, L - Link, u - Up, D - Down, A - Admin Down</span><br><span class="line">Interface        IP Address                        S/L  Description</span><br><span class="line">---------        ----------                        ---  -----------</span><br><span class="line">eth0             10.100.1.198/24                    u/u</span><br><span class="line">eth1             -                                 u/u</span><br><span class="line">..</span><br><span class="line"></span><br><span class="line"><span class="comment"># VYOS 설정모드(conf)로 진입하여 eth1의 IP를 설정 후 적용과 저장을 한다</span></span><br><span class="line">vyos@ip-10-100-1-198$ conf</span><br><span class="line">vyos@ip-10-100-1-198<span class="comment"># set interfaces ethernet eth1 address 10.100.100.56/24</span></span><br><span class="line">vyos@ip-10-100-1-198<span class="comment"># commit</span></span><br><span class="line">vyos@ip-10-100-1-198<span class="comment"># exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># VYOS에서 내부에 있는 EC2 인스턴스로 ping 테스트를 한다</span></span><br><span class="line">vyos@ip-10-100-1-198:~$ ping 10.100.100.192</span><br><span class="line">PING 10.100.100.192 (10.100.100.192) 56(84) bytes of data.</span><br><span class="line">64 bytes from 10.100.100.192: icmp_seq=1 ttl=255 time=0.732 ms</span><br><span class="line">..</span><br><span class="line"></span><br><span class="line"><span class="comment"># VYOS에서 내부에 있는 EC2 인스턴스로 SSH 접속 확인을 한다.</span></span><br><span class="line">vyos@ip-10-100-1-198:~$ ssh root@10.100.100.192</span><br></pre></td></tr></table></figure></li></ul></li><li><p>사용자 PC에서 <code>서울</code> EC2 Instance EIP 주소로 SSH 접근한다. 접속 계정 root / qwe123</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@52.78.176.204</span><br></pre></td></tr></table></figure></li><li><p>참고로 CloudFormation에 의해 리소스가 정상적으로 올라오기 까지 약간의 시간이 필요하니 일정 시간 대기가 필요하다.</p></li></ul><blockquote><p>💡 본격적인 실습에 앞서, Site to Site VPN 리소스는 소량의 과금이 불가피 하다. (VPN 연결 시간 단위 요금 부과 - 시간 당 $0.05 등)<br>자세한 사항은 <span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS9rby9nbG9iYWwtYWNjZWxlcmF0b3IvcHJpY2luZy9odHRwczovL2F3cy5hbWF6b24uY29tL2tvL3Zwbi9wcmljaW5nLw==">요금 링크<i class="fa fa-external-link-alt"></i></span>를 참고 바란다.</p></blockquote><hr><br><h3 id="3-Configuration-Site-to-Site-VPN"><a href="#3-Configuration-Site-to-Site-VPN" class="headerlink" title="3. Configuration Site to Site VPN"></a>3. Configuration Site to Site VPN</h3><br><p>3.1 <code>서울</code> Region 의 VPN 정보 확인</p><ul><li><p>VPN Tunnel 1 과  Tunnel 2 의 외부IP와  내부IP CIDR을 확인 한다.</p><p>  <img src="/images/VPN-SitetoSite-with-Dynamic-Route/2020-05-07-01.png" alt="AWS%20VPN%20Site%20to%20Site%20with%20Dynamic%20Route%20BGP%2005b6a5e86b864ae6b876cae1b8184477/_2020-05-07__10.03.33.png"></p></li></ul><br><p>3.2 <code>서울</code> Region 의 고객 VPN 장비 설정을 위한 구성 다운로드 후 <code>싱가폴</code> Region 에 VYOS 에 VPN Config 설정</p><ul><li><p>💁🏻‍♂️ VPN 구성 다운로드?  AWS VGW 에 연결되는 고객VPN 장비(공급업체 별)의 VPN 관련 설정을 AWS 에서 제공</p></li><li><p>[AWS VPN 사이트 간 VPN 연결 - 구성 다운로드] 선택 후 Vyatta 선택 후 <code>다운로드</code></p><p>  <img src="/images/VPN-SitetoSite-with-Dynamic-Route/Untitled2.png" alt="AWS%20VPN%20Site%20to%20Site%20with%20Dynamic%20Route%20BGP%2005b6a5e86b864ae6b876cae1b8184477/Untitled%202.png"></p><ul><li><p>다운로드 파일 예시</p><p>  <a href="/images/VPN-SitetoSite-with-Dynamic-Route/vpn-0056e880bc3e56d15.txt">vpn-0056e880bc3e56d15.txt</a></p></li></ul></li><li><p>다운 받은 config 파일 내용을 일부 변경 후 VYOS 에 적용한다</p></li></ul><details><summary>일부 내용 변경 : 찾기 사용을 권장</summary><div markdown="1"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">41줄, 132줄) VYOS eth0(EIP)를 etho(private ip)로 변경</span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer 15.164.80.217 <span class="built_in">local</span>-address <span class="string">'10.100.1.198'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer 52.78.188.212 <span class="built_in">local</span>-address <span class="string">'10.100.1.198'</span></span><br><span class="line"></span><br><span class="line">98줄, 189줄) VYOS 의 BGP 명령어 입력이 버전 상향으로 일부 바뀌었음</span><br><span class="line"><span class="built_in">set</span> protocols bgp 65000 neighbor 169.254.13.29 soft-reconfiguration <span class="string">'inbound'</span> -(아래 내용으로 변경)-&gt;</span><br><span class="line"><span class="built_in">set</span> protocols bgp 65000 neighbor 169.254.13.29 address-family ipv4-unicast soft-reconfiguration inbound</span><br><span class="line"></span><br><span class="line">106줄, 197줄) 해당 내용 삭제, 해당 내용은 IDC에서 디폴트 route 정보를 광고하는 내용이다</span><br><span class="line"><span class="built_in">set</span> protocols bgp 65000 network 0.0.0.0/0 - 해당 줄 내용 삭제</span><br><span class="line"></span><br><span class="line">맨 마지막줄 내용 추가) IDC내부 대역인 10.100.0.0/16 대역을 BGP로 광고한다</span><br><span class="line"><span class="built_in">set</span> protocols bgp 65000 address-family ipv4-unicast network 10.100.0.0/16</span><br></pre></td></tr></table></figure></div></details><br><details><summary>변경 적용 한 VYOS VPN Config → VYOS conf 모드에 복사 붙여넣기를 한다</summary><div markdown="1"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">conf</span><br><span class="line"><span class="built_in">set</span> vpn ipsec ike-group AWS lifetime <span class="string">'28800'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec ike-group AWS proposal 1 dh-group <span class="string">'2'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec ike-group AWS proposal 1 encryption <span class="string">'aes128'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec ike-group AWS proposal 1 <span class="built_in">hash</span> <span class="string">'sha1'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer 15.164.80.217 authentication mode <span class="string">'pre-shared-secret'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer 15.164.80.217 authentication pre-shared-secret <span class="string">'NCN1B7Xzjv0NnGOLxFQJMnWBG8FlJnzT'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer 15.164.80.217 description <span class="string">'VPC tunnel 1'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer 15.164.80.217 ike-group <span class="string">'AWS'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer 15.164.80.217 <span class="built_in">local</span>-address <span class="string">'10.100.1.198'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer 15.164.80.217 vti <span class="built_in">bind</span> <span class="string">'vti0'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer 15.164.80.217 vti esp-group <span class="string">'AWS'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> vpn ipsec ipsec-interfaces interface <span class="string">'eth0'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec esp-group AWS compression <span class="string">'disable'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec esp-group AWS lifetime <span class="string">'3600'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec esp-group AWS mode <span class="string">'tunnel'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec esp-group AWS pfs <span class="string">'enable'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec esp-group AWS proposal 1 encryption <span class="string">'aes128'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec esp-group AWS proposal 1 <span class="built_in">hash</span> <span class="string">'sha1'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> vpn ipsec ike-group AWS dead-peer-detection action <span class="string">'restart'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec ike-group AWS dead-peer-detection interval <span class="string">'10'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec ike-group AWS dead-peer-detection timeout <span class="string">'30'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> interfaces vti vti0 address <span class="string">'169.254.70.182/30'</span></span><br><span class="line"><span class="built_in">set</span> interfaces vti vti0 description <span class="string">'VPC tunnel 1'</span></span><br><span class="line"><span class="built_in">set</span> interfaces vti vti0 mtu <span class="string">'1436'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> protocols bgp 65000 neighbor 169.254.70.181 remote-as <span class="string">'64512'</span></span><br><span class="line"><span class="built_in">set</span> protocols bgp 65000 neighbor 169.254.70.181 address-family ipv4-unicast soft-reconfiguration inbound</span><br><span class="line"><span class="built_in">set</span> protocols bgp 65000 neighbor 169.254.70.181 timers holdtime <span class="string">'30'</span></span><br><span class="line"><span class="built_in">set</span> protocols bgp 65000 neighbor 169.254.70.181 timers keepalive <span class="string">'10'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer 52.78.188.212 authentication mode <span class="string">'pre-shared-secret'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer 52.78.188.212 authentication pre-shared-secret <span class="string">'MfmyxlydtXvvC2FLGmBsqMQlW5q89Z0S'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer 52.78.188.212 description <span class="string">'VPC tunnel 2'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer 52.78.188.212 ike-group <span class="string">'AWS'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer 52.78.188.212 <span class="built_in">local</span>-address <span class="string">'10.100.1.198'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer 52.78.188.212 vti <span class="built_in">bind</span> <span class="string">'vti1'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer 52.78.188.212 vti esp-group <span class="string">'AWS'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> interfaces vti vti1 address <span class="string">'169.254.50.254/30'</span></span><br><span class="line"><span class="built_in">set</span> interfaces vti vti1 description <span class="string">'VPC tunnel 2'</span></span><br><span class="line"><span class="built_in">set</span> interfaces vti vti1 mtu <span class="string">'1436'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> protocols bgp 65000 neighbor 169.254.50.253 remote-as <span class="string">'64512'</span></span><br><span class="line"><span class="built_in">set</span> protocols bgp 65000 neighbor 169.254.50.253 address-family ipv4-unicast soft-reconfiguration inbound</span><br><span class="line"><span class="built_in">set</span> protocols bgp 65000 neighbor 169.254.50.253 timers holdtime <span class="string">'30'</span></span><br><span class="line"><span class="built_in">set</span> protocols bgp 65000 neighbor 169.254.50.253 timers keepalive <span class="string">'10'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> protocols bgp 65000 address-family ipv4-unicast network 10.100.0.0/16</span><br><span class="line"></span><br><span class="line">commit</span><br><span class="line">save</span><br></pre></td></tr></table></figure></div></details><br><ul><li><p>VPN 관련 Tunnel, Interface, IP 를 표현</p><p>  <img src="/images/VPN-SitetoSite-with-Dynamic-Route/Untitled3.png" alt="AWS%20VPN%20Site%20to%20Site%20with%20Dynamic%20Route%20BGP%2005b6a5e86b864ae6b876cae1b8184477/Untitled%203.png"></p></li></ul><hr><br><h3 id="4-Verify-Site-to-Site-VPN"><a href="#4-Verify-Site-to-Site-VPN" class="headerlink" title="4. Verify Site to Site VPN"></a>4. Verify Site to Site VPN</h3><br><p>4.1 <code>서울</code> Region 의 VPN 정보 확인</p><ul><li><p>VPN Tunnel 2개의 상태가 정상 작동을 확인 , 세부정보에서 VYOS 에서  BGP로 1개의 네트워크 대역을 광고해서 알아왔음을 확인</p><p>  <img src="/images/VPN-SitetoSite-with-Dynamic-Route/2020-05-07-02.png" alt="AWS%20VPN%20Site%20to%20Site%20with%20Dynamic%20Route%20BGP%2005b6a5e86b864ae6b876cae1b8184477/_2020-05-07__10.45.34.png"></p></li></ul><br><p>4.2 <code>싱가폴</code> Region 의 VYOS 에서 VPN 정보 확인</p><ul><li><p>Tunnel 인터페이스(= vti0, vti1) 정보 확인 및 VPN 상태 확인 및 라우팅 테이블 확인, VPN Tunnel IP 로 ping 테스트</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># VYOS 의 가상의 터널 인터페이스 정보를 확 </span></span><br><span class="line">$ show interfaces vti</span><br><span class="line">Codes: S - State, L - Link, u - Up, D - Down, A - Admin Down</span><br><span class="line">Interface        IP Address                        S/L  Description</span><br><span class="line">---------        ----------                        ---  -----------</span><br><span class="line">vti0             169.254.70.182/30                 u/u  VPC tunnel 1</span><br><span class="line">vti1             169.254.50.254/30                 u/u  VPC tunnel 2</span><br><span class="line"></span><br><span class="line"><span class="comment"># AWS 내부IP(터널IP)와 ping 통신 확인</span></span><br><span class="line">$ ping 169.254.70.181</span><br><span class="line">64 bytes from 169.254.70.181: icmp_seq=1 ttl=254 time=103 ms</span><br><span class="line">$ ping 169.254.50.253</span><br><span class="line">64 bytes from 169.254.50.253: icmp_seq=1 ttl=254 time=103 ms</span><br><span class="line"></span><br><span class="line"><span class="comment"># VYOS 의 VPN IPsec 상태 정보 확인 및 해당 터널을 통한 트래픽 통계 확인</span></span><br><span class="line">$ show vpn ipsec sa</span><br><span class="line">Connection                     State    Uptime    Bytes In/Out    Packets In/Out    Remote address    Remote ID    Proposal</span><br><span class="line">-----------------------------  -------  --------  --------------  ----------------  ----------------  -----------  ----------------------------------</span><br><span class="line">peer-52.78.188.212-tunnel-vti  up       8m23s     4K/6K           62/112            52.78.188.212     N/A          AES_CBC_128/HMAC_SHA1_96/MODP_1024</span><br><span class="line">peer-15.164.80.217-tunnel-vti  up       8m23s     5K/6K           84/110            15.164.80.217     N/A          AES_CBC_128/HMAC_SHA1_96/MODP_1024</span><br><span class="line"></span><br><span class="line"><span class="comment"># VYOS 장비의 라우팅 테이블을 확인, AWS VGW에 연결된 VPC대역에 대한 라우팅 정보 확인</span></span><br><span class="line">$ show ip route</span><br><span class="line">..</span><br><span class="line">S&gt;* 0.0.0.0/0 [210/0] via 10.100.1.1, eth0, 00:52:07</span><br><span class="line">B&gt;* 10.50.0.0/16 [20/100] via 169.254.50.253, vti1, 00:08:31</span><br><span class="line">C&gt;* 10.100.1.0/24 is directly connected, eth0, 00:52:08</span><br><span class="line">C&gt;* 10.100.100.0/24 is directly connected, eth1, 00:47:21</span><br><span class="line">C&gt;* 169.254.50.252/30 is directly connected, vti1, 00:08:33</span><br><span class="line">C&gt;* 169.254.70.180/30 is directly connected, vti0, 00:08:33</span><br><span class="line"></span><br><span class="line"><span class="comment"># VYOS와 VGW 간 BGP 정보 확인, AWS Tunnel1과2에서 각각 Metric(=MED) 100과 200으로 인입</span></span><br><span class="line">$ show ip bgp</span><br><span class="line">..</span><br><span class="line">   Network          Next Hop            Metric LocPrf Weight Path</span><br><span class="line">*&gt; 10.50.0.0/16     169.254.50.253         100             0 64512 i</span><br><span class="line">*                   169.254.70.181         200             0 64512 i</span><br><span class="line">*&gt; 10.100.0.0/16  0.0.0.0                  0         32768 i</span><br><span class="line"></span><br><span class="line">sh ip bgp summary</span><br><span class="line">sh ip bgp neighbors 169.254.X.Y advertised-routes</span><br><span class="line">sh ip bgp neighbors 169.254.X.Y received-routes</span><br><span class="line">sh ip bgp neighbors 169.254.X.Y routes</span><br></pre></td></tr></table></figure></li></ul><br><p>4.3 <code>싱가폴</code> 내부 대역의 Route Table 설정</p><ul><li><p>[VPC - Route Tables] VPCIDC1 VYOS Internal Subnet Route Table 선택 후 [라우팅 편집]으로 추가</p><ul><li><p>10.50.0.0/16 , Network Interface → VYOS Eth1 후 <code>라우팅 저장</code></p><p>  <img src="/images/VPN-SitetoSite-with-Dynamic-Route/2020-05-07-03.png" alt="AWS%20VPN%20Site%20to%20Site%20with%20Dynamic%20Route%20BGP%2005b6a5e86b864ae6b876cae1b8184477/_2020-05-07__10.57.18.png"></p></li></ul></li></ul><br><p>4.4 <code>서울</code> Subnet에 Route Table 설정</p><ul><li><p>[VPC - Route Tables] VPCAWS Subnet Route Table 선택 후 [라우팅 전파 편집]으로 추가</p><ul><li><p>전파 선택 후 <code>저장</code></p><p>  <img src="/images/VPN-SitetoSite-with-Dynamic-Route/2020-05-06-01.png" alt="AWS%20VPN%20Site%20to%20Site%20with%20Dynamic%20Route%20BGP%2005b6a5e86b864ae6b876cae1b8184477/_2020-05-06__3.44.45.png"></p></li><li><p>라우팅 테이블을 확인하면 자동으로 추가되어 있다</p><p>  <img src="/images/VPN-SitetoSite-with-Dynamic-Route/2020-05-07-04.png" alt="AWS%20VPN%20Site%20to%20Site%20with%20Dynamic%20Route%20BGP%2005b6a5e86b864ae6b876cae1b8184477/_2020-05-07__11.05.44.png"></p></li></ul></li></ul><br><p>4.5 전체 라우팅 상태 확인</p><ul><li><p><code>서울</code> Region 경우 싱가폴 VPC대역인 10.100.0.0/16 을VGW 로 보냄</p><p>  → 이후 VGW 는 VPN Tunnel 을 통해 VYOS eth0 으로 보냄</p></li><li><p><code>싱가폴</code> Region 경우 내부대역(10.100.100.0/24)에서 서울 VPC대역인 10.50.0.0/16 을 VYOS eth1 으로 보냄</p><p>  → 이후 VYOS는 10.50.0.0/16 을 vti0, vti1 즉 VPN Tunnel 을 통해 VGW 로 보냄</p><p>  <img src="/images/VPN-SitetoSite-with-Dynamic-Route/Untitled4.png" alt="AWS%20VPN%20Site%20to%20Site%20with%20Dynamic%20Route%20BGP%2005b6a5e86b864ae6b876cae1b8184477/Untitled%204.png"></p></li></ul><br><p>4.6 통신 확인</p><ul><li><p>서울 EC2 에서 싱가폴 EC2 로 ping 통신, ssh 접속을 확인</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@ip-10-50-1-175 ~]$ ping -c 1 10.100.100.192</span><br><span class="line">PING 10.100.100.192 (10.100.100.192) 56(84) bytes of data.</span><br><span class="line">64 bytes from 10.100.100.192: icmp_seq=1 ttl=254 time=103 ms</span><br><span class="line"></span><br><span class="line">$ ssh root@10.100.100.192</span><br><span class="line">root@10.100.100.192<span class="string">'s password:</span></span><br><span class="line"><span class="string">..</span></span><br><span class="line"><span class="string">[root@ip-10-100-100-192 ~]#</span></span><br></pre></td></tr></table></figure></li><li><p>위 ping 통신 시도 시, VYOS 에서 icmp 패킷 확인</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vyos@ip-10-100-1-198:~$ sudo tcpdump -i any -nn icmp</span><br><span class="line">..</span><br><span class="line">02:08:35.528632 IP 10.100.100.192 &gt; 10.50.1.175: ICMP <span class="built_in">echo</span> reply, id 32455, seq 14, length 64</span><br><span class="line">02:08:36.529260 IP 10.50.1.175 &gt; 10.100.100.192: ICMP <span class="built_in">echo</span> request, id 32455, seq 15, length 64</span><br><span class="line">..</span><br></pre></td></tr></table></figure></li></ul><br><p>4.7 CloudWatch 모니터링 설정</p><ul><li><p><code>서울</code> Region [CloudWatch - 대시보드 생성] : 이름(VPN)</p><ul><li><p>위젯 추가</p><ul><li><p>유형 : 행</p><ul><li>지표 : VPN 터널 지표 → (VPN Tunnel 1 IP 입력 후 검색 후) TunnelState  선택<ul><li>그래프로 표시된 지표 : 레이블(VPN Tunnel 1 State), 통계(최소), 기간(1분)<ul><li>그래프옵션 : 위젯 유형(누적 면적)<ul><li>상단(사용자지정 - 30분, 현지시간대)</li><li>우측 하단 <code>위젯 생성</code></li></ul></li></ul></li></ul></li></ul></li><li><p>유형 : 행</p><ul><li>지표 : VPN 터널 지표 → (VPN Tunnel 2 IP 입력 후 검색 후) TunnelState  선택<ul><li>그래프로 표시된 지표 : 색상(변경), 레이블(VPN Tunnel 2 State), 통계(최소), 기간(1분)<ul><li>그래프옵션 : 위젯 유형(누적 면적)<ul><li>상단(사용자지정 - 30분, 현지시간대)</li><li>우측 하단 <code>위젯 생성</code></li></ul></li></ul></li></ul></li></ul></li><li><p>유형 : 행</p><ul><li>지표 : VPN 터널 지표 → (VPN Tunnel 1 IP 입력 후 검색 후) TunnelDataIn, TunnelDataOut 선택<ul><li>그래프로 표시된 지표 : 상단(VPN Tunnel 1 Data In/Out), 통계(합계), 기간(1분)<ul><li>그래프옵션 : 위젯 유형(누적 면적)<ul><li>상단(사용자지정 - 30분, 현지시간대)</li><li>우측 하단 <code>위젯 생성</code></li></ul></li></ul></li></ul></li></ul></li><li><p>유형 : 행</p><ul><li>지표 : VPN 터널 지표 → (VPN Tunnel 2 IP 입력 후 검색 후) TunnelDataIn, TunnelDataOut 선택<ul><li>그래프로 표시된 지표 : 상단(VPN Tunnel 2 Data In/Out), 통계(합계), 기간(1분)<ul><li>그래프옵션 : 위젯 유형(누적 면적)<ul><li>상단(사용자지정 - 30분, 현지시간대)</li><li>우측 하단 <code>위젯 생성</code></li></ul></li></ul></li></ul></li></ul></li><li><p>상단 - <code>대시보드 저장</code></p><p>  <img src="/images/VPN-SitetoSite-with-Dynamic-Route/Untitled5.png" alt="AWS%20VPN%20Site%20to%20Site%20with%20Dynamic%20Route%20BGP%2005b6a5e86b864ae6b876cae1b8184477/Untitled%205.png"></p></li></ul></li></ul></li></ul><hr><br><h3 id="5-VPN-Failover-Test"><a href="#5-VPN-Failover-Test" class="headerlink" title="5. VPN Failover Test"></a>5. VPN Failover Test</h3><br><p>5.1 <code>싱가폴</code> Region 의 VYOS 재부팅 후 확인</p><ul><li><p><code>서울</code> Region 의 내부 EC2 에서 ping 실행</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ping -i 1 -W 1 10.100.100.192</span><br></pre></td></tr></table></figure></li><li><p>VYOS 인스턴스 재부팅</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vyos@ip-10-100-1-198:~$ reboot now</span><br></pre></td></tr></table></figure></li><li><p><code>서울</code> Region 의 내부 EC2 에서 ping 결과 확인</p><ul><li><p>82 - 23 = 59개로 대략 59초(=대략 1분) 정도의 절체시간이 있었다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ ping -i 1 -W 1 10.100.100.192</span><br><span class="line">PING 10.100.100.192 (10.100.100.192) 56(84) bytes of data.</span><br><span class="line">64 bytes from 10.100.100.192: icmp_seq=1 ttl=254 time=104 ms</span><br><span class="line">..</span><br><span class="line">^C</span><br><span class="line">--- 10.100.100.192 ping statistics ---</span><br><span class="line">82 packets transmitted, 23 received, 71% packet loss, time 82429ms</span><br><span class="line">rtt min/avg/max/mdev = 103.895/104.418/105.911/0.503 ms</span><br></pre></td></tr></table></figure></li></ul></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2tvX2tyL3Zwbi9sYXRlc3QvczJzdnBuL21vbml0b3JpbmctY2xvdWR3YXRjaC12cG4uaHRtbA==">CloudWatch 모니터링<i class="fa fa-external-link-alt"></i></span>을 확인 : 2개 Tunnel State 가 0 으로 다운되고 정상이 되었다, 트래픽은 여전히 Tunnel 2 를 사용 중이다</p><p>  <img src="/images/VPN-SitetoSite-with-Dynamic-Route/2020-05-07-05.png" alt="AWS%20VPN%20Site%20to%20Site%20with%20Dynamic%20Route%20BGP%2005b6a5e86b864ae6b876cae1b8184477/_2020-05-07__11.36.58.png"></p></li></ul><br><p>5.2 현재 Active VPN Tunnel 을 Down 후 확인</p><ul><li><p>현재 통신에 사용되는 VPN Tunnel 을 강제로 Down 하여 다른 VPN Tunnel 사용 시를 테스트 해본다</p><p>  <img src="/images/VPN-SitetoSite-with-Dynamic-Route/Untitled6.png" alt="AWS%20VPN%20Site%20to%20Site%20with%20Dynamic%20Route%20BGP%2005b6a5e86b864ae6b876cae1b8184477/Untitled%206.png"></p></li><li><p><code>서울</code> Region 의 내부 EC2 에서 ping 실행</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ping -i 1 -W 1 10.100.100.192</span><br></pre></td></tr></table></figure></li><li><p>VYOS 에서 터널 정보를 확인 후 해당 터널로 맺혀있는 BGP 네이버를 강제로 Shutdown 한다</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ show ip route</span><br><span class="line">B&gt;* 10.50.0.0/16 [20/100] via 169.254.50.253, vti1, 00:00:12</span><br><span class="line"></span><br><span class="line">$ show vpn ipsec sa</span><br><span class="line">Connection                     State    Uptime    Bytes In/Out    Packets In/Out    Remote address    Remote ID    Proposal</span><br><span class="line">-----------------------------  -------  --------  --------------  ----------------  ----------------  -----------  ----------------------------------</span><br><span class="line">peer-52.78.188.212-tunnel-vti  up       15m29s    75K/84K         943/1K            52.78.188.212     N/A          AES_CBC_128/HMAC_SHA1_96/MODP_1024</span><br><span class="line">peer-15.164.80.217-tunnel-vti  up       15m29s    13K/11K         190/194           15.164.80.217     N/A          AES_CBC_128/HMAC_SHA1_96/MODP_1024</span><br><span class="line"></span><br><span class="line">conf</span><br><span class="line"><span class="built_in">set</span> protocols bgp 65000 neighbor 169.254.50.253 shutdown</span><br><span class="line">commit</span><br><span class="line">save</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line">$ show ip route</span><br><span class="line">..</span><br><span class="line">B&gt;* 10.50.0.0/16 [20/100] via 169.254.70.181, vti0, 00:04:37</span><br></pre></td></tr></table></figure></li><li><p><code>서울</code> Region 의 내부 EC2 에서 ping 결과 확인</p><ul><li><p>22 - 21 = 1개로 대략 1초 이내에 절체시간이 있었다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ ping -i 1 -W 1 10.100.100.192</span><br><span class="line">PING 10.100.100.192 (10.100.100.192) 56(84) bytes of data.</span><br><span class="line">64 bytes from 10.100.100.192: icmp_seq=1 ttl=254 time=104 ms</span><br><span class="line">..</span><br><span class="line">^C</span><br><span class="line">--- 10.100.100.192 ping statistics ---</span><br><span class="line">22 packets transmitted, 21 received, 4% packet loss, time 21029ms</span><br><span class="line">rtt min/avg/max/mdev = 104.003/104.743/105.439/0.621 ms</span><br></pre></td></tr></table></figure></li></ul></li><li><p>CloudWatch 모니터링을 확인 : Tunnel 2 가 Down 되자마자 바로 Tunnel 1 로 데이터 트래픽 통신을 사용했다.</p><p>  <img src="/images/VPN-SitetoSite-with-Dynamic-Route/2020-05-07-06.png" alt="AWS%20VPN%20Site%20to%20Site%20with%20Dynamic%20Route%20BGP%2005b6a5e86b864ae6b876cae1b8184477/_2020-05-07__11.55.13.png"></p></li></ul><hr><br><h3 id="6-Delete-Infrastructure"><a href="#6-Delete-Infrastructure" class="headerlink" title="6. Delete Infrastructure"></a>6. Delete Infrastructure</h3><ul><li><code>싱가폴</code> Region 의 CloudFormation Stack 삭제</li><li><code>서울</code> Region 의 CloudFormation Stack 삭제</li><li><code>서울</code> Region 의 CloudWatch 대시보드 삭제</li></ul><br>]]></content:encoded>
      
      <comments>http://cloudneta.github.io/2020/05/07/VPN-SitetoSite-with-Dynamic-Route/#disqus_thread</comments>
    </item>
    
    <item>
      <title>AWS VPN Site to Site with Static Route</title>
      <link>http://cloudneta.github.io/2020/05/07/VPN-SitetoSite-with-Static-Route/</link>
      <guid>http://cloudneta.github.io/2020/05/07/VPN-SitetoSite-with-Static-Route/</guid>
      <pubDate>Thu, 07 May 2020 09:29:01 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;em&gt;작성자 : gasida.cloudnet@&lt;/em&gt;&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><em>작성자 : gasida.cloudnet@</em></p><a id="more"></a><br><details><summary>AWS Document Link</summary><div markdown="1"><ul><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2tvX2tyL3Zwbi9sYXRlc3QvczJzdnBuL1ZQQ19WUE4uaHRtbA==">Site-to-Site VPN User Guide<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2tvX2tyL3ZwYy9sYXRlc3QvYWRtaW5ndWlkZS9XZWxjb21lLmh0bWw=">Site-to-Site VPN Network Administrator Guide<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93aWtpLnZ5b3MubmV0L3dpa2kvVXNlcl9HdWlkZQ==">VYOS User Guide<i class="fa fa-external-link-alt"></i></span></li></ul></div></details><hr><br><h3 id="1-AWS-VPN-Site-to-Site-with-Static-Route"><a href="#1-AWS-VPN-Site-to-Site-with-Static-Route" class="headerlink" title="1. AWS VPN Site to Site with Static Route"></a>1. AWS VPN Site to Site with Static Route</h3><br><p>1.1 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2tvX2tyL3Zwbi9sYXRlc3QvczJzdnBuL1ZQQ19WUE4uaHRtbA==">AWS Site-to-Site VPN<i class="fa fa-external-link-alt"></i></span></p><ul><li>AWS Site-to-Site VPN(S2S VPN) 은 Amazon VPC 망과 외부망(ex. 기업망 등) 안전한 연결을 해주는 것을 말함</li><li>주요 용어<ul><li>VPN 연결 : 온프레미스 장비(ex. 기업망 VPN장비)와 Amazon VPC 간의 보안 연결</li><li>VPN 터널 : AWS VPC 네트워크와 온프레미스 네트워크 간 주고 받을 수 있는 암호화된 링크<ul><li>고가용성을 위해서 2개의 터널을 제공함</li></ul></li><li>고객 게이트웨이 : 온프레미스 장비(ex. 기업망 VPN장비)에 대한 정보를 말함<ul><li>AWS VGW 에 설정을 위해서 지정함 (ex. 온프레미스 VPN 장비의 IP 등)</li></ul></li><li>고객 게이트웨이 디바이스 : 온프레미스 장비(ex. 기업망 VPN장비) 혹은 소프트웨어 애플리케이션</li></ul></li><li>제약사항 : IPv6 트래픽 미지원, AWS VPN 연결 시 Path MTU discovery 미지원 (→ MTU 설정을 맞출 것을 권장)</li></ul><br><p>1.2 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2tvX2tyL3Zwbi9sYXRlc3QvczJzdnBuL1ZQQ19WUE4uaHRtbA==">AWS S2S 작동 방식<i class="fa fa-external-link-alt"></i></span></p><ul><li>AWS VGW 와 TGW 에서 동작합니다</li></ul><p><em>AWS VGW(=가상 프라이빗 게이트웨이)</em></p><p><img src="/images/VPN-SitetoSite-with-Static-Route/Untitled.png" alt="AWS%20VPN%20Site%20to%20Site%20with%20Static%20Route%2078d272b9998c46a4875aa9c090b80ccf/Untitled.png"></p><p><em>AWS Transit GW(=전송 게이트웨이)</em></p><p><img src="/images/VPN-SitetoSite-with-Static-Route/Untitled1.png" alt="AWS%20VPN%20Site%20to%20Site%20with%20Static%20Route%2078d272b9998c46a4875aa9c090b80ccf/Untitled%201.png"></p><ul><li><p>S2S VPN Tunnel 은 2개가 있으며, 퍼블릭 IP주소가 각 터널에 사용된다.</p><ul><li><p>VGW는 터널에 대해 두개의 Tunnel Endpoint를 제공</p></li><li><p>IPsec tunnels 과 BGP sessions 는 항상 고객측(CGW)에서 시작한다</p></li><li><p>고가용성을 위해서 두 터널 반드시 모두 구성해야 한다.</p></li><li><p>특히 AWS VGW 정기 유지 관리 시 순차적으로 터널이 비활성화 된다</p><p>  → 🚧 필자가 AWS VPN 운영 시 에도 매달 26~28일 사이에 Tunnel1, Tunnel 2 가 시간차를 두고 Down 되었었다</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS8vdnBuL3NpdGUtdG8tc2l0ZS12cG4tc2xhLw==">AWS S2S VPN SLA<i class="fa fa-external-link-alt"></i></span> 는 99.95% 입니다. → 한 달 5분 2초는 계약 상 유지 관리 등을 위해서 비활성화가 되어도…</p><p>  <img src="/images/VPN-SitetoSite-with-Static-Route/2020-05-07-01.png" alt="AWS%20VPN%20Site%20to%20Site%20with%20Static%20Route%2078d272b9998c46a4875aa9c090b80ccf/_2020-05-07__2.01.22.png"><br><span class="exturl" data-url="aHR0cHM6Ly91cHRpbWUuaXMv">https://uptime.is/<i class="fa fa-external-link-alt"></i></span> 참고</p></li></ul></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2tvX2tyL3Zwbi9sYXRlc3QvczJzdnBuL3lvdXItY2d3Lmh0bWw=">CGW (=고객 게이트웨이)<i class="fa fa-external-link-alt"></i></span> 는 고객 측에 있는 물리적 또는 소프트웨어 어플라이언스이다.</p><ul><li><p>CGW가 1대의 장비라면 논리적인 터널 인터페이스 2개를 설정하여 AWS VPN Tunnel 1,2 와 연결 설정한다</p><p>  <img src="/images/VPN-SitetoSite-with-Static-Route/Untitled2.png" alt="AWS%20VPN%20Site%20to%20Site%20with%20Static%20Route%2078d272b9998c46a4875aa9c090b80ccf/Untitled%202.png"></p></li></ul></li><li><p>서로 통신을 위한 라우팅은 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2tvX2tyL3Zwbi9sYXRlc3QvczJzdnBuL2Nndy1zdGF0aWMtcm91dGluZy1leGFtcGxlcy5odG1s">Static<i class="fa fa-external-link-alt"></i></span> 과 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2tvX2tyL3Zwbi9sYXRlc3QvczJzdnBuL2Nndy1keW5hbWljLXJvdXRpbmctZXhhbXBsZXMuaHRtbA==">Dynamic(BGP)<i class="fa fa-external-link-alt"></i></span> 를 지원한다.</p></li></ul><br><p>1.3 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2tvX2tyL3Zwbi9sYXRlc3QvczJzdnBuL3NpdGUtc2l0ZS1hcmNoaXRlY2h0dXJlcy5odG1s">S2S VPN 아키텍처<i class="fa fa-external-link-alt"></i></span></p><ul><li><p>AWS VGW —-(S2S VPN) —- IDC(CGW)</p><p>  <img src="/images/VPN-SitetoSite-with-Static-Route/Untitled3.png" alt="AWS%20VPN%20Site%20to%20Site%20with%20Static%20Route%2078d272b9998c46a4875aa9c090b80ccf/Untitled%203.png"></p></li><li><p>AWS TGW —-(S2S VPN) —- IDC(CGW) : VGW 가 아닌 Transit Gateway(TGW)가 VPN 연결되는 종단점 역할</p><p>  <img src="/images/VPN-SitetoSite-with-Static-Route/Untitled4.png" alt="AWS%20VPN%20Site%20to%20Site%20with%20Static%20Route%2078d272b9998c46a4875aa9c090b80ccf/Untitled%204.png"></p></li><li><p>다중 S2S VPN 연결 : 여러개의 고객 VPN 망이 연결 되는 구성 환경</p><p>  <img src="/images/VPN-SitetoSite-with-Static-Route/Untitled5.png" alt="AWS%20VPN%20Site%20to%20Site%20with%20Static%20Route%2078d272b9998c46a4875aa9c090b80ccf/Untitled%205.png"></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2tvX2tyL3Zwbi9sYXRlc3QvczJzdnBuL3Zwbi1yZWR1bmRhbnQtY29ubmVjdGlvbi5odG1s">S2S VPN 이중화를 통한 고가용성 구성<i class="fa fa-external-link-alt"></i></span></p><ul><li><p>1안 : CGW 가 이중화 구성이나 클러스터 동작이 아닌 A-S 동작인 경우 두개의 CGW 를 두 개의 VGW에 연결</p><ul><li><p>AWS S2S VGW 를 2개를 생성하고 고객측 장비도 2대를 구성하며 BGP 로 각각 내부망을 광고하는 형태</p><p><img src="/images/VPN-SitetoSite-with-Static-Route/Untitled6.png" alt="AWS%20VPN%20Site%20to%20Site%20with%20Static%20Route%2078d272b9998c46a4875aa9c090b80ccf/Untitled%206.png"></p></li></ul></li></ul></li><li><p>2안 : CGW 가 2대로 이중화 구성에서 클러스터로 동작 시(논리적으로 1대)에는 1개의 VGW 에 각 터널 엔드포인트로 모두 연결</p><ul><li><p>AWS S2S VGW 를 1개만 생성하여 고객측 장비의 논리1대의 방화벽(실제 물리 방화벽 2대)으로 연결</p><p><img src="/images/VPN-SitetoSite-with-Static-Route/Untitled7.png" alt="AWS%20VPN%20Site%20to%20Site%20with%20Static%20Route%2078d272b9998c46a4875aa9c090b80ccf/Untitled%207.png"></p></li></ul></li></ul><br><p>1.4 VPN Performance</p><ul><li><p>VGW 1개 Tunnel 은 1.25Gbps Throughput 성능을 가짐</p><p>  → <span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS9rby9ibG9ncy9uZXR3b3JraW5nLWFuZC1jb250ZW50LWRlbGl2ZXJ5L3NjYWxpbmctdnBuLXRocm91Z2hwdXQtdXNpbmctYXdzLXRyYW5zaXQtZ2F0ZXdheS8=">TGW 의 ECMP 를 사용 시 하여 Throughput 성능 향상<i class="fa fa-external-link-alt"></i></span>을 할 수 있음</p></li></ul><hr><br><h3 id="2-AWS-VPN-Site-to-Site-with-Static-Route-Lab-Preview"><a href="#2-AWS-VPN-Site-to-Site-with-Static-Route-Lab-Preview" class="headerlink" title="2. AWS VPN Site to Site with Static Route Lab Preview"></a>2. AWS VPN Site to Site with Static Route Lab Preview</h3><br><p>2.1 Lab Topology</p><ul><li><p><code>서울, 싱가폴</code> Region에 각각 AWS 환경과, IDC 환경(가정)으로 구성</p><ul><li>IDC 환경은 실제 AWS 영역이 아니라 일반 기업 물리망이지만 실습의 편리성을 위해서 AWS 환경에서 구성함</li></ul></li><li><p><code>서울</code> Region 은 AWS VGW를 배치하고 Public Subnet 에 테스트 용도의 EC2를 배치함</p></li><li><p><code>싱가폴</code> Region (IDC환경)은 VPN 역할을 VYOS(커뮤니티AMI)로 하며 Private Subnet에 테스트 용도의 EC2를 배치함</p><p>  <img src="/images/VPN-SitetoSite-with-Static-Route/Untitled8.png" alt="AWS%20VPN%20Site%20to%20Site%20with%20Static%20Route%2078d272b9998c46a4875aa9c090b80ccf/Untitled%208.png"></p></li></ul><blockquote><p>💡 VYOS는 리눅스(Debian) 기반에 라우팅, 방화벽, VPN 기능을 제공하여 VPN 역할로 선택함. <span class="exturl" data-url="aHR0cHM6Ly93aWtpLnZ5b3MubmV0L3dpa2kvVXNlcl9HdWlkZQ==">참고 링크<i class="fa fa-external-link-alt"></i></span></p></blockquote><br><p>2.2 기본 설정</p><ul><li>본 실습에서 활용할 AWS Region은 <code>서울, 싱가폴</code> 입니다. 해당 Region에 대한 <em>EC2-Key Pair</em>를 생성</li><li><code>시드니, 상파울루</code> Region 에 리소스는 <em>CloudFormation</em>에 의해 2.1 그림의 인프라를 자동 구축 (2.3항에서 진행)</li></ul><br><p>2.3 CloudFormation (Infrastructure as Code)</p><details><summary><b>싱가폴 Region에서 CloudFormation 스택을 생성한다.</summary></b><div markdown="1"><ul><li>1단계 템플릿 지정<ul><li>템플릿 준비 : 준비된 템플릿</li><li>템플릿 소스 : Amazon S3 URL</li><li>Amazon S3 URL : <span class="exturl" data-url="aHR0cHM6Ly9zMy5hcC1ub3J0aGVhc3QtMi5hbWF6b25hd3MuY29tL2Nsb3VkZm9ybWF0aW9uLmNsb3VkbmV0YS5uZXQvVlBOL2dhc2lkYV92cG5faWRjMS55YW1s">https://s3.ap-northeast-2.amazonaws.com/cloudformation.cloudneta.net/VPN/gasida_vpn_idc1.yaml<i class="fa fa-external-link-alt"></i></span><ul><li>우측 하단 <code>다음</code> 클릭</li></ul></li></ul></li><li>2단계 스택 세부 정보 지정<ul><li>스택 이름 : VPN-IDC</li><li>KeyName : 자신의 <em>EC2-Key Pair</em> 를 지정<ul><li>우측 하단 <code>다음</code> 클릭</li></ul></li></ul></li><li>3단계 스택 옵션 구성<ul><li>우측 하단 <code>다음</code> 클릭</li></ul></li><li>4단계 검토<ul><li>우측 하단 <code>스택 생성</code> 클릭</li></ul></li></ul></div></details><details><summary><b>싱가폴 Region에서 CloudFormation 스택 생성 완료 후 (5분 정도 소요) 출력에서 VYOSInstancePublicIP 의 값(IP)를 확인한다.</summary></b><div markdown="1"><p><img src="/images/VPN-SitetoSite-with-Static-Route/2020-05-06-01.png" alt="AWS%20VPN%20Site%20to%20Site%20with%20Static%20Route%2078d272b9998c46a4875aa9c090b80ccf/_2020-05-06__1.32.13.png"></p></div></details><details><summary><b>서울 Region에서 CloudFormation 스택을 생성한다.</summary></b><div markdown="1"><ul><li>1단계 템플릿 지정<ul><li>템플릿 준비 : 준비된 템플릿</li><li>템플릿 소스 : Amazon S3 URL</li><li>Amazon S3 URL : <span class="exturl" data-url="aHR0cHM6Ly9zMy5hcC1ub3J0aGVhc3QtMi5hbWF6b25hd3MuY29tL2Nsb3VkZm9ybWF0aW9uLmNsb3VkbmV0YS5uZXQvVlBOL2dhc2lkYV92cG5fYXdzLnlhbWw=">https://s3.ap-northeast-2.amazonaws.com/cloudformation.cloudneta.net/VPN/gasida_vpn_aws.yaml<i class="fa fa-external-link-alt"></i></span><ul><li>우측 하단 <code>다음</code> 클릭</li></ul></li></ul></li><li>2단계 스택 세부 정보 지정<ul><li>스택 이름 : VPN-AWS</li><li>KeyName : 자신의 <em>EC2-Key Pair</em> 를 지정</li><li>StaticRoutesOnlyForVPN : true ← AWS VPN 와 IDC VPN 간 Static Route 설정을 할 예정이므로</li><li>VPCAWSCustomerGatewayIP : 54.255.135.113 ← 위 싱가폴에서 스택 출력에서 VYOSInstancePublicIP 값<ul><li>우측 하단 <code>다음</code> 클릭</li></ul></li></ul></li><li>3단계 스택 옵션 구성<ul><li>우측 하단 <code>다음</code> 클릭</li></ul></li><li>4단계 검토<ul><li>우측 하단 <code>스택 생성</code> 클릭</li></ul></li></ul></div></details><ul><li>CloudFormation에 의해 생성되는 리소스는 아래와 같으며, 각 Region 별 정상적으로 생성되었는지 확인한다.</li></ul><details><summary>싱가폴 CloudFormation 생성 인프라</summary><div markdown="1"><pre><code>- VPC, 2 Subnet, IGW, 2 Route table- EIP, VYOS EC2 Instance (eth0, eth1)- Amazon Linux 2 EC2 Instance (Test용)</code></pre></div></details><details><summary>서울 CloudFormation 생성 인프라</summary><div markdown="1"><pre><code>- VPC, 2 Subnet, IGW, 2 Route table- VGW, CGW, VPN Connection- EIP, Amazon Linux 2 EC2 Instance (Test용)</code></pre></div></details><br><blockquote><p>💡 실무에서의 AWS VGW 와 연결 시 IDC 위치한 VPN(예. VYOS)설정은 보통 ‘IDC 네트워크(혹은 보안) 엔지니어’ 가 설정을 하게 되어서 개발자 분들의 경우 아래 Lab 따라하기가 어려운 부분이 있다. 그래서 VYOS 관련 설정과 IDC1에 관련 설정은 toggle ‘▶︎’ 접어 두었다. 필요 시 toggle 클릭하여 상세히 내용을 보시기 바란다. VYOS 내용을 제외한 AWS VPN 관련 설정 내용을 위주로 보시면 된다.</p></blockquote><br><p>2.4 검증</p><ul><li><p>사용자 PC에서 <code>싱가폴</code> VYOS Public IP 주소로 SSH 접근한다. 추가로 VYOS 인터페이스 설정을 한다.</p><ul><li><p>VYOS 설정 모드(conf) 로 진입해서 VYOS eth1 IP(스택 출력 VYOSInstanceINTERNALPrivateIP 확인)는 설정 후 적용한다.</p></li><li><p>Private Subnet 에 있는 Test EC2 IP 로 ping 및 SSH 접근한다. 접속 계정 root / qwe123</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 자신의 VYOSInstanceINTERNALPrivateIP 로 SSH 접속</span></span><br><span class="line">ssh -i <span class="string">'*EC2-Key Pair'</span>* vyos@54.255.135.113</span><br><span class="line">..</span><br><span class="line"></span><br><span class="line"><span class="comment"># 해당 AMI 이미지는 기본적으로 eth1 IP 가 미설정 되어 있다</span></span><br><span class="line">vyos@ip-10-100-1-19:~$ show interfaces</span><br><span class="line">Codes: S - State, L - Link, u - Up, D - Down, A - Admin Down</span><br><span class="line">Interface        IP Address                        S/L  Description</span><br><span class="line">---------        ----------                        ---  -----------</span><br><span class="line">eth0             10.100.1.19/24                    u/u</span><br><span class="line">eth1             -                                 u/u</span><br><span class="line">..</span><br><span class="line"></span><br><span class="line"><span class="comment"># VYOS 설정모드(conf)로 진입하여 eth1의 IP를 설정 후 적용과 저장을 한다</span></span><br><span class="line">vyos@ip-10-100-1-19$ conf</span><br><span class="line">vyos@ip-10-100-1-19<span class="comment"># set interfaces ethernet eth1 address 10.100.100.210/24</span></span><br><span class="line">vyos@ip-10-100-1-19<span class="comment"># commit</span></span><br><span class="line">vyos@ip-10-100-1-19<span class="comment"># exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># VYOS에서 내부에 있는 EC2 인스턴스로 ping 테스트를 한다</span></span><br><span class="line">vyos@ip-10-100-1-19:~$ ping 10.100.100.252</span><br><span class="line">PING 10.100.100.252 (10.100.100.252) 56(84) bytes of data.</span><br><span class="line">64 bytes from 10.100.100.252: icmp_seq=1 ttl=255 time=0.600 ms</span><br><span class="line">..</span><br><span class="line"></span><br><span class="line"><span class="comment"># VYOS에서 내부에 있는 EC2 인스턴스로 SSH 접속 확인을 한다.</span></span><br><span class="line">vyos@ip-10-100-1-19:~$ ssh root@10.100.100.252</span><br></pre></td></tr></table></figure></li></ul></li><li><p>사용자 PC에서 <code>서울</code> EC2 Instance EIP 주소로 SSH 접근한다. 접속 계정 root / qwe123</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@15.165.117.201</span><br></pre></td></tr></table></figure></li><li><p>참고로 CloudFormation에 의해 리소스가 정상적으로 올라오기 까지 약간의 시간이 필요하니 일정 시간 대기가 필요하다.</p></li></ul><blockquote><p>💡 본격적인 실습에 앞서, Site to Site VPN 리소스는 소량의 과금이 불가피 하다. (VPN 연결 시간 단위 요금 부과 - 시간 당 $0.05 등)<br>자세한 사항은 <span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS9rby9nbG9iYWwtYWNjZWxlcmF0b3IvcHJpY2luZy9odHRwczovL2F3cy5hbWF6b24uY29tL2tvL3Zwbi9wcmljaW5nLw==">요금 링크<i class="fa fa-external-link-alt"></i></span>를 참고 바란다.</p></blockquote><hr><br><h3 id="3-Configuration-Site-to-Site-VPN"><a href="#3-Configuration-Site-to-Site-VPN" class="headerlink" title="3. Configuration Site to Site VPN"></a>3. Configuration Site to Site VPN</h3><br><p>3.1 <code>서울</code> Region 의 VPN 정보 확인</p><ul><li><p>VPN Tunnel 1 과  Tunnel 2 의 외부IP와  내부IP CIDR을 확인 한다.</p><p>  <img src="/images/VPN-SitetoSite-with-Static-Route/Untitled9.png" alt="AWS%20VPN%20Site%20to%20Site%20with%20Static%20Route%2078d272b9998c46a4875aa9c090b80ccf/Untitled%209.png"></p></li></ul><br><p>3.2 <code>서울</code> Region 의 고객 VPN 장비 설정을 위한 구성 다운로드 후 <code>싱가폴</code> Region 에 VYOS 에 VPN Config 설정</p><ul><li><p>💁🏻‍♂️ VPN 구성 다운로드?  AWS VGW 에 연결되는 고객VPN 장비(공급업체 별)의 VPN 관련 설정을 AWS 에서 제공</p></li><li><p>[AWS VPN 사이트 간 VPN 연결 - 구성 다운로드] 선택 후 Generic 선택 후 <code>다운로드</code></p><ul><li><p>다운로드 파일 예시</p><p>  <a href="/images/VPN-SitetoSite-with-Static-Route/vpn-006dfdf3f4989c4df.txt">vpn-006dfdf3f4989c4df.txt</a></p></li></ul></li><li><p>다운 받은 config 파일 정보를 기반으로 아래 샘플 VYOS VPN Config 에 변경 후 VYOS 에 적용한다</p></li></ul><details><summary>샘플 VYOS VPN Config</summary><div markdown="1"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> vpn ipsec ike-group AWS lifetime <span class="string">'28800'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec ike-group AWS proposal 1 dh-group <span class="string">'2'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec ike-group AWS proposal 1 encryption <span class="string">'aes128'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec ike-group AWS proposal 1 <span class="built_in">hash</span> <span class="string">'sha1'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> vpn ipsec ipsec-interfaces interface <span class="string">'eth0'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec esp-group AWS compression <span class="string">'disable'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec esp-group AWS lifetime <span class="string">'3600'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec esp-group AWS mode <span class="string">'tunnel'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec esp-group AWS pfs <span class="string">'enable'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec esp-group AWS proposal 1 encryption <span class="string">'aes128'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec esp-group AWS proposal 1 <span class="built_in">hash</span> <span class="string">'sha1'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> vpn ipsec ike-group AWS dead-peer-detection action <span class="string">'restart'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec ike-group AWS dead-peer-detection interval <span class="string">'10'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec ike-group AWS dead-peer-detection timeout <span class="string">'30'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer <span class="string">'IPSec Tunnel #1 의 Virtual Private Gateway IP'</span> authentication mode <span class="string">'pre-shared-secret'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer <span class="string">'IPSec Tunnel #1 의 Virtual Private Gateway IP'</span> authentication pre-shared-secret <span class="string">'IPSec Tunnel #1 의 Pre-Shared Key'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer <span class="string">'IPSec Tunnel #1 의 Virtual Private Gateway IP'</span> description <span class="string">'VPC tunnel 1'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer <span class="string">'IPSec Tunnel #1 의 Virtual Private Gateway IP'</span> ike-group <span class="string">'AWS'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer <span class="string">'IPSec Tunnel #1 의 Virtual Private Gateway IP'</span> <span class="built_in">local</span>-address <span class="string">'VYOS Eth0 IP (EIP가 아님)'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer <span class="string">'IPSec Tunnel #1 의 Virtual Private Gateway IP'</span> vti <span class="built_in">bind</span> <span class="string">'vti0'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer <span class="string">'IPSec Tunnel #1 의 Virtual Private Gateway IP'</span> vti esp-group <span class="string">'AWS'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> interfaces vti vti0 address <span class="string">'IPSec Tunnel #1 의 Customer Gateway 의 Inside IP Addresses'</span></span><br><span class="line"><span class="built_in">set</span> interfaces vti vti0 description <span class="string">'VPC tunnel 1'</span></span><br><span class="line"><span class="built_in">set</span> interfaces vti vti0 mtu <span class="string">'1436'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer <span class="string">'IPSec Tunnel #2 의 Virtual Private Gateway IP'</span> authentication mode <span class="string">'pre-shared-secret'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer <span class="string">'IPSec Tunnel #2 의 Virtual Private Gateway IP'</span> authentication pre-shared-secret <span class="string">'IPSec Tunnel #2 의 Pre-Shared Key'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer <span class="string">'IPSec Tunnel #2 의 Virtual Private Gateway IP'</span> description <span class="string">'VPC tunnel 2'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer <span class="string">'IPSec Tunnel #2 의 Virtual Private Gateway IP'</span> ike-group <span class="string">'AWS'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer <span class="string">'IPSec Tunnel #2 의 Virtual Private Gateway IP'</span> <span class="built_in">local</span>-address <span class="string">'VYOS Eth0 IP (EIP가 아님)'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer <span class="string">'IPSec Tunnel #2 의 Virtual Private Gateway IP'</span> vti <span class="built_in">bind</span> <span class="string">'vti1'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer <span class="string">'IPSec Tunnel #2 의 Virtual Private Gateway IP'</span> vti esp-group <span class="string">'AWS'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> interfaces vti vti1 address <span class="string">'IPSec Tunnel #2 의 Customer Gateway 의 Inside IP Addresses'</span></span><br><span class="line"><span class="built_in">set</span> interfaces vti vti1 description <span class="string">'VPC tunnel 2'</span></span><br><span class="line"><span class="built_in">set</span> interfaces vti vti1 mtu <span class="string">'1436'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> protocols static interface-route <span class="string">'VPN으로 통신해야 될 AWS VPN 내부 대역'</span> next-hop-interface <span class="string">'vti0'</span></span><br><span class="line"><span class="built_in">set</span> protocols static interface-route <span class="string">'VPN으로 통신해야 될 AWS VPN 내부 대역'</span> next-hop-interface <span class="string">'vti1'</span></span><br><span class="line"></span><br><span class="line">commit</span><br><span class="line">save</span><br></pre></td></tr></table></figure></div></details><details><summary>변경 적용 한 VYOS VPN Config → VYOS conf 모드에 복사 붙여넣기를 한다</summary><div markdown="1"><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">conf</span><br><span class="line"><span class="built_in">set</span> vpn ipsec ike-group AWS lifetime <span class="string">'28800'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec ike-group AWS proposal 1 dh-group <span class="string">'2'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec ike-group AWS proposal 1 encryption <span class="string">'aes128'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec ike-group AWS proposal 1 <span class="built_in">hash</span> <span class="string">'sha1'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> vpn ipsec ipsec-interfaces interface <span class="string">'eth0'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec esp-group AWS compression <span class="string">'disable'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec esp-group AWS lifetime <span class="string">'3600'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec esp-group AWS mode <span class="string">'tunnel'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec esp-group AWS pfs <span class="string">'enable'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec esp-group AWS proposal 1 encryption <span class="string">'aes128'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec esp-group AWS proposal 1 <span class="built_in">hash</span> <span class="string">'sha1'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> vpn ipsec ike-group AWS dead-peer-detection action <span class="string">'restart'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec ike-group AWS dead-peer-detection interval <span class="string">'10'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec ike-group AWS dead-peer-detection timeout <span class="string">'30'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer <span class="string">'13.209.231.134'</span> authentication mode <span class="string">'pre-shared-secret'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer <span class="string">'13.209.231.134'</span> authentication pre-shared-secret <span class="string">'bIben5l33KgXpzShJdwNKlO3rG3ryq01'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer <span class="string">'13.209.231.134'</span> description <span class="string">'VPC tunnel 1'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer <span class="string">'13.209.231.134'</span> ike-group <span class="string">'AWS'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer <span class="string">'13.209.231.134'</span> <span class="built_in">local</span>-address <span class="string">'10.100.1.19'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer <span class="string">'13.209.231.134'</span> vti <span class="built_in">bind</span> <span class="string">'vti0'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer <span class="string">'13.209.231.134'</span> vti esp-group <span class="string">'AWS'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> interfaces vti vti0 address <span class="string">'169.254.191.154/30'</span></span><br><span class="line"><span class="built_in">set</span> interfaces vti vti0 description <span class="string">'VPC tunnel 1'</span></span><br><span class="line"><span class="built_in">set</span> interfaces vti vti0 mtu <span class="string">'1436'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer <span class="string">'15.164.154.116'</span> authentication mode <span class="string">'pre-shared-secret'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer <span class="string">'15.164.154.116'</span> authentication pre-shared-secret <span class="string">'abs4CQtJ63ryaw9KaFiix12_us7Vje.r'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer <span class="string">'15.164.154.116'</span> description <span class="string">'VPC tunnel 2'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer <span class="string">'15.164.154.116'</span> ike-group <span class="string">'AWS'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer <span class="string">'15.164.154.116'</span> <span class="built_in">local</span>-address <span class="string">'10.100.1.19'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer <span class="string">'15.164.154.116'</span> vti <span class="built_in">bind</span> <span class="string">'vti1'</span></span><br><span class="line"><span class="built_in">set</span> vpn ipsec site-to-site peer <span class="string">'15.164.154.116'</span> vti esp-group <span class="string">'AWS'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> interfaces vti vti1 address <span class="string">'169.254.213.202/30'</span></span><br><span class="line"><span class="built_in">set</span> interfaces vti vti1 description <span class="string">'VPC tunnel 2'</span></span><br><span class="line"><span class="built_in">set</span> interfaces vti vti1 mtu <span class="string">'1436'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> protocols static interface-route <span class="string">'10.50.0.0/16'</span> next-hop-interface <span class="string">'vti0'</span></span><br><span class="line"><span class="built_in">set</span> protocols static interface-route <span class="string">'10.50.0.0/16'</span> next-hop-interface <span class="string">'vti1'</span></span><br><span class="line"></span><br><span class="line">commit</span><br><span class="line">save</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure></code></pre></div></details><ul><li><p>VPN 관련 Tunnel, Interface , IP 를 표현</p><p>  <img src="/images/VPN-SitetoSite-with-Static-Route/Untitled10.png" alt="AWS%20VPN%20Site%20to%20Site%20with%20Static%20Route%2078d272b9998c46a4875aa9c090b80ccf/Untitled%2010.png"></p></li></ul><hr><br><h3 id="4-Verify-Site-to-Site-VPN"><a href="#4-Verify-Site-to-Site-VPN" class="headerlink" title="4. Verify Site to Site VPN"></a>4. Verify Site to Site VPN</h3><br><p>4.1 <code>서울</code> Region 의 VPN 정보 확인</p><ul><li><p>VPN Tunnel 2개의 상태가 정상 작동을 확인</p><p>  <img src="/images/VPN-SitetoSite-with-Static-Route/2020-05-06-02.png" alt="AWS%20VPN%20Site%20to%20Site%20with%20Static%20Route%2078d272b9998c46a4875aa9c090b80ccf/_2020-05-06__3.26.50.png"></p></li></ul><br><p>4.2 <code>싱가폴</code> Region 의 VYOS 에서 VPN 정보 확인</p><details><summary>Tunnel 인터페이스(= vti0, vti1) 정보 확인 및 VPN 상태 확인 및 라우팅 테이블 확인</summary><div markdown="1"><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># VYOS 의 가상의 터널 인터페이스 정보를 확인</span></span><br><span class="line">$ sh interfaces vti</span><br><span class="line">Codes: S - State, L - Link, u - Up, D - Down, A - Admin Down</span><br><span class="line">Interface        IP Address                        S/L  Description</span><br><span class="line">---------        ----------                        ---  -----------</span><br><span class="line">vti0             169.254.191.154/30                u/u  VPC tunnel 1</span><br><span class="line">vti1             169.254.213.202/30                u/u  VPC tunnel 2</span><br><span class="line"></span><br><span class="line"><span class="comment"># AWS 내부IP(터널IP)와 ping 통신 확인</span></span><br><span class="line">$ ping 169.254.191.153</span><br><span class="line">4 bytes from 169.254.191.153: icmp_seq=1 ttl=254 time=98.5 ms</span><br><span class="line">$ ping 169.254.213.201</span><br><span class="line">64 bytes from 169.254.213.201: icmp_seq=1 ttl=254 time=102 ms</span><br><span class="line"></span><br><span class="line"><span class="comment"># VYOS 의 VPN IPsec 상태 정보 확인 및 해당 터널을 통한 트래픽 통계 확인</span></span><br><span class="line">$ show vpn ipsec sa</span><br><span class="line">Connection                      State    Uptime    Bytes In/Out    Packets In/Out    Remote address    Remote ID    Proposal</span><br><span class="line">------------------------------  -------  --------  --------------  ----------------  ----------------  -----------  ----------------------------------</span><br><span class="line">peer-15.164.154.116-tunnel-vti  up       14m12s    0B/0B           0/0               15.164.154.116    N/A          AES_CBC_128/HMAC_SHA1_96/MODP_1024</span><br><span class="line">peer-13.209.231.134-tunnel-vti  up       14m12s    0B/0B           0/0               13.209.231.134    N/A          AES_CBC_128/HMAC_SHA1_96/MODP_1024</span><br><span class="line"></span><br><span class="line"><span class="comment"># VYOS 장비의 라우팅 테이블을 확인, AWS VGW에 연결된 VPC대역에 대한 라우팅 정보 확인</span></span><br><span class="line">$ sh ip route</span><br><span class="line">..</span><br><span class="line">S&gt;* 0.0.0.0/0 [210/0] via 10.100.1.1, eth0, 02:02:04</span><br><span class="line">S&gt;* 10.50.0.0/16 [1/0] is directly connected, vti0, 00:00:06</span><br><span class="line">  *                    is directly connected, vti1, 00:00:06</span><br><span class="line">C&gt;* 10.100.1.0/24 is directly connected, eth0, 02:02:05</span><br><span class="line">C&gt;* 10.100.100.0/24 is directly connected, eth1, 01:31:39</span><br><span class="line">C&gt;* 169.254.191.152/30 is directly connected, vti0, 00:17:41</span><br><span class="line">C&gt;* 169.254.213.200/30 is directly connected, vti1, 00:17:41</span><br><span class="line">..</span><br></pre></td></tr></table></figure></code></pre></div></details><br><p>4.3 <code>싱가폴</code> 내부 대역의 Route Table 설정</p><details><summary>[VPC - Route Tables] VPCIDC1 VYOS Internal Subnet Route Table 선택 후 [라우팅 편집]으로 추가</summary><div markdown="1"><ul><li><p>10.50.0.0/16 , Network Interface → VYOS Eth1 후 <code>라우팅 저장</code></p><p>  <img src="/images/VPN-SitetoSite-with-Static-Route/2020-05-06-03.png" alt="AWS%20VPN%20Site%20to%20Site%20with%20Static%20Route%2078d272b9998c46a4875aa9c090b80ccf/_2020-05-06__3.42.10.png"></p></li></ul></div></details><br><p>4.4 <code>서울</code> Subnet에 Route Table 설정</p><ul><li><p>[AWS VPN 사이트 간 VPN 연결 - (하단) 정적 라우팅] 편집 후 10.100.0.0/16 후 <code>저장</code></p><p>  <img src="/images/VPN-SitetoSite-with-Static-Route/2020-05-06-04.png" alt="AWS%20VPN%20Site%20to%20Site%20with%20Static%20Route%2078d272b9998c46a4875aa9c090b80ccf/_2020-05-06__3.47.59.png"></p></li><li><p>[VPC - Route Tables] VPCAWS Subnet Route Table 선택 후 [라우팅 전파 편집]으로 추가</p><ul><li><p>전파 선택 후 <code>저장</code></p><p>  <img src="/images/VPN-SitetoSite-with-Static-Route/2020-05-06-05.png" alt="AWS%20VPN%20Site%20to%20Site%20with%20Static%20Route%2078d272b9998c46a4875aa9c090b80ccf/_2020-05-06__3.44.45.png"></p></li></ul></li></ul><br><p>4.5 전체 라우팅 상태 확인</p><ul><li><p><code>서울</code> Region 경우 싱가폴 VPC대역인 10.100.0.0/16 을VGW 로 보냄</p><p>  → 이후 VGW 는 VPN Tunnel 을 통해 VYOS eth0 으로 보냄</p></li><li><p><code>싱가폴</code> Region 경우 내부대역(10.100.100.0/24)에서 서울 VPC대역인 10.50.0.0/16 을 VYOS eth1 으로 보냄</p><p>  → 이후 VYOS는 10.50.0.0/16 을 vti0, vti1 즉 VPN Tunnel 을 통해 VGW 로 보냄</p><p>  <img src="/images/VPN-SitetoSite-with-Static-Route/Untitled11.png" alt="AWS%20VPN%20Site%20to%20Site%20with%20Static%20Route%2078d272b9998c46a4875aa9c090b80ccf/Untitled%2011.png"></p></li></ul><br><p>4.6 통신 확인</p><ul><li><p>서울 EC2 에서 싱가폴 EC2 로 ping 통신, ssh 접속을 확인</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@ip-10-50-1-80 ~]$ ping -c 1 10.100.100.252</span><br><span class="line">PING 10.100.100.252 (10.100.100.252) 56(84) bytes of data.</span><br><span class="line">64 bytes from 10.100.100.252: icmp_seq=1 ttl=254 time=104 ms</span><br><span class="line"></span><br><span class="line">$ ssh root@10.100.100.252</span><br><span class="line">root@10.100.100.252<span class="string">'s password:</span></span><br><span class="line"><span class="string">..</span></span><br><span class="line"><span class="string">[root@ip-10-100-100-252 ~]#</span></span><br></pre></td></tr></table></figure></li></ul><details><summary>위 ping 통신 시도 시, VYOS 에서 icmp 패킷 확인</summary><div markdown="1"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vyos@ip-10-100-1-19:~$ sudo tcpdump -i any -nn icmp</span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on any, link-type LINUX_SLL (Linux cooked), capture size 262144 bytes</span><br><span class="line">06:57:58.578074 IP 10.50.1.80 &gt; 10.100.100.252: ICMP <span class="built_in">echo</span> request, id 32561, seq 1, length 64</span><br><span class="line">06:57:58.578456 IP 10.100.100.252 &gt; 10.50.1.80: ICMP <span class="built_in">echo</span> reply, id 32561, seq 1, length 64</span><br></pre></td></tr></table></figure></div></details><hr><br><h3 id="5-Delete-Infrastructure"><a href="#5-Delete-Infrastructure" class="headerlink" title="5. Delete Infrastructure"></a>5. Delete Infrastructure</h3><ul><li><code>싱가폴</code> Region 의 CloudFormation Stack Delete</li><li><code>서울</code> Region 의 CloudFormation Stack Delete</li></ul><br>]]></content:encoded>
      
      <comments>http://cloudneta.github.io/2020/05/07/VPN-SitetoSite-with-Static-Route/#disqus_thread</comments>
    </item>
    
    <item>
      <title>LabGuide - AWS Global Accelerator</title>
      <link>http://cloudneta.github.io/2020/05/06/Accelerator/</link>
      <guid>http://cloudneta.github.io/2020/05/06/Accelerator/</guid>
      <pubDate>Wed, 06 May 2020 10:52:54 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;em&gt;작성자 : ongja.cloudnet@&lt;/em&gt;&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><em>작성자 : ongja.cloudnet@</em></p><a id="more"></a><br><details><summary>AWS Global Accelerator 참고 링크</summary><div markdown="1"><p><span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS9rby9nbG9iYWwtYWNjZWxlcmF0b3IvP2Jsb2dzLWdsb2JhbC1hY2NlbGVyYXRvci5zb3J0LWJ5PWl0ZW0uYWRkaXRpb25hbEZpZWxkcy5jcmVhdGVkRGF0ZSZibG9ncy1nbG9iYWwtYWNjZWxlcmF0b3Iuc29ydC1vcmRlcj1kZXNjJmF3cy1nbG9iYWwtYWNjZWxlcmF0b3Itd24uc29ydC1ieT1pdGVtLmFkZGl0aW9uYWxGaWVsZHMucG9zdERhdGVUaW1lJmF3cy1nbG9iYWwtYWNjZWxlcmF0b3Itd24uc29ydC1vcmRlcj1kZXNj">Global Accelerator 개요<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS9rby9ibG9ncy9rb3JlYS9uZXctYXdzLWdsb2JhbC1hY2NlbGVyYXRvci1mb3ItYXZhaWxhYmlsaXR5LWFuZC1wZXJmb3JtYW5jZS8=">Global Accelertor 소개 (AWS 한국 블로그)<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2dsb2JhbC1hY2NlbGVyYXRvci9sYXRlc3QvZGcvd2hhdC1pcy1nbG9iYWwtYWNjZWxlcmF0b3IuaHRtbA==">Global Accelerator Developer Guide (설명서)<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS9rby9ibG9ncy9uZXR3b3JraW5nLWFuZC1jb250ZW50LWRlbGl2ZXJ5L3RyYWZmaWMtbWFuYWdlbWVudC13aXRoLWF3cy1nbG9iYWwtYWNjZWxlcmF0b3Iv">Traffic management with AWS Global Accelerator<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS9rby9nbG9iYWwtYWNjZWxlcmF0b3IvcHJpY2luZy8=">Global Accelerator 요금<i class="fa fa-external-link-alt"></i></span></p></div></details><blockquote><p>💡 AWS 서비스 관련해서는 항상 최우선으로 ‘AWS 설명서’를 읽어보는 것을 추천한다.<br>   한글 번역이 매끄럽지 못하면 English 로 변경 후 읽어보길 바란다.</p></blockquote><hr><br><h3 id="1-AWS-Global-Accelerator-Theory"><a href="#1-AWS-Global-Accelerator-Theory" class="headerlink" title="1. AWS Global Accelerator Theory"></a>1. AWS Global Accelerator Theory</h3><br><p><span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS9rby9nbG9iYWwtYWNjZWxlcmF0b3IvP2Jsb2dzLWdsb2JhbC1hY2NlbGVyYXRvci5zb3J0LWJ5PWl0ZW0uYWRkaXRpb25hbEZpZWxkcy5jcmVhdGVkRGF0ZSZibG9ncy1nbG9iYWwtYWNjZWxlcmF0b3Iuc29ydC1vcmRlcj1kZXNjJmF3cy1nbG9iYWwtYWNjZWxlcmF0b3Itd24uc29ydC1ieT1pdGVtLmFkZGl0aW9uYWxGaWVsZHMucG9zdERhdGVUaW1lJmF3cy1nbG9iYWwtYWNjZWxlcmF0b3Itd24uc29ydC1vcmRlcj1kZXNj">1.1 AWS Global Accelerator 란?<i class="fa fa-external-link-alt"></i></span></p><ul><li>AWS Global Accelerator는 로컬 또는 글로벌 사용자를 대상으로 어플리케이션의 가용성과 성능을 개선하는 서비스이다.</li><li>AWS Global Accelerator는 AWS 글로벌 네트워크를 통해 사용자에서 어플리케이션으로 이어진 경로를 최적화하여 트래픽의 성능을 개선한다.</li></ul><br><p><span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS9rby9ibG9ncy9rb3JlYS9uZXctYXdzLWdsb2JhbC1hY2NlbGVyYXRvci1mb3ItYXZhaWxhYmlsaXR5LWFuZC1wZXJmb3JtYW5jZS8=">1.2 AWS Global Accelerator Key Words<i class="fa fa-external-link-alt"></i></span></p><ul><li><p><em>고정 Anycast IP</em> – AWS Global Accelerator는 하나 이상의 AWS 리전에서 호스팅되는 애플리케이션에 대한 고정 진입점 역할을 하는 정적 IP 주소를 사용한다. 이 IP 주소는 AWS 엣지 로케이션에서 할당되는 Anycast입니다. 즉, 이 IP 주소가 여러 AWS 엣지 로케이션에서 발표되므로 트래픽이 사용자에게 최대한 가까운 위치에서 AWS 글로벌 네트워크에 진입할 수 있다.</p></li><li><p><em>AWS의 글로벌 네트워크</em> – AWS Global Accelerator를 통해 라우팅되는 트래픽은 공용 인터넷이 아니라 AWS 글로벌 네트워크를 따라 이동한다. 클라이언트는 클라이언트 위치, 상태 검사 결과 및 구성된 가중치에 따라 최적의 리전으로 라우팅된다.</p></li><li><p><em>클라이언트 상태</em> – AWS Global Accelerator를 활용하면 필수 요건으로 상태를 저장하는 애플리케이션을 만들 수 있다. 상태 저장 애플리케이션은 초기 연결 후에 동일한 EndPoint로 사용자를 라우팅한다. AWS Global Accelerator는 이를 위해 포트와 프로토콜에 관계없이 클라이언트 요청자의 Source IP 상태 유지를 위한 식별자로 설정한다.</p></li><li><p><em>AWS Global Accelerator 구성</em></p><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2dsb2JhbC1hY2NlbGVyYXRvci9sYXRlc3QvZGcvaW50cm9kdWN0aW9uLWNvbXBvbmVudHMuaHRtbA==">Listener<i class="fa fa-external-link-alt"></i></span> – 프로토콜과 포트를 기반하에, AWS Global Accelerator로 인바운드 연결을 처리하는 Listener를 구성</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2dsb2JhbC1hY2NlbGVyYXRvci9sYXRlc3QvZGcvaW50cm9kdWN0aW9uLWNvbXBvbmVudHMuaHRtbA==">EndPoint Group<i class="fa fa-external-link-alt"></i></span> – 어플리케이션이 배포되는 AWS 리전을 정의</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2dsb2JhbC1hY2NlbGVyYXRvci9sYXRlc3QvZGcvYWJvdXQtZW5kcG9pbnQtZ3JvdXBzLXRyYWZmaWMtZGlhbC5odG1s">Traffic Dial<i class="fa fa-external-link-alt"></i></span> – EndPoint Group이 수신 할 수있는 트래픽의 비율을 의미</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2dsb2JhbC1hY2NlbGVyYXRvci9sYXRlc3QvZGcvaW50cm9kdWN0aW9uLWNvbXBvbmVudHMuaHRtbA==">EndPoint<i class="fa fa-external-link-alt"></i></span> – EndPoint Group에 연결된 EC2-Instance, Elastic IP, Network Load Balancer 또는 Application Load Balancer이다.</p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2dsb2JhbC1hY2NlbGVyYXRvci9sYXRlc3QvZGcvaW50cm9kdWN0aW9uLWNvbXBvbmVudHMuaHRtbA==">EndPoint Weight<i class="fa fa-external-link-alt"></i></span> – 다수의 EndPoint가 있는 EndPoint Group에서 가중치를 부여하여 분배</p></li></ul></li></ul><br><p>1.3 AWS Global Accelerator 작동 방식</p><p><img src="/images/LabGuide-AWS-Global-Accelerator/Untitled.png" alt="LabGuide%20AWS%20Global%20Accelerator%2086f3714d71d24b4c940958dfd90b2d52/Untitled.png"><br>그림 1-1 AWS Global Accelerator Diagram</p><ul><li>Edge Location에서 알리는 2개의 고정 Anycast IP 주소를 통해, 사용자에게 가장 가까운 Edge Location으로 트래픽이 전송된다.</li><li>AWS 글로벌 네트워크를 통해 AWS Global Accelerator로 요청이 라우팅되면, 가장 가까운 정상 상태의 EndPoint Group을 선택하여 서비스 한다.</li></ul><blockquote><p>💡 AWS Global Accelerator의 핵심은 고정 Anycast IP을 제공하여 사용자 입장에서 고정 IP 주소로 접근이 가능하며, AWS 글로벌 네트워크를 경유하여 안정적이고 빠른 서비스가 가능하는 점이다.</p></blockquote><hr><br><h3 id="2-AWS-Global-Accelerator-Lab-Preview"><a href="#2-AWS-Global-Accelerator-Lab-Preview" class="headerlink" title="2. AWS Global Accelerator Lab Preview"></a>2. AWS Global Accelerator Lab Preview</h3><br><p>2.1 Lab Topology</p><p><img src="/images/LabGuide-AWS-Global-Accelerator/Untitled1.png" alt="LabGuide%20AWS%20Global%20Accelerator%2086f3714d71d24b4c940958dfd90b2d52/Untitled%201.png"></p><p>그림 2-1 AWS Global Accelerator Lab Topology</p><ul><li><code>시드니, 상파울루</code> Region에 Web 서버용 EC2-Instance 2대씩 배치</li><li>Global Accelerator에서 HTTP 서비스의 인바운드 처리를 위한 Listener를 구성하고, 2개의 Anycast IP를 할당</li><li>Global Accelerator에서 시드니, 상파울루 Region에 대한 EndPoint Group을 구분</li><li>EndPoint Group의 EndPoint 지정 (<code>시드니</code> : ALB, <code>상파울루</code> : EC2-Instance 2대)</li><li><code>서울, 버지니아</code> Region에 Client를 통해 생성된 Anycast IP로 Web 접근하여 동작 확인</li></ul><br><p>2.2 AWS 기본 설정</p><ul><li>본 실습에서 활용할 AWS Region은 <code>서울, 버지니아북부, 시드니, 상파울루</code> 이다. 해당 Region에 대한 <em>EC2-Key Pair</em>를 생성</li><li><code>서울, 버지니아북부</code> Region은 클라이언트 영역으로, 실습용 <em>EC2-Instance를 1대씩 구축</em> (Default VPC 내 EC2-Instance 생성)</li><li><code>시드니, 상파울루</code> Region은 서비스 영역으로, <em>CloudFormation</em>에 의해 인프라를 자동 구축 (2.3항에서 진행)</li></ul><br><p>2.3 CloudFormation (Infrastructure as Code)</p><p>⤵ <span class="exturl" data-url="aHR0cHM6Ly9zMy5hcC1ub3J0aGVhc3QtMi5hbWF6b25hd3MuY29tL2Nsb3VkZm9ybWF0aW9uLmNsb3VkbmV0YS5uZXQvR0EvR2xvYmFsQWNjZWxlcmF0b3JfTGFiX0NGLnlhbWw=">Download GlobalAccelerator_Lab_CF.yaml<i class="fa fa-external-link-alt"></i></span></p><details><summary>GlobalAccelerator_Lab_CF.yaml Template Code View</summary><div markdown="1"><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line">Parameters:</span><br><span class="line">  KeyName:</span><br><span class="line">    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances. Linked to AWS Parameter</span><br><span class="line">    Type: AWS::EC2::KeyPair::KeyName</span><br><span class="line">    ConstraintDescription: must be the name of an existing EC2 KeyPair.</span><br><span class="line"></span><br><span class="line">Mappings:</span><br><span class="line">  AWSRegionArch2AMI:</span><br><span class="line">    ap-southeast-2:</span><br><span class="line">      HVM64: ami-dc361ebf</span><br><span class="line">    sa-east-1:</span><br><span class="line">      HVM64: ami-6dd04501</span><br><span class="line"></span><br><span class="line">Conditions:</span><br><span class="line">  CreateSydneyResources: !Equals [ !Ref &#39;AWS::Region&#39;, ap-southeast-2 ]</span><br><span class="line"></span><br><span class="line">Resources:</span><br><span class="line">  VPC01:</span><br><span class="line">    Type: AWS::EC2::VPC</span><br><span class="line">    Properties:</span><br><span class="line">     CidrBlock: 10.0.0.0&#x2F;16</span><br><span class="line">  InternetGateway0101:</span><br><span class="line">    Type: AWS::EC2::InternetGateway</span><br><span class="line">    Properties: &#123;&#125;</span><br><span class="line">  InternetGatewayAttachment0101:</span><br><span class="line">    Type: AWS::EC2::VPCGatewayAttachment</span><br><span class="line">    Properties:</span><br><span class="line">      InternetGatewayId: !Ref InternetGateway0101</span><br><span class="line">      VpcId: !Ref VPC01</span><br><span class="line">  PublicRouteTable0101:</span><br><span class="line">    Type: AWS::EC2::RouteTable</span><br><span class="line">    Properties:</span><br><span class="line">      VpcId: !Ref VPC01</span><br><span class="line">  DefaultPublicRoute0101:</span><br><span class="line">    Type: AWS::EC2::Route</span><br><span class="line">    DependsOn: InternetGatewayAttachment0101</span><br><span class="line">    Properties:</span><br><span class="line">      RouteTableId: !Ref PublicRouteTable0101</span><br><span class="line">      DestinationCidrBlock: 0.0.0.0&#x2F;0</span><br><span class="line">      GatewayId: !Ref InternetGateway0101</span><br><span class="line">  Subnet0101:</span><br><span class="line">    Type: AWS::EC2::Subnet</span><br><span class="line">    Properties:</span><br><span class="line">      VpcId: !Ref VPC01</span><br><span class="line">      AvailabilityZone: !Select [ 0, !GetAZs &#39;&#39; ]</span><br><span class="line">      CidrBlock: 10.0.0.0&#x2F;24</span><br><span class="line">  Subnet0102:</span><br><span class="line">    Type: AWS::EC2::Subnet</span><br><span class="line">    Properties:</span><br><span class="line">      VpcId: !Ref VPC01</span><br><span class="line">      AvailabilityZone: !Select [ 2, !GetAZs &#39;&#39; ]</span><br><span class="line">      CidrBlock: 10.0.1.0&#x2F;24</span><br><span class="line">  Subnet0101RouteTableAssociation:</span><br><span class="line">    Type: AWS::EC2::SubnetRouteTableAssociation</span><br><span class="line">    Properties:</span><br><span class="line">      RouteTableId: !Ref PublicRouteTable0101</span><br><span class="line">      SubnetId: !Ref Subnet0101</span><br><span class="line">  Subnet0102RouteTableAssociation:</span><br><span class="line">    Type: AWS::EC2::SubnetRouteTableAssociation</span><br><span class="line">    Properties:</span><br><span class="line">      RouteTableId: !Ref PublicRouteTable0101</span><br><span class="line">      SubnetId: !Ref Subnet0102</span><br><span class="line"></span><br><span class="line">  WebSecurityGroup:</span><br><span class="line">    Type: AWS::EC2::SecurityGroup</span><br><span class="line">    Properties:</span><br><span class="line">      GroupDescription: Enable HTTP access via port 80 and SSH access via port 22</span><br><span class="line">      VpcId: !Ref VPC01</span><br><span class="line">      SecurityGroupIngress:</span><br><span class="line">      - IpProtocol: tcp</span><br><span class="line">        FromPort: &#39;80&#39;</span><br><span class="line">        ToPort: &#39;80&#39;</span><br><span class="line">        CidrIp: 0.0.0.0&#x2F;0</span><br><span class="line">      - IpProtocol: tcp</span><br><span class="line">        FromPort: &#39;22&#39;</span><br><span class="line">        ToPort: &#39;22&#39;</span><br><span class="line">        CidrIp: 0.0.0.0&#x2F;0</span><br><span class="line"></span><br><span class="line">  EC2Instance1:</span><br><span class="line">    Type: AWS::EC2::Instance</span><br><span class="line">    Properties:</span><br><span class="line">      InstanceType: t2.micro</span><br><span class="line">      ImageId: !FindInMap [AWSRegionArch2AMI, !Ref &#39;AWS::Region&#39;, HVM64]</span><br><span class="line">      KeyName: !Ref KeyName</span><br><span class="line">      NetworkInterfaces:</span><br><span class="line">        - DeviceIndex: 0</span><br><span class="line">          SubnetId: !Ref Subnet0101</span><br><span class="line">          GroupSet:</span><br><span class="line">          - !Ref WebSecurityGroup</span><br><span class="line">          AssociatePublicIpAddress: true</span><br><span class="line">      UserData:</span><br><span class="line">        Fn::Base64:</span><br><span class="line">          !Sub |</span><br><span class="line">            #!&#x2F;bin&#x2F;bash</span><br><span class="line">            yum install httpd -y</span><br><span class="line">            service httpd start</span><br><span class="line">            chkconfig httpd on</span><br><span class="line">            echo &quot;&lt;h1&gt;CloudNeta Web Server_1 [Region&#x3D; $&#123;AWS::Region&#125;] &lt;&#x2F;h1&gt;&quot; &gt; &#x2F;var&#x2F;www&#x2F;html&#x2F;index.html</span><br><span class="line">  EC2Instance2:</span><br><span class="line">    Type: AWS::EC2::Instance</span><br><span class="line">    Properties:</span><br><span class="line">      InstanceType: t2.micro</span><br><span class="line">      ImageId: !FindInMap [AWSRegionArch2AMI, !Ref &#39;AWS::Region&#39;, HVM64]</span><br><span class="line">      KeyName: !Ref KeyName</span><br><span class="line">      NetworkInterfaces:</span><br><span class="line">        - DeviceIndex: 0</span><br><span class="line">          SubnetId: !Ref Subnet0102</span><br><span class="line">          GroupSet:</span><br><span class="line">          - !Ref WebSecurityGroup</span><br><span class="line">          AssociatePublicIpAddress: true</span><br><span class="line">      UserData:</span><br><span class="line">        Fn::Base64:</span><br><span class="line">          !Sub |</span><br><span class="line">            #!&#x2F;bin&#x2F;bash</span><br><span class="line">            yum install httpd -y</span><br><span class="line">            service httpd start</span><br><span class="line">            chkconfig httpd on</span><br><span class="line">            echo &quot;&lt;h1&gt;CloudNeta Web Server_2 [Region&#x3D; $&#123;AWS::Region&#125;] &lt;&#x2F;h1&gt;&quot; &gt; &#x2F;var&#x2F;www&#x2F;html&#x2F;index.html</span><br><span class="line"></span><br><span class="line">  ALBTargetGroup:</span><br><span class="line">    Type: AWS::ElasticLoadBalancingV2::TargetGroup</span><br><span class="line">    Condition: CreateSydneyResources</span><br><span class="line">    Properties:</span><br><span class="line">      Name: CloudNetaTG</span><br><span class="line">      Port: 80</span><br><span class="line">      Protocol: HTTP</span><br><span class="line">      VpcId: !Ref VPC01</span><br><span class="line">      Targets:</span><br><span class="line">        - Id: !Ref EC2Instance1</span><br><span class="line">          Port: 80</span><br><span class="line">        - Id: !Ref EC2Instance2</span><br><span class="line">          Port: 80</span><br><span class="line">  ApplicationLoadBalancer:</span><br><span class="line">    Type: AWS::ElasticLoadBalancingV2::LoadBalancer</span><br><span class="line">    Condition: CreateSydneyResources</span><br><span class="line">    Properties:</span><br><span class="line">      Scheme: internet-facing</span><br><span class="line">      SecurityGroups:</span><br><span class="line">        - !Ref WebSecurityGroup</span><br><span class="line">      Subnets:</span><br><span class="line">        - !Ref Subnet0101</span><br><span class="line">        - !Ref Subnet0102</span><br><span class="line">  ALBListener:</span><br><span class="line">    Type: AWS::ElasticLoadBalancingV2::Listener</span><br><span class="line">    Condition: CreateSydneyResources</span><br><span class="line">    Properties:</span><br><span class="line">      DefaultActions:</span><br><span class="line">        - Type: forward</span><br><span class="line">          TargetGroupArn: !Ref ALBTargetGroup</span><br><span class="line">      LoadBalancerArn: !Ref ApplicationLoadBalancer</span><br><span class="line">      Port: 80</span><br><span class="line">      Protocol: HTTP</span><br></pre></td></tr></table></figure></code></pre></div></details><hr><ul><li>템플릿 파일을 다운받은 후 <code>시드니, 상파울루</code> Region에서 CloudFormation 스택을 생성한다.</li><li>CloudFormation 스택 생성 시 KeyName 파라미터 값을 입력한다. (EC2-Key Pair 생성을 하지 않았다면 생성)</li><li>CloudFormation에 의해 생성되는 리소스는 아래와 같으며, 각 Region 별 정상적으로 생성되었는지 확인한다.</li></ul><details><summary>시드니 CF 생성 인프라</summary><div markdown="1"><pre><code>- Web 서버용 EC2-Instance 2개- VPC 1개, Subnet 2개, Public Route Table 1개, IGW 1개- Security Group 1개- Application Load Balancer, Listener, Target Group 1개씩</code></pre></div></details><details><summary>상파울루 CF 생성 인프라</summary><div markdown="1"><pre><code>- Web 서버용 EC2-Instance 2개- VPC 1개, Subnet 2개, Public Route Table 1개, IGW 1개- Security Group 1개</code></pre></div></details><br><p>2.4 검증</p><ul><li>사용자 PC에서 <code>시드니</code> ALB DNS 주소로 Web 접근한다. (새로고침을 하여 정상적인 로드밸런싱 확인)</li><li>사용자 PC에서 <code>상파울루</code> EC2-Instance IP 주소로 Web 접근한다. (2대 모두 확인)</li><li>참고로 CF에 의해 리소스가 정상적으로 올라오기 까지 약간의 시간이 필요하니 일정 시간 대기가 필요하다.</li></ul><blockquote><p>💡 본격적인 실습에 앞서, Global Accelerator 리소스는 소량의 과금이 불가피 하다. (최초 리소스 생성 시 시간당 약 0.025$)<br>자세한 사항은 <span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS9rby9nbG9iYWwtYWNjZWxlcmF0b3IvcHJpY2luZy8=">Global Accelerator 요금<i class="fa fa-external-link-alt"></i></span> 링크를 참고 바란다.</p></blockquote><hr><br><h3 id="3-Create-AWS-Global-Accelerator"><a href="#3-Create-AWS-Global-Accelerator" class="headerlink" title="3. Create AWS Global Accelerator"></a>3. Create AWS Global Accelerator</h3><br><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2dsb2JhbC1hY2NlbGVyYXRvci9sYXRlc3QvZGcvZ2V0dGluZy1zdGFydGVkLmh0bWwjZ2V0dGluZy1zdGFydGVkLWFjY2VsZXJhdG9y">3.1 AWS Global Accelerator 생성<i class="fa fa-external-link-alt"></i></span></p><p>[STEP 1] Enter Name</p><p>1) Global Accelerator 리소스 접근</p><ul><li>Global Accelerator는 오레곤 Region(us-west-2)에서 관리</li></ul><p>2) <code>Create Accelerator</code></p><p>3) Enter Name</p><ul><li>Accelerator Name: <code>CloudNeta-GA</code></li></ul><p>[STEP 2] Add Listeners</p><ul><li>Port Info: <code>80</code></li><li>Protocol Info: <code>TCP</code></li><li>Client affinity Info: <code>None</code></li></ul><p>[STEP 3] Add EndPoint Groups</p><ul><li><p>Region Info: <code>ap-southeast-2</code>, Traffic Dial Info: <code>100</code></p><ul><li><p>Configure Health Checks</p><ul><li>Health Check Protocol: <code>HTTP</code>, 나머지 Default</li></ul></li></ul></li><li><p><code>Add EndPoint Group</code></p></li><li><p>Region Info: <code>sa-east-1</code>, Traffic Dial Info: <code>100</code></p><ul><li><p>Configure Health Checks</p><ul><li>Health Check Protocol: <code>HTTP</code>, 나머지 Default</li></ul></li></ul></li></ul><p>[STEP 4] Add EndPoints</p><ul><li><p>Endpoint group: ap-southeast-2</p><ul><li><p><code>Add endpoint</code></p></li><li><p>Endpoint type Info: <code>Application Load Balancer</code></p></li><li><p>Endpoint Info: <em><code>ALB 대상 지정</code></em></p></li><li><p>Weight Info: <code>128</code></p></li></ul></li></ul><details><summary>View Screenshot</summary><div markdown="1"><p><img src="/images/LabGuide-AWS-Global-Accelerator/Untitled2.png" alt="LabGuide%20AWS%20Global%20Accelerator%2086f3714d71d24b4c940958dfd90b2d52/Untitled%202.png"><br>그림 3-1 시드니 EndPoint Group의 EndPoint 설정 화면 (ALB)</p></div></details><ul><li><p>Endpoint group: sa-east-1</p><ul><li><p><code>Add endpoint</code></p></li><li><p>Endpoint type Info: <code>EC2 instance</code></p></li><li><p>Endpoint Info: <em><code>EC2-Instance-1 대상 지정</code></em></p></li><li><p>Weight Info: <code>128</code></p></li><li><p><code>Add endpoint</code></p></li><li><p>Endpoint type Info: <code>EC2 instance</code></p></li><li><p>Endpoint Info: <em><code>EC2-Instance-2 대상 지정</code></em></p></li><li><p>Weight Info: <code>128</code></p></li></ul></li></ul><details><summary>View Screenshot</summary><div markdown="1"><p><img src="/images/LabGuide-AWS-Global-Accelerator/Untitled3.png" alt="LabGuide%20AWS%20Global%20Accelerator%2086f3714d71d24b4c940958dfd90b2d52/Untitled%203.png"><br>그림 3-2 상파울루 EndPoint Group의 EndPoint 설정 화면 (EC2-Instance)</p></div></details><ul><li><code>Create Accelerator</code></li></ul><br><p>3.2 AWS Global Accelerator 정보 확인</p><p>[STEP 1] Accelerator &amp; Listener 정보</p><p><img src="/images/LabGuide-AWS-Global-Accelerator/Untitled4.png" alt="LabGuide%20AWS%20Global%20Accelerator%2086f3714d71d24b4c940958dfd90b2d52/Untitled%204.png"><br>그림 3-3 Accelerator 정보와 이에 속한 Listener 정보</p><ul><li>Accelerator Provisioning Status는 <code>Deployed</code> 상태로 전환되었다.</li><li>Accelerator에 Static한 <code>Anycast IP 2개</code>를 할당 받는다.</li><li>TCP 80에 대한 Listener가 생성되었고 <code>All Healthy</code> 한 상태이다.</li></ul><p>[STEP 2] EndPoint Group 확인</p><ul><li>Listener 를 선택 후 <code>View Details</code>에 접근 한다.</li></ul><p><img src="/images/LabGuide-AWS-Global-Accelerator/Untitled5.png" alt="LabGuide%20AWS%20Global%20Accelerator%2086f3714d71d24b4c940958dfd90b2d52/Untitled%205.png"><br>그림 3-4 생성된 Listener 정보와 이에 속한 Endpoint Group 정보</p><ul><li>TCP 80에 대한 Listener 정보이다. (Client Affinity는 비활성화 상태)</li><li>해당 Listener에 속한 EndPoint Group을 확인한다. (ap-soutcheast-2의 EndPoint Group, sa-east-1의 EndPoint Group)</li><li>현재 각 EndPoint Group에 대한 <code>Traffic Dial</code>은 모두 100%이다. (트래픽 수용력 100%)</li></ul><p>[STEP 3] EndPoint 확인</p><p><img src="/images/LabGuide-AWS-Global-Accelerator/Untitled6.png" alt="LabGuide%20AWS%20Global%20Accelerator%2086f3714d71d24b4c940958dfd90b2d52/Untitled%206.png"><br>그림 3-5 시드니 Endpoint Group 정보와 이에 속한 Endpoint 정보</p><ul><li>ap-southeast-2의 EndPoint Group에 대한 EndPoint 정보를 확인한다. (EndPoint Type: <code>ALB</code>)</li></ul><p><img src="/images/LabGuide-AWS-Global-Accelerator/Untitled7.png" alt="LabGuide%20AWS%20Global%20Accelerator%2086f3714d71d24b4c940958dfd90b2d52/Untitled%207.png"><br>그림 3-6 상파울루 Endpoint Group 정보와 이에 속한 Endpoint 정보</p><ul><li>sa-east-1의 EndPoint Group에 대한 EndPoint 2대의 정보를 확인한다. (EndPoint Type: <code>EC2</code>)</li></ul><hr><br><h3 id="4-Verify-AWS-Global-Accelerator"><a href="#4-Verify-AWS-Global-Accelerator" class="headerlink" title="4. Verify AWS Global Accelerator"></a>4. Verify AWS Global Accelerator</h3><br><h3 id="4-1-Web-접속-부하-Test"><a href="#4-1-Web-접속-부하-Test" class="headerlink" title="4.1 Web 접속 부하 Test"></a>4.1 Web 접속 부하 Test</h3><p>Web 접속 테스트는 <code>서울, 버지니아</code> Region에 생성한 EC2-Instance를 활용한다.</p><ul><li>Web 접속 테스트는 리눅스의 curl 명령어를 통해 반복 작업과 지연 시간 체크를 한다.</li></ul><p><span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS9rby9ibG9ncy9uZXR3b3JraW5nLWFuZC1jb250ZW50LWRlbGl2ZXJ5L3RyYWZmaWMtbWFuYWdlbWVudC13aXRoLWF3cy1nbG9iYWwtYWNjZWxlcmF0b3Iv">Traffic management with AWS Global Accelerator | Amazon Web Services<i class="fa fa-external-link-alt"></i></span></p><p>참고링크: Global Accelerator Traffic Management</p><p>4.1.1) <code>서울</code> EC2-Instance에서 테스트</p><p>4.1.1-1) Web 접근 100회 반복 테스트 (Target GA Anycast IP)</p><ul><li><p>View Configuration</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..100&#125;; <span class="keyword">do</span> curl -s -q 75.2.44.82 ; <span class="keyword">done</span> | sort | uniq -c | sort -nr</span><br><span class="line">     50 &lt;h1&gt;CloudNeta Web Server_1 [Region= ap-southeast-2] &lt;/h1&gt;</span><br><span class="line">     50 &lt;h1&gt;CloudNeta Web Server_2 [Region= ap-southeast-2] &lt;/h1&gt;</span><br><span class="line">[root@ip-172-31-36-23 ec2-user]<span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li>100회 시험 결과 100% 모두 <code>시드니 (ap-southeast-2)</code>에 위치한 Web 서버로 접근</li></ul></li></ul><p>4.1.1-2) Web 지연 시간 10회 반복 테스트 (Target GA Anycast IP)</p><ul><li><p>View Configuration</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ((i=0;i&lt;10;i++)); <span class="keyword">do</span> curl -w <span class="string">"%&#123;time_total&#125;\n"</span> 75.2.44.82 ; <span class="keyword">done</span> ;</span><br><span class="line">&lt;h1&gt;CloudNeta Web Server_1 [Region= ap-southeast-2] &lt;/h1&gt;</span><br><span class="line">0.298549</span><br><span class="line">&lt;h1&gt;CloudNeta Web Server_2 [Region= ap-southeast-2] &lt;/h1&gt;</span><br><span class="line">0.300328</span><br><span class="line">&lt;h1&gt;CloudNeta Web Server_2 [Region= ap-southeast-2] &lt;/h1&gt;</span><br><span class="line">0.299850</span><br><span class="line">&lt;h1&gt;CloudNeta Web Server_1 [Region= ap-southeast-2] &lt;/h1&gt;</span><br><span class="line">0.298484</span><br><span class="line">&lt;h1&gt;CloudNeta Web Server_1 [Region= ap-southeast-2] &lt;/h1&gt;</span><br><span class="line">0.299389</span><br><span class="line">&lt;h1&gt;CloudNeta Web Server_2 [Region= ap-southeast-2] &lt;/h1&gt;</span><br><span class="line">0.299195</span><br><span class="line">&lt;h1&gt;CloudNeta Web Server_2 [Region= ap-southeast-2] &lt;/h1&gt;</span><br><span class="line">0.299922</span><br><span class="line">&lt;h1&gt;CloudNeta Web Server_1 [Region= ap-southeast-2] &lt;/h1&gt;</span><br><span class="line">0.300531</span><br><span class="line">&lt;h1&gt;CloudNeta Web Server_2 [Region= ap-southeast-2] &lt;/h1&gt;</span><br><span class="line">0.299018</span><br><span class="line">&lt;h1&gt;CloudNeta Web Server_2 [Region= ap-southeast-2] &lt;/h1&gt;</span><br><span class="line">0.300288</span><br><span class="line">[root@ip-172-31-36-23 ec2-user]<span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li>Web 서버 접근 지연 시간을 10회 반복 시 평균 0.3초 가량 소요 (10회 모두 <code>시드니</code>로 향함)</li></ul></li></ul><p>4.1.1-3) Traceroute 경로 확인 (Target 시드니 Region EC2-Instance)</p><ul><li><p>View Configuration</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">traceroute -I 13.239.18.205</span><br><span class="line">traceroute to 13.239.18.205 (13.239.18.205), 30 hops max, 60 byte packets</span><br><span class="line"> 1  * * *</span><br><span class="line"> 2  * * *</span><br><span class="line"> 3  * * *</span><br><span class="line"> 4  * * *</span><br><span class="line"> 5  * * *</span><br><span class="line"> 6  100.65.11.1 (100.65.11.1)  2.153 ms  9.538 ms  4.807 ms</span><br><span class="line"> 7  54.239.122.39 (54.239.122.39)  1.893 ms  1.922 ms  1.848 ms</span><br><span class="line"> 8  54.239.122.244 (54.239.122.244)  2.705 ms  2.776 ms  2.790 ms</span><br><span class="line"> 9  54.239.122.235 (54.239.122.235)  1.989 ms  1.947 ms  1.949 ms</span><br><span class="line">10  52.93.134.2 (52.93.134.2)  152.098 ms  148.786 ms  148.490 ms</span><br><span class="line">11  54.239.43.246 (54.239.43.246)  148.300 ms  148.447 ms  148.310 ms</span><br><span class="line">12  52.95.37.70 (52.95.37.70)  150.962 ms  149.034 ms  149.132 ms</span><br><span class="line">13  150.222.112.215 (150.222.112.215)  149.895 ms  148.703 ms  148.656 ms</span><br><span class="line">14  150.222.112.216 (150.222.112.216)  149.277 ms  149.290 ms  149.482 ms</span><br><span class="line">15  52.95.37.91 (52.95.37.91)  149.298 ms  148.914 ms  149.624 ms</span><br><span class="line">16  150.222.112.18 (150.222.112.18)  153.129 ms  149.476 ms  148.866 ms</span><br><span class="line">17  * * *</span><br><span class="line">18  * * *</span><br><span class="line">19  * * *</span><br><span class="line">20  * * *</span><br><span class="line">21  * * *</span><br><span class="line">22  * * *</span><br><span class="line">23  * * *</span><br><span class="line">24  * * *</span><br><span class="line">25  * * *</span><br><span class="line">26  * * *</span><br><span class="line">27  * * *</span><br><span class="line">28  * * *</span><br><span class="line">29  * * *</span><br><span class="line">30  * * *</span><br><span class="line">[root@ip-172-31-36-23 ec2-user]<span class="comment">#</span></span><br></pre></td></tr></table></figure></li></ul><p>4.1.1-4) Traceroute 경로 확인 (Target GA Anycast IP)</p><ul><li><p>View Configuration</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">traceroute -I 75.2.44.82</span><br><span class="line">traceroute to 75.2.44.82 (75.2.44.82), 30 hops max, 60 byte packets</span><br><span class="line"> 1  * * *</span><br><span class="line"> 2  * * *</span><br><span class="line"> 3  * * *</span><br><span class="line"> 4  * * *</span><br><span class="line"> 5  * * *</span><br><span class="line"> 6  100.65.8.161 (100.65.8.161)  1.184 ms  0.275 ms  0.261 ms</span><br><span class="line"> 7  54.239.122.43 (54.239.122.43)  0.604 ms  0.651 ms  0.630 ms</span><br><span class="line"> 8  54.239.122.68 (54.239.122.68)  1.121 ms  1.590 ms  1.117 ms</span><br><span class="line"> 9  a848faec6df617b94.awsglobalaccelerator.com (75.2.44.82)  0.268 ms  0.256 ms  0.265 ms</span><br><span class="line">[root@ip-172-31-36-23 ec2-user]<span class="comment">#</span></span><br></pre></td></tr></table></figure></li><li><p>목적지 Target에 따른 Traceroute 비교 (1-3항 vs 1-4항)</p></li></ul><p>a) Global Accelerator 미사용</p><p>b) Global Accelerator 사용</p><p><img src="/images/LabGuide-AWS-Global-Accelerator/Untitled8.png" alt="LabGuide%20AWS%20Global%20Accelerator%2086f3714d71d24b4c940958dfd90b2d52/Untitled%208.png"></p><p>그림 출처: <span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS9rby9nbG9iYWwtYWNjZWxlcmF0b3IvP2Jsb2dzLWdsb2JhbC1hY2NlbGVyYXRvci5zb3J0LWJ5PWl0ZW0uYWRkaXRpb25hbEZpZWxkcy5jcmVhdGVkRGF0ZSZibG9ncy1nbG9iYWwtYWNjZWxlcmF0b3Iuc29ydC1vcmRlcj1kZXNjJmF3cy1nbG9iYWwtYWNjZWxlcmF0b3Itd24uc29ydC1ieT1pdGVtLmFkZGl0aW9uYWxGaWVsZHMucG9zdERhdGVUaW1lJmF3cy1nbG9iYWwtYWNjZWxlcmF0b3Itd24uc29ydC1vcmRlcj1kZXNj">AWS Global Accelerator 개요<i class="fa fa-external-link-alt"></i></span></p><ul><li>서비스를 위해 수많은 네트워크를 거쳐가며, 각 Hop은 성능에 영향을 주며 위험을 초래할 수 있다.</li></ul><p><img src="/images/LabGuide-AWS-Global-Accelerator/Untitled9.png" alt="LabGuide%20AWS%20Global%20Accelerator%2086f3714d71d24b4c940958dfd90b2d52/Untitled%209.png"></p><p>그림 출처: <span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS9rby9nbG9iYWwtYWNjZWxlcmF0b3IvP2Jsb2dzLWdsb2JhbC1hY2NlbGVyYXRvci5zb3J0LWJ5PWl0ZW0uYWRkaXRpb25hbEZpZWxkcy5jcmVhdGVkRGF0ZSZibG9ncy1nbG9iYWwtYWNjZWxlcmF0b3Iuc29ydC1vcmRlcj1kZXNjJmF3cy1nbG9iYWwtYWNjZWxlcmF0b3Itd24uc29ydC1ieT1pdGVtLmFkZGl0aW9uYWxGaWVsZHMucG9zdERhdGVUaW1lJmF3cy1nbG9iYWwtYWNjZWxlcmF0b3Itd24uc29ydC1vcmRlcj1kZXNj">AWS Global Accelerator 개요<i class="fa fa-external-link-alt"></i></span></p><ul><li>AWS Global Accelerator를 추가하면 AWS 글로벌 네트워크를 활용하므로 성능이 개선 및 효율적인 통신을 보장한다.</li></ul><br><p>4.1.2) <code>버지니아</code> EC2-Instance에서 테스트</p><p>4.1.2-1) Web 접근 100회 반복 테스트 (Target GA Anycast IP)</p><ul><li><p>View Configuration</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..100&#125;; <span class="keyword">do</span> curl -s -q 75.2.44.82 ; <span class="keyword">done</span> | sort | uniq -c | sort -nr</span><br><span class="line">     51 &lt;h1&gt;CloudNeta Web Server_2 [Region= sa-east-1] &lt;/h1&gt;</span><br><span class="line">     49 &lt;h1&gt;CloudNeta Web Server_1 [Region= sa-east-1] &lt;/h1&gt;</span><br><span class="line">[root@ip-172-31-82-0 ec2-user]<span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li>100회 시험 결과 100% 모두 <code>상파울루 (sa-east-1)</code>에 위치한 Web 서버로 접근</li></ul></li></ul><p>4.1.2-2) Web 지연 시간 10회 반복 테스트 (Target GA Anycast IP)</p><ul><li><p>View Configuration</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ((i=0;i&lt;10;i++)); <span class="keyword">do</span> curl -w <span class="string">"%&#123;time_total&#125;\n"</span> 75.2.44.82 ; <span class="keyword">done</span> ;</span><br><span class="line">&lt;h1&gt;CloudNeta Web Server_2 [Region= sa-east-1] &lt;/h1&gt;</span><br><span class="line">0.227008</span><br><span class="line">&lt;h1&gt;CloudNeta Web Server_1 [Region= sa-east-1] &lt;/h1&gt;</span><br><span class="line">0.227156</span><br><span class="line">&lt;h1&gt;CloudNeta Web Server_2 [Region= sa-east-1] &lt;/h1&gt;</span><br><span class="line">0.225631</span><br><span class="line">&lt;h1&gt;CloudNeta Web Server_1 [Region= sa-east-1] &lt;/h1&gt;</span><br><span class="line">0.227213</span><br><span class="line">&lt;h1&gt;CloudNeta Web Server_1 [Region= sa-east-1] &lt;/h1&gt;</span><br><span class="line">0.224898</span><br><span class="line">&lt;h1&gt;CloudNeta Web Server_2 [Region= sa-east-1] &lt;/h1&gt;</span><br><span class="line">0.225725</span><br><span class="line">&lt;h1&gt;CloudNeta Web Server_2 [Region= sa-east-1] &lt;/h1&gt;</span><br><span class="line">0.225744</span><br><span class="line">&lt;h1&gt;CloudNeta Web Server_2 [Region= sa-east-1] &lt;/h1&gt;</span><br><span class="line">0.226330</span><br><span class="line">&lt;h1&gt;CloudNeta Web Server_1 [Region= sa-east-1] &lt;/h1&gt;</span><br><span class="line">0.227288</span><br><span class="line">&lt;h1&gt;CloudNeta Web Server_1 [Region= sa-east-1] &lt;/h1&gt;</span><br><span class="line">0.226509</span><br><span class="line">[root@ip-172-31-82-0 ec2-user]<span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li>Web 서버 접근 지연 시간을 10회 반복 시 평균 0.22초 가량 소요 (10회 모두 <code>상파울루</code>로 향함)</li></ul></li></ul><p>4.1.2-3) Traceroute 경로 확인 (Target GA Anycast IP)</p><ul><li><p>View Configuration</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">traceroute -I 75.2.44.82</span><br><span class="line">traceroute to 75.2.44.82 (75.2.44.82), 30 hops max, 60 byte packets</span><br><span class="line"> 1  216.182.238.211 (216.182.238.211)  1.183 ms  1.183 ms  1.181 ms</span><br><span class="line"> 2  * * *</span><br><span class="line"> 3  * * *</span><br><span class="line"> 4  * * *</span><br><span class="line"> 5  * * *</span><br><span class="line"> 6  * * *</span><br><span class="line"> 7  100.65.12.65 (100.65.12.65)  0.323 ms  0.324 ms  0.299 ms</span><br><span class="line"> 8  52.93.28.239 (52.93.28.239)  0.530 ms  0.485 ms  0.431 ms</span><br><span class="line"> 9  100.100.10.28 (100.100.10.28)  0.595 ms  1.151 ms  1.033 ms</span><br><span class="line">10  100.95.2.131 (100.95.2.131)  20.297 ms  83.331 ms  69.912 ms</span><br><span class="line">11  a848faec6df617b94.awsglobalaccelerator.com (75.2.44.82)  0.432 ms  0.488 ms  0.446 ms</span><br><span class="line">[root@ip-172-31-82-0 ec2-user]<span class="comment">#</span></span><br></pre></td></tr></table></figure></li></ul><br><p>4.1.3) Web 접속 흐름</p><p><img src="/images/LabGuide-AWS-Global-Accelerator/Untitled10.png" alt="LabGuide%20AWS%20Global%20Accelerator%2086f3714d71d24b4c940958dfd90b2d52/Untitled%2010.png"></p><p>그림 4-1 리전 별 User에서 Web 서버로 접근 시 논리적인 흐름</p><ul><li>User에서 가장 가까운 Edge Location으로 트래픽이 전송한다. (Target: Anycast IP 사용)</li><li>AWS 글로벌 네트워크를 통해 최적의 EndPoint Group으로 전송하여 서비스한다.</li><li>예를 들어 한국에서 접근하는 사용자는 인접한 Edge Location으로 Web 접근 요청을 보내고,  Edge Location에서 가장 가깝고 Healthy한 EndPoint Group인 <code>시드니 (ap-southeast-2)</code>로 AWS 글로벌 네트워크를 통해 서비스한다.</li></ul><br><h3 id="4-2-Traffic-Dial-amp-Weight-조정-Test"><a href="#4-2-Traffic-Dial-amp-Weight-조정-Test" class="headerlink" title="4.2 Traffic Dial &amp; Weight 조정 Test"></a>4.2 Traffic Dial &amp; Weight 조정 Test</h3><ul><li>Traffic Dial은 EndPoint Group에 대한 트래픽 수용력이며, Weight는 EndPoint 별 트래픽 전송 가중치이다.</li></ul><p>4.2.1) Traffic Dial 조정</p><ul><li><p>현재 EndPoint Group의 Traffic Dial은 100%로 설정되어 모든 트래픽을 수용하고 있다.</p><p>  즉, <code>서울</code> —&gt; <code>시드니</code> 100%, <code>버지니아</code> —&gt; <code>상파울루</code> 100%</p></li></ul><p>4.2.1-1) Traffic Dial: <code>시드니</code> 50%, <code>상파울루</code> 100% (<code>서울</code> 에서 테스트)</p><ul><li>Accelerator 선택 —&gt; Listener 선택 후 view detail —&gt; endpoint group을 선택 후 edit</li></ul><p><img src="/images/LabGuide-AWS-Global-Accelerator/Untitled11.png" alt="LabGuide%20AWS%20Global%20Accelerator%2086f3714d71d24b4c940958dfd90b2d52/Untitled%2011.png"></p><p>그림 4-2 시드니 EndPoint Group의 Traffic Dial을 50%로 조정</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..100&#125;; <span class="keyword">do</span> curl -s -q 75.2.44.82 ; <span class="keyword">done</span> | sort | uniq -c | sort -nr</span><br><span class="line">     27 &lt;h1&gt;CloudNeta Web Server_2 [Region= ap-southeast-2] &lt;/h1&gt;</span><br><span class="line">     27 &lt;h1&gt;CloudNeta Web Server_1 [Region= ap-southeast-2] &lt;/h1&gt;</span><br><span class="line">     23 &lt;h1&gt;CloudNeta Web Server_2 [Region= sa-east-1] &lt;/h1&gt;</span><br><span class="line">     23 &lt;h1&gt;CloudNeta Web Server_1 [Region= sa-east-1] &lt;/h1&gt;</span><br><span class="line">[root@ip-172-31-36-23 ec2-user]<span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li>한국 사용자 기준으로 약 50%정도는 <code>시드니(ap-southeast-2)</code>에서 처리되고 나머지는 <code>상파울루(sa-east-1)</code>에서 처리된다.</li></ul><p>4.2.1-2) Traffic Dial: <code>시드니</code> 0%, <code>상파울루</code> 100% (<code>서울</code> 에서 테스트)</p><p><img src="/images/LabGuide-AWS-Global-Accelerator/Untitled12.png" alt="LabGuide%20AWS%20Global%20Accelerator%2086f3714d71d24b4c940958dfd90b2d52/Untitled%2012.png"></p><p>그림 4-3 시드니 EndPoint Group의 Traffic Dial을 0%로 조정</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..100&#125;; <span class="keyword">do</span> curl -s -q 75.2.44.82 ; <span class="keyword">done</span> | sort | uniq -c | sort -nr</span><br><span class="line">     50 &lt;h1&gt;CloudNeta Web Server_2 [Region= sa-east-1] &lt;/h1&gt;</span><br><span class="line">     50 &lt;h1&gt;CloudNeta Web Server_1 [Region= sa-east-1] &lt;/h1&gt;</span><br><span class="line">[root@ip-172-31-36-23 ec2-user]<span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li>한국 사용자 기준으로 100% 모두 <code>상파울루(sa-east-1)</code>에서 처리된다. (비록 사용자 입장에서 <code>시드니</code>가 인접해 있지만 Traffic Dial이 0% 이기 때문에)</li><li>테스트 완료 후 Traffic Dial 값 원상 복구 (100%)</li></ul><blockquote><p>💡 Traffic Dial 0%는 언제 사용할까?<br>Traffic Dial 0% 설정은 Region 내에서 응용 프로그램을 업그레이드하거나 유지 관리가 필요할때, 먼저 Traffic Dial을 0%으로 설정하여 트래픽을 차단한다. 작업을 완료하고 다시 사용할 준비가 되면, Traffic Dial을 100으로 조정하여 트래픽을 다시 수용한다.</p></blockquote><br><p>4.2.2) Weight 조정</p><ul><li><p>현재 상파울루 EndPoint Group의 2개의 EndPoint의 Weight 값은 각각 128로 동일한 비중을 설정하고 있다.</p></li><li><p>Weight에 대한 트래픽 처리 공식은 아래와 같다. (<code>자신의 Weight</code> / <code>전체 Weight 합</code>)</p><p>  즉, EndPoint#1 계산값: 128 / (128+128) = 1/2, EndPoint#2 계산값: 128 / (128+128) = 1/2</p></li></ul><p>4.2.2-1) <code>상파울루</code> EndPoint#1 Weight: 64, <code>상파울루</code> EndPoint#2 Weight: 128 (<code>버지니아</code> 에서 테스트)</p><p><img src="/images/LabGuide-AWS-Global-Accelerator/Untitled13.png" alt="LabGuide%20AWS%20Global%20Accelerator%2086f3714d71d24b4c940958dfd90b2d52/Untitled%2013.png"></p><p>그림 4-4 상파울루 EndPoint Group의 EndPoint#1의 Weight 값을 64로 조정</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..100&#125;; <span class="keyword">do</span> curl -s -q 75.2.44.82 ; <span class="keyword">done</span> | sort | uniq -c | sort -nr</span><br><span class="line">     67 &lt;h1&gt;CloudNeta Web Server_2 [Region= sa-east-1] &lt;/h1&gt;</span><br><span class="line">     33 &lt;h1&gt;CloudNeta Web Server_1 [Region= sa-east-1] &lt;/h1&gt;</span><br><span class="line">[root@ip-172-31-95-200 ec2-user]<span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li>계산을 해보면 EP#1 = 64 / (64+128) = 1/3 이고, EP#2 = 128 / (64+128) = 2/3 이다.</li></ul><p>4.2.2-2) <code>상파울루</code> EndPoint#1 Weight: 0, <code>상파울루</code> EndPoint#2 Weight: 128 (<code>버지니아</code> 에서 테스트)</p><p><img src="/images/LabGuide-AWS-Global-Accelerator/Untitled14.png" alt="LabGuide%20AWS%20Global%20Accelerator%2086f3714d71d24b4c940958dfd90b2d52/Untitled%2014.png"></p><p>그림 4-5 상파울루 EndPoint Group의 EndPoint#1의 Weight 값을 0으로 조정</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..100&#125;; <span class="keyword">do</span> curl -s -q 75.2.44.82 ; <span class="keyword">done</span> | sort | uniq -c | sort -nr</span><br><span class="line">    100 &lt;h1&gt;CloudNeta Web Server_2 [Region= sa-east-1] &lt;/h1&gt;</span><br><span class="line">[root@ip-172-31-95-200 ec2-user]<span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li>EP#1의 Weight가 0이므로 트래픽이 전달되지 않고 EP#2로 모두 전달된다.</li><li>테스트 완료 후 Weight 값 원상 복구 (128)</li></ul><blockquote><p>💡 Traffic Dial 값을 조정하여 EndPoint Group의 트래픽 처리 비중을 조절할 수 있으며,<br>Weight 값을 조정하여 EndPoint의 트래픽 처리 비중을 조절할 수 있다.</p></blockquote><br><h3 id="4-3-Client-Affinity-Test"><a href="#4-3-Client-Affinity-Test" class="headerlink" title="4.3 Client Affinity Test"></a>4.3 Client Affinity Test</h3><ul><li>AWS Global Accelerator에서 특정 Source IP 주소의 사용자 요청을 동일한 EndPoint 자원으로 보내 접속 선호도를 유지하도록 선택할 수 있다.</li></ul><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2dsb2JhbC1hY2NlbGVyYXRvci9sYXRlc3QvZGcvYWJvdXQtbGlzdGVuZXJzLmh0bWwjYWJvdXQtbGlzdGVuZXJzLWNsaWVudC1hZmZpbml0eQ==">Listeners in AWS Global Accelerator<i class="fa fa-external-link-alt"></i></span></p><p><img src="/images/LabGuide-AWS-Global-Accelerator/Untitled15.png" alt="LabGuide%20AWS%20Global%20Accelerator%2086f3714d71d24b4c940958dfd90b2d52/Untitled%2015.png"></p><p>그림 4-6 Listener에서 Client Affinity 설정을 Source IP로 변경</p><ul><li><p>GA에서 생성한 Listener를 Edit하여 Client Affinity를 None에서 Source IP로 수정한다.</p><p>  즉, Source IP 기준으로 특정 EndPoint 대상으로 지속적인 연결을 보장한다. (마치 Sticky Session)</p></li><li><p>Test Target은 2개의 EndPoint가 존재하는 <code>상파울루</code>로 향하도록 한다.</p></li></ul><p>4.3.1) <code>버지니아</code>에서 Web 접속</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..100&#125;; <span class="keyword">do</span> curl -s -q 75.2.44.82 ; <span class="keyword">done</span> | sort | uniq -c | sort -nr</span><br><span class="line">    100 &lt;h1&gt;CloudNeta Web Server_1 [Region= sa-east-1] &lt;/h1&gt;</span><br><span class="line">[root@ip-172-31-95-200 ec2-user]<span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li><code>상파울루</code>에서 하나의 EndPoint로만 접속이 이루어 진다. (EP#1 - Web Server_1)</li></ul><p>4.3.2) <code>서울</code>에서 Web 접속</p><ul><li><code>서울</code>에서 접속 시 <code>시드니</code> Web Server로만 접속되므로, Traffic Dial을 0으로 조정하여 <code>상파울루</code>로 향하게 설정한 후 테스트 한다.</li></ul><p><img src="/images/LabGuide-AWS-Global-Accelerator/Untitled12.png" alt="LabGuide%20AWS%20Global%20Accelerator%2086f3714d71d24b4c940958dfd90b2d52/Untitled%2012.png"></p><p>그림 4-7 시드니 EndPoint Group의 Traffic Dial을 0%로 조정</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..100&#125;; <span class="keyword">do</span> curl -s -q 75.2.44.82 ; <span class="keyword">done</span> | sort | uniq -c | sort -nr</span><br><span class="line">    100 &lt;h1&gt;CloudNeta Web Server_2 [Region= sa-east-1] &lt;/h1&gt;</span><br><span class="line">[root@ip-172-31-37-218 ec2-user]<span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li><code>상파울루</code>에서 하나의 EndPoint로만 접속이 이루어 진다. (EP#2 - Web Server_2)</li><li>테스트 완료 후 Traffic Dial과 Client Affinity 값 복구</li></ul><br><h3 id="4-4-Preserve-Client-IP-Test"><a href="#4-4-Preserve-Client-IP-Test" class="headerlink" title="4.4 Preserve Client IP Test"></a>4.4 Preserve Client IP Test</h3><ul><li><p>AWS Global Accelerator의 추가된 기능으로 Client IP 주소를 유지하여 보존하는 기능이다.</p></li><li><p>EndPoint 별 Client IP 보존 기능</p><ul><li><p>EC2 : 항상 활성화</p></li><li><p>ALB : 선택 가능 (활성화/비활성화)</p></li><li><p>EIP, NLB : 항상 비활성화</p></li></ul></li></ul><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2dsb2JhbC1hY2NlbGVyYXRvci9sYXRlc3QvZGcvcHJlc2VydmUtY2xpZW50LWlwLWFkZHJlc3MuaHRtbA==">Preserve Client IP Addresses in AWS Global Accelerator<i class="fa fa-external-link-alt"></i></span></p><p>참고링크 : 클라이언트 IP 보존 관련 문서</p><p>4.4.1) EC2 EndPoint 대상 Client IP 보존 (<code>상파울루</code>)</p><p><img src="/images/LabGuide-AWS-Global-Accelerator/Untitled16.png" alt="LabGuide%20AWS%20Global%20Accelerator%2086f3714d71d24b4c940958dfd90b2d52/Untitled%2016.png"><br>그림 4-8 EC2 EndPoint Type에서 Client IP 보존 상태 (활성화)</p><ul><li>EndPoint 타입이 EC2 일 경우  Client IP 보존 기능은 항상 활성화 상태이다.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..100&#125;; <span class="keyword">do</span> curl -s -q 75.2.44.82 ; <span class="keyword">done</span> | sort | uniq -c | sort -nr</span><br><span class="line">     54 &lt;h1&gt;CloudNeta Web Server_1 [Region= sa-east-1] &lt;/h1&gt;</span><br><span class="line">     46 &lt;h1&gt;CloudNeta Web Server_2 [Region= sa-east-1] &lt;/h1&gt;</span><br><span class="line">[root@ip-172-31-95-200 ec2-user]<span class="comment">#</span></span><br><span class="line"></span><br><span class="line">curl ifconfig.me</span><br><span class="line">54.163.161.100</span><br><span class="line">[root@ip-172-31-95-200 ec2-user]<span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li><code>버지니아</code>에서 GA Anycast IP 타겟으로 Web 접근 시도 및 자신의 공인 IP 확인</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tail -f /var/<span class="built_in">log</span>/httpd/access_log</span><br><span class="line">:</span><br><span class="line">54.163.161.100 - - [05/May/2020:03:31:23 +0000] <span class="string">"GET / HTTP/1.1"</span> 200 53 <span class="string">"-"</span> <span class="string">"curl/7.61.1"</span></span><br><span class="line">54.163.161.100 - - [05/May/2020:03:31:24 +0000] <span class="string">"GET / HTTP/1.1"</span> 200 53 <span class="string">"-"</span> <span class="string">"curl/7.61.1"</span></span><br><span class="line">54.163.161.100 - - [05/May/2020:03:31:24 +0000] <span class="string">"GET / HTTP/1.1"</span> 200 53 <span class="string">"-"</span> <span class="string">"curl/7.61.1"</span></span><br><span class="line">:</span><br><span class="line">[root@ip-10-0-1-252 ec2-user]<span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li><code>상파울루</code> Web 서버에서 HTTP 로그를 확인해 보면 Client IP (<code>버지니아</code>)가 보존되어 그대로 인입되는 것을 확인할 수 있다.</li></ul><br><p>4.4.2) ALB EndPoint 대상 Client IP 보존 (<code>시드니</code>)</p><ul><li>EndPoint 타입이 ALB 일 경우  Client IP 보존 기능은 선택할 수 있다. (활성화/비활성화)</li><li>ALB Backend에 존재하는 EC2에서  Client IP 주소를 확인하려면 <code>X-Forwarded-For 헤더</code>를 사용하여 캡쳐해야 한다.</li></ul><p><span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS9rby9wcmVtaXVtc3VwcG9ydC9rbm93bGVkZ2UtY2VudGVyL2VsYi1jYXB0dXJlLWNsaWVudC1pcC1hZGRyZXNzZXMv">ELB 액세스 로그에서 클라이언트 IP 주소 캡처<i class="fa fa-external-link-alt"></i></span></p><p>참고링크 : ELB 엑세스 로그에서 클라이언트 IP 주소 확인</p><p>4.4.2.1) Client IP 보존 활성화</p><p><img src="/images/LabGuide-AWS-Global-Accelerator/Untitled17.png" alt="LabGuide%20AWS%20Global%20Accelerator%2086f3714d71d24b4c940958dfd90b2d52/Untitled%2017.png"><br>그림 4-9 ALB EndPoint Type에서 Client IP 보존 상태 (활성화)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/httpd/conf/httpd.conf</span><br><span class="line">:</span><br><span class="line">LogFormat <span class="string">"%&#123;X-Forwarded-For&#125;i %h %l %u %t \"%r\" %&gt;s %b \"%&#123;Referer&#125;i\" \"%&#123;User-Agent&#125;i\""</span> combined</span><br><span class="line">LogFormat <span class="string">"%h %l %u %t \"%r\" %&gt;s %b"</span> common</span><br><span class="line">:</span><br><span class="line">[root@ip-10-0-0-211 ec2-user]<span class="comment"># service httpd reload</span></span><br><span class="line">Reloading httpd:</span><br><span class="line">[root@ip-10-0-0-211 ec2-user]<span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li><code>시드니</code> Web 서버에서 /etc/httpd/conf/httpd.conf 파일의 LogFormat 섹션에서 위 내용을 추가 한다. (http 데몬 reload)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..100&#125;; <span class="keyword">do</span> curl -s -q 75.2.44.82 ; <span class="keyword">done</span> | sort | uniq -c | sort -nr</span><br><span class="line">     50 &lt;h1&gt;CloudNeta Web Server_2 [Region= ap-southeast-2] &lt;/h1&gt;</span><br><span class="line">     50 &lt;h1&gt;CloudNeta Web Server_1 [Region= ap-southeast-2] &lt;/h1&gt;</span><br><span class="line">[ec2-user@ip-172-31-37-218 ~]$</span><br><span class="line"></span><br><span class="line">curl ifconfig.me</span><br><span class="line">15.164.93.22</span><br><span class="line">[ec2-user@ip-172-31-37-218 ~]$</span><br></pre></td></tr></table></figure><ul><li><code>서울</code> 에서 GA Anycast IP 타겟으로 Web 접근 시도 및 자신의 공인 IP 확인</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tail -f /var/<span class="built_in">log</span>/httpd/access_log</span><br><span class="line">:</span><br><span class="line">15.164.93.22 10.0.1.18 - - [05/May/2020:04:13:05 +0000] <span class="string">"GET / HTTP/1.1"</span> 200 58 <span class="string">"-"</span> <span class="string">"curl/7.61.1"</span></span><br><span class="line">15.164.93.22 10.0.0.76 - - [05/May/2020:04:13:05 +0000] <span class="string">"GET / HTTP/1.1"</span> 200 58 <span class="string">"-"</span> <span class="string">"curl/7.61.1"</span></span><br><span class="line">15.164.93.22 10.0.0.76 - - [05/May/2020:04:13:06 +0000] <span class="string">"GET / HTTP/1.1"</span> 200 58 <span class="string">"-"</span> <span class="string">"curl/7.61.1"</span></span><br><span class="line">:</span><br><span class="line">[root@ip-10-0-0-211 ec2-user]<span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li><code>시드니</code> Web 서버에서 HTTP 로그를 확인해 보면 Client IP (<code>서울</code>)가 보존되어 그대로 인입되는 것을 확인할 수 있다.</li></ul><p>4.4.2.2) Client IP 보존 비활성화</p><p><img src="/images/LabGuide-AWS-Global-Accelerator/Untitled18.png" alt="LabGuide%20AWS%20Global%20Accelerator%2086f3714d71d24b4c940958dfd90b2d52/Untitled%2018.png"><br>그림 4-10 ALB EndPoint Type에서 Client IP 보존 설정 변경 (비활성화)</p><ul><li><code>시드니</code>의 ALB EndPoint Type을 Edit하여 Preserve Client IP address 체크를 해제한다. (Client IP 보존 비활성화)</li><li>Global Accelerator 가 재시동 되어 약간의 대기가 필요하다.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..100&#125;; <span class="keyword">do</span> curl -s -q 75.2.44.82 ; <span class="keyword">done</span> | sort | uniq -c | sort -nr</span><br><span class="line">     50 &lt;h1&gt;CloudNeta Web Server_2 [Region= ap-southeast-2] &lt;/h1&gt;</span><br><span class="line">     50 &lt;h1&gt;CloudNeta Web Server_1 [Region= ap-southeast-2] &lt;/h1&gt;</span><br><span class="line">[ec2-user@ip-172-31-37-218 ~]$</span><br><span class="line"></span><br><span class="line">curl ifconfig.me</span><br><span class="line">15.164.93.22</span><br><span class="line">[ec2-user@ip-172-31-37-218 ~]$</span><br></pre></td></tr></table></figure><ul><li><code>서울</code> 에서 GA Anycast IP 타겟으로 Web 접근 시도 및 자신의 공인 IP 확인</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tail -f /var/<span class="built_in">log</span>/httpd/access_log</span><br><span class="line">:</span><br><span class="line">99.82.168.137 10.0.0.76 - - [05/May/2020:04:24:21 +0000] <span class="string">"GET / HTTP/1.1"</span> 200 58 <span class="string">"-"</span> <span class="string">"curl/7.61.1"</span></span><br><span class="line">99.82.168.139 10.0.1.18 - - [05/May/2020:04:24:22 +0000] <span class="string">"GET / HTTP/1.1"</span> 200 58 <span class="string">"-"</span> <span class="string">"curl/7.61.1"</span></span><br><span class="line">99.82.168.137 10.0.0.76 - - [05/May/2020:04:24:23 +0000] <span class="string">"GET / HTTP/1.1"</span> 200 58 <span class="string">"-"</span> <span class="string">"curl/7.61.1"</span></span><br><span class="line">[root@ip-10-0-0-211 ec2-user]<span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li><code>시드니</code> Web 서버에서 HTTP 로그를 확인해 보면 Client IP (<code>서울</code>)가 보존되지 않고, GA에서 사용하는 내부 주소 대역이 Source IP로 들어 온다.</li></ul><blockquote><p>💡 Client IP 보존 기능을 사용하면?<br>IP 별 필터링을 수월하게 수행할 수 있고, 특정 IP마다 제공 컨텐츠 분류하거나 통계 정보 활용에 유용하다.</p></blockquote><br><h3 id="4-5-Failover-Test"><a href="#4-5-Failover-Test" class="headerlink" title="4.5 Failover Test"></a>4.5 Failover Test</h3><ul><li><code>시드니(ap-southeast-2)</code>에 위치하는 Web 서버를 한대 씩 Stop 후 동작을 확인한다.</li><li>Client는 <code>서울</code>을 기준으로 한다.</li></ul><p>4.5.1) <code>시드니</code> Web 서버 1대 Stop</p><p><img src="/images/LabGuide-AWS-Global-Accelerator/Untitled19.png" alt="LabGuide%20AWS%20Global%20Accelerator%2086f3714d71d24b4c940958dfd90b2d52/Untitled%2019.png"><br>그림 4-11 시드니 Web Server 1대 중지</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..100&#125;; <span class="keyword">do</span> curl -s -q 75.2.44.82 ; <span class="keyword">done</span> | sort | uniq -c | sort -nr</span><br><span class="line">    100 &lt;h1&gt;CloudNeta Web Server_1 [Region= ap-southeast-2] &lt;/h1&gt;</span><br><span class="line">[root@ip-172-31-37-218 ec2-user]<span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li>ALB에 의하여 Load Balancing 되는 환경이라 다른 Web 서버가 모두 처리 해 준다.</li></ul><br><p>4.5.2) <code>시드니</code> Web 서버 모두 Stop</p><p><img src="/images/LabGuide-AWS-Global-Accelerator/Untitled20.png" alt="LabGuide%20AWS%20Global%20Accelerator%2086f3714d71d24b4c940958dfd90b2d52/Untitled%2020.png"><br>그림 4-12 시드니 나머지 Web Server 1대 중지 (전체 중지)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..100&#125;; <span class="keyword">do</span> curl -s -q 75.2.44.82 ; <span class="keyword">done</span> | sort | uniq -c | sort -nr</span><br><span class="line">     50 &lt;h1&gt;CloudNeta Web Server_2 [Region= sa-east-1] &lt;/h1&gt;</span><br><span class="line">     50 &lt;h1&gt;CloudNeta Web Server_1 [Region= sa-east-1] &lt;/h1&gt;</span><br><span class="line">[root@ip-172-31-37-218 ec2-user]<span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li><code>시드니(ap-southeast-2)</code>의 Web 서버 모든 자원이 Stop 되자 <code>상파울루(sa-east-1)</code>로 경로를 변경하여 모두 처리한다.</li></ul><br><p>4.5.3) Global Accelerator 상태 확인</p><p><img src="/images/LabGuide-AWS-Global-Accelerator/Untitled21.png" alt="LabGuide%20AWS%20Global%20Accelerator%2086f3714d71d24b4c940958dfd90b2d52/Untitled%2021.png"><br>그림 4-13 Lisener 상태 확인</p><ul><li>리스너의 상태를 확인해보면 <code>1 Unhealthy endpoints</code> 상태이다.</li></ul><p><img src="/images/LabGuide-AWS-Global-Accelerator/Untitled22.png" alt="LabGuide%20AWS%20Global%20Accelerator%2086f3714d71d24b4c940958dfd90b2d52/Untitled%2022.png"><br>그림 4-14 EndPoints Health Check 상태 확인</p><ul><li>Unhealthy 상태의 Endpoint를 확인할 수 있다.</li></ul><br><p>4.5.4) <code>시드니</code> Web 서버 모두 Start</p><p><img src="/images/LabGuide-AWS-Global-Accelerator/Untitled23.png" alt="LabGuide%20AWS%20Global%20Accelerator%2086f3714d71d24b4c940958dfd90b2d52/Untitled%2023.png"><br>그림 4-15 시드니 Web Server 모두 활성화</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..100&#125;; <span class="keyword">do</span> curl -s -q 75.2.44.82 ; <span class="keyword">done</span> | sort | uniq -c | sort -nr</span><br><span class="line">     46 &lt;h1&gt;CloudNeta Web Server_1 [Region= ap-southeast-2] &lt;/h1&gt;</span><br><span class="line">     44 &lt;h1&gt;CloudNeta Web Server_2 [Region= ap-southeast-2] &lt;/h1&gt;</span><br><span class="line">      5 &lt;h1&gt;CloudNeta Web Server_2 [Region= sa-east-1] &lt;/h1&gt;</span><br><span class="line">      5 &lt;h1&gt;CloudNeta Web Server_1 [Region= sa-east-1] &lt;/h1&gt;</span><br><span class="line">[root@ip-172-31-37-218 ec2-user]<span class="comment">#</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..100&#125;; <span class="keyword">do</span> curl -s -q 75.2.44.82 ; <span class="keyword">done</span> | sort | uniq -c | sort -nr</span><br><span class="line">     51 &lt;h1&gt;CloudNeta Web Server_2 [Region= ap-southeast-2] &lt;/h1&gt;</span><br><span class="line">     49 &lt;h1&gt;CloudNeta Web Server_1 [Region= ap-southeast-2] &lt;/h1&gt;</span><br><span class="line">[root@ip-172-31-37-218 ec2-user]<span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li>Health Check에 의하여 <code>시드니</code> 쪽 EndPoint Group이 Healthy 상태로 전환되기 까지 <code>상파울루</code>에서 처리하며, 이 후 <code>시드니</code>에서 모두 처리한다.</li></ul><p><img src="/images/LabGuide-AWS-Global-Accelerator/Untitled24.png" alt="LabGuide%20AWS%20Global%20Accelerator%2086f3714d71d24b4c940958dfd90b2d52/Untitled%2024.png"><br>그림 4-16 Lisener 상태 확인</p><ul><li>All Healthy 상태로 전환</li></ul><hr><br><h3 id="5-Delete-Infrastructure"><a href="#5-Delete-Infrastructure" class="headerlink" title="5. Delete Infrastructure"></a>5. Delete Infrastructure</h3><p>1) AWS Global Accelerator Disable</p><p>2) AWS Global Accelerator Delete</p><ul><li>AWS Global Accelerator에 대해 Delete 버튼을 누르고, Disable 후 Delete</li></ul><p>3) 시드니 CloudFormation Stack Delete</p><p>4) 상파울루 CloudFormation Stack Delete</p><p>5) 한국 EC2-Instance Shutdown</p><p>6) 버지니아 EC2-Instance Shutdown</p><blockquote><p>🔔 CloudFormation 스택을 삭제 시 일정 시간이 소요되는데, 너무 시간이 오래 걸린다면 수동으로 관련 인프라를 삭제해야 한다.<br>반드시, 실습을 위해 생성한 리소스는 삭제한다.</p></blockquote><br>]]></content:encoded>
      
      <comments>http://cloudneta.github.io/2020/05/06/Accelerator/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Route53 Geoproximity</title>
      <link>http://cloudneta.github.io/2020/05/06/Route53-Geoproximity/</link>
      <guid>http://cloudneta.github.io/2020/05/06/Route53-Geoproximity/</guid>
      <pubDate>Wed, 06 May 2020 03:49:11 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;em&gt;작성자 : gasida.cloudnet@&lt;/em&gt;&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><em>작성자 : gasida.cloudnet@</em></p><a id="more"></a><br><details><summary>AWS Document Route53</summary><div markdown="1"><ul><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2tvX2tyL1JvdXRlNTMvbGF0ZXN0L0RldmVsb3Blckd1aWRlL3JvdXRpbmctcG9saWN5Lmh0bWwjcm91dGluZy1wb2xpY3ktZ2VvcHJveGltaXR5">지리 근접 라우팅(트래픽 흐름 전용)<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2tvX2tyL1JvdXRlNTMvbGF0ZXN0L0RldmVsb3Blckd1aWRlL3RyYWZmaWMtZmxvdy5odG1s">트래픽 흐름을 사용하여 DNS 트래픽 라우팅<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly95b3V0dS5iZS82SU82aFc3eWcybw==">Youtube 1<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly95b3V0dS5iZS96eFNEUlBRUmQ1MA==">Youtube 2<i class="fa fa-external-link-alt"></i></span></li></ul></div></details><br><blockquote><p>💡 AWS 서비스 관련해서는 항상 최우선으로 ‘AWS 설명서’ 를 읽어보는 것을 추천한다. 한글 번역이 매끄럽지 못하면 English 로 변경 후 읽어보기를 바란다.</p></blockquote><hr><br><h3 id="1-Geoproximity-Routing-Policy"><a href="#1-Geoproximity-Routing-Policy" class="headerlink" title="1. Geoproximity Routing Policy"></a>1. Geoproximity Routing Policy</h3><ul><li>기본적인 동작은 Geolocation Policy 의 내용을 가져간다 - 위치기반, EDNS 지원 <span class="exturl" data-url="aHR0cHM6Ly93d3cubm90aW9uLnNvL0xhYkd1aWRlLVJvdXRlNTMtR2VvbG9jYXRpb24tMDRiOTZmMjdjNGUwNDllZmFmMTdkMzQ5ZjQ3ZmY5NzM=">LabGuide - Route53 Geolocation<i class="fa fa-external-link-alt"></i></span></li><li>사용자 위치(IP)와 리소스(타겟 서버 자원) 위치(IP)의 위도 경도를 기반으로 근접 영역 내로 라우팅<ul><li>EDNS Client Subnet 를 이용한 사용자 위치(IP) 기반 트래픽 라우팅 선택 가능<ul><li>EDNS 미 동작 시 Local DNS 서버의 위치(IP)를 기반함</li></ul></li></ul></li><li>Bias 를 사용하여 해당 리소스의 근접 영역(영향력)을 늘리거나 줄임</li></ul><p><img src="/images/Route53-Geoproximity/Untitled.png" alt="Route53%20Geoproximity%2071d2807e015f4272a1fd106310b3096c/Untitled.png"></p><p>3개의 리소스(타켓 엔드포인트)가 전부 Bias 0</p><br><p><img src="/images/Route53-Geoproximity/Untitled1.png" alt="Route53%20Geoproximity%2071d2807e015f4272a1fd106310b3096c/Untitled%201.png"></p><p>3번 리전(엔드포인트) Bias +25 영향력 올림</p><br><p><img src="/images/Route53-Geoproximity/Untitled2.png" alt="Route53%20Geoproximity%2071d2807e015f4272a1fd106310b3096c/Untitled%202.png"></p><p>3번 리전(엔드포인트) Bias -25 영향력 내림</p><br><ul><li><p>Custom Coordinates 리소스(타켓 서버 자원)의 위치를 직접 좌표(위도, 경도)를 입력 할 수 있음</p><p>  <img src="/images/Route53-Geoproximity/Untitled3.png" alt="Route53%20Geoproximity%2071d2807e015f4272a1fd106310b3096c/Untitled%203.png"></p></li></ul><hr><br><h3 id="2-Lab-Topology"><a href="#2-Lab-Topology" class="headerlink" title="2. Lab Topology"></a>2. Lab Topology</h3><p><strong>Lab 정보</strong></p><ul><li>Seoul 웹서버 : 13.124.1.104</li><li>Virginia 웹서버 : 18.206.155.179</li><li>gcp-seoul 단말 : 34.64.78.168</li><li>gcp-virginia 단말 : 35.186.188.100</li><li>gcp-london 단말 : 34.89.118.195<ul><li>bias 에 따라서 접속 리소스가 변경됨을 확인</li></ul></li></ul><hr><br><h3 id="3-Config-Geoproximity-Policy-amp-Verify"><a href="#3-Config-Geoproximity-Policy-amp-Verify" class="headerlink" title="3. Config Geoproximity Policy &amp; Verify"></a>3. Config Geoproximity Policy &amp; Verify</h3><ul><li><p>[Route53 - 트래픽 정책 생성]</p><ul><li><p>정책 이름 : geoproximity</p></li><li><p>버전 설명 : geoproximity test</p><ul><li><code>다음</code> 클릭</li></ul></li><li><p>시작 지점 : A: IPv4</p><ul><li><p><code>+</code> 연결 대상 클릭 → <code>지리 근접 규칙</code> 선택</p><ul><li><p>리전 <code>1</code></p><ul><li>엔드 포인트 위치 : 아시아 태평양(서울)</li><li><code>+</code> 연결 대상 클릭 → <code>새로운 엔드포인트</code> 선택<ul><li>유형 : 값</li><li>값 : 13.124.1.104</li></ul></li></ul></li><li><p>리전 <code>2</code></p><ul><li>엔드 포인트 위치 : 미국 동부(버지니아 북구)</li><li><code>+</code> 연결 대상 클릭 → <code>새로운 엔드포인트</code> 선택<ul><li>유형 : 값</li><li>값 : 18.206.155.179</li></ul></li></ul></li><li><p>지리 근접 맵 표시 우측에 <code>🏴</code> 클릭</p><p>  <img src="/images/Route53-Geoproximity/Untitled4.png" alt="Route53%20Geoproximity%2071d2807e015f4272a1fd106310b3096c/Untitled%204.png"></p><p>  런던 단말은 버지니아에 위치한 영향권에 있어서 버지니아 웹서버에 연결된다</p></li><li><p>하단 <code>트래픽 정책 생성</code> 클릭</p></li></ul></li></ul></li><li><p>트래픽 정책으로 정책 레코드 생성</p><ul><li>정책 레코드<ul><li>정책 레코드 DNS 이름 : geop1<ul><li>하단 <code>정책 레코드 생성</code> 클릭</li></ul></li></ul></li></ul></li></ul></li><li><p>단말 접속 확인 : 서울, 버지니아, 런던</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 런던 단말</span></span><br><span class="line">curl geop1.gasida.net</span><br><span class="line">&lt;html&gt;&lt;h1&gt;Hello from Web Server - Virgina Area&lt;/h1&gt;&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 버지니아 단말</span></span><br><span class="line">curl geop1.gasida.net</span><br><span class="line">&lt;html&gt;&lt;h1&gt;Hello from Web Server - Virgina Area&lt;/h1&gt;&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 서울 단말</span></span><br><span class="line">curl geop1.gasida.net</span><br><span class="line">&lt;html&gt;&lt;h1&gt;Hello from Web Server - Seoul Area&lt;/h1&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>Cloudwatch Log 에도 geop1 으로 DNS 쿼리 로그 확인</li></ul></li></ul><hr><br><h3 id="4-Geoproximity-Bias-Modify-amp-Verify"><a href="#4-Geoproximity-Bias-Modify-amp-Verify" class="headerlink" title="4. Geoproximity Bias Modify &amp; Verify"></a>4. Geoproximity Bias Modify &amp; Verify</h3><ul><li><p>[Route53 - 트래픽 정책] 클릭 → 하단에 버전 번호 <code>1</code> 클릭</p><ul><li><p>상단에 <code>새 버전으로 정책 편집</code> 클릭</p><ul><li><p>새 버전 설명 : geoproximity bias modify</p><ul><li>하단 <code>다음</code> 클릭</li></ul></li><li><p>지리 근접 맵 표시 우측에 <code>🏴</code> 클릭 → 아래 바이어스 입력 후 지도 변화 확인</p><ul><li><p>리전 <code>2</code></p><ul><li><p>바이어스 : -50</p><p>  <img src="/images/Route53-Geoproximity/Untitled5.png" alt="Route53%20Geoproximity%2071d2807e015f4272a1fd106310b3096c/Untitled%205.png"></p><p>  런던 단말은 서울에 위치한 영향권에 있어서 서울 웹서버에 연결된다</p><ul><li>하단에 <code>새 버전으로 저장</code> 클릭</li></ul></li></ul></li></ul></li><li><p>트래픽 정책으로 정책 레코드 생성</p><ul><li>정책 레코드<ul><li>정책 레코드 DNS 이름 : geop2<ul><li>하단 <code>정책 레코드 생성</code> 클릭</li></ul></li></ul></li></ul></li></ul></li></ul></li><li><p>단말 접속 확인 : 서울, 버지니아, 런던</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 런던 단말</span></span><br><span class="line">curl geop2.gasida.net</span><br><span class="line">&lt;html&gt;&lt;h1&gt;Hello from Web Server - Seoul Area&lt;/h1&gt;&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">## geop1 는 version 1 로 기존 geoproximity 정책이다</span></span><br><span class="line">curl geop1.gasida.net</span><br><span class="line">&lt;html&gt;&lt;h1&gt;Hello from Web Server - Virgina Area&lt;/h1&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>Cloudwatch Log 에도 geop2 으로 DNS 쿼리 로그 확인</li></ul></li></ul><hr><br><h3 id="5-Route-53-Policy-Delete"><a href="#5-Route-53-Policy-Delete" class="headerlink" title="5. Route 53 Policy Delete"></a>5. Route 53 Policy Delete</h3><ul><li>[Route53 - 정책 레코드] 정책 2개 선택 후 <code>정책 레코드 삭제</code></li><li>[Route53 - 트래픽 정책] 트래픽 정책 선택 후 <code>트래픽 정책 삭제</code></li><li>[Route53 - 호스팅 영역] 도메인 옆 ⚪️ 선택 후 우측에 <code>쿼리 로깅 삭제</code><ul><li>(버지니아 리전) [Cloudwatch - 로그그룹] aws/route53/도메인 선택 후 <code>작업 - 로그 그룹 삭제</code></li></ul></li></ul><br>]]></content:encoded>
      
      <comments>http://cloudneta.github.io/2020/05/06/Route53-Geoproximity/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Route53 Geolocation</title>
      <link>http://cloudneta.github.io/2020/05/06/Route53-Geolocation/</link>
      <guid>http://cloudneta.github.io/2020/05/06/Route53-Geolocation/</guid>
      <pubDate>Wed, 06 May 2020 03:02:10 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;em&gt;작성자 : gasida.cloudnet@&lt;/em&gt;&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><em>작성자 : gasida.cloudnet@</em></p><a id="more"></a><br><details><summary>AWS Document Route53</summary><div markdown="1"><ul><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2tvX2tyL1JvdXRlNTMvbGF0ZXN0L0RldmVsb3Blckd1aWRlL1dlbGNvbWUuaHRtbA==">Route53 설명서<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2tvX2tyL1JvdXRlNTMvbGF0ZXN0L0RldmVsb3Blckd1aWRlL3JlZ2lzdHJhci10bGQtbGlzdC5odG1s">Route53 등록 가능 도메인<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2tvX2tyL1JvdXRlNTMvbGF0ZXN0L0RldmVsb3Blckd1aWRlL3JvdXRpbmctcG9saWN5Lmh0bWw=">Route53 라우팅 정책<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2tvX2tyL1JvdXRlNTMvbGF0ZXN0L0RldmVsb3Blckd1aWRlL3JvdXRpbmctcG9saWN5Lmh0bWwjcm91dGluZy1wb2xpY3ktZWRuczA=">Amazon Route 53에서 EDNS0을 사용하여 사용자의 위치를 예측하는 방법<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS9rby9wcmVtaXVtc3VwcG9ydC9rbm93bGVkZ2UtY2VudGVyL3Ryb3VibGVzaG9vdC1yb3V0ZTUzLWdlb2xvY2F0aW9uLw==">Route53 점검방법1<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS9rby9wcmVtaXVtc3VwcG9ydC9rbm93bGVkZ2UtY2VudGVyL3Ryb3VibGVzaG9vdC1sYXRlbmN5LWJhc2VkLXJlY29yZHMv">Route53 점검방법2<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2tvX2tyL1JvdXRlNTMvbGF0ZXN0L0RldmVsb3Blckd1aWRlL3F1ZXJ5LWxvZ3MuaHRtbA==">Route53 쿼리 로깅 설정<i class="fa fa-external-link-alt"></i></span></li></ul></div></details><br><details><summary>DNS GeoLocation 및 기타</summary><div markdown="1"><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubmV0bWFuaWFzLmNvbS9rby9wb3N0L2Jsb2cvNTM1OS9ha2FtYWktY2RuLWRucy1nb29nbGUtbmV0d29yay1wcm90b2NvbC9hbnN3ZXItZ29vZ2xlLWRucy1ha2FtYWktY2Ru">DNS 와 CDN 의 동작<i class="fa fa-external-link-alt"></i></span> (넷매니아즈 2011)</li><li><span class="exturl" data-url="aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzc4NzE=">RFC 7871 - Client Subnet in DNS Queries<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20va28ta3Ivd2luZG93cy1zZXJ2ZXIvbmV0d29ya2luZy9kbnMvZGVwbG95L3ByaW1hcnktZ2VvLWxvY2F0aW9u">Windows DNS - 위치기반<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cudGVjbWludC5jb20vZmluZC1saW51eC1zZXJ2ZXItZ2VvZ3JhcGhpYy1sb2NhdGlvbi8=">IP 로 위치 찾기<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9wdWJsaWMtZG5zLmluZm8vbmFtZXNlcnZlci91cy5odG1s">Public DNS List<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9jYWNoZWNoZWNrLm9wZW5kbnMuY29tLw==">DNS Cache check (OpenDNS)<i class="fa fa-external-link-alt"></i></span></li></ul></div></details><br><blockquote><p>💡 AWS 서비스 관련해서는 항상 최우선으로 ‘AWS 설명서’ 를 읽어보는 것을 추천한다. 한글 번역이 매끄럽지 못하면 English 로 변경 후 읽어보기를 바란다.</p></blockquote><hr><br><h3 id="1-AWS-Route-53-amp-Geolocation-Routing-Policy"><a href="#1-AWS-Route-53-amp-Geolocation-Routing-Policy" class="headerlink" title="1. AWS Route 53 &amp; Geolocation Routing Policy"></a>1. AWS Route 53 &amp; Geolocation Routing Policy</h3><ul><li>AWS Route 53 은 AWS 관리형의 DNS(Domain Name Server) 이다.<ul><li>Hosted private or public zones (including subdomains)</li><li>Health checks, routing policies and failovers</li></ul></li><li>도메인 등록, DNS 라우팅, 상태 확인을 조합하여 실행할 수 있다.</li></ul><br><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2tvX2tyL1JvdXRlNTMvbGF0ZXN0L0RldmVsb3Blckd1aWRlL3dlbGNvbWUtZG5zLXNlcnZpY2UuaHRtbCN3ZWxjb21lLWRucy1zZXJ2aWNlLWhvdy1yb3V0ZS01My1yb3V0ZXMtdHJhZmZpYw==">1.1 Amazon Route 53이 도메인의 트래픽을 라우팅하는 방법<i class="fa fa-external-link-alt"></i></span></p><ul><li><p>사용자가 웹 서버에 접속 시 DNS 서버를 통하여 도메인 주소를 IP 주소로 전달 받은 후 해당 IP로 접속을 한다</p><p>  <img src="/images/Route53-Geolocation/Untitled.png" alt="Route53%20Geolocation%20247d8a8c113e42e29a751d6e98ff864f/Untitled.png"></p><p>  그림 출처 <span class="exturl" data-url="aHR0cHM6Ly9hbXpuLnRvLzNhRE9keks=">https://amzn.to/3aDOdzK<i class="fa fa-external-link-alt"></i></span></p></li></ul><br><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2tvX2tyL1JvdXRlNTMvbGF0ZXN0L0RldmVsb3Blckd1aWRlL3JvdXRpbmctcG9saWN5Lmh0bWwjcm91dGluZy1wb2xpY3ktZ2Vv">1.2 Geolocation Routing Policy<i class="fa fa-external-link-alt"></i></span></p><ul><li>EDNS 를 지원하는 Local DNS 서버에 따라서 동작 방식이 달라진다</li></ul><p>1.2.1 Local DNS 서버가 EDNS 를 미지원 하는 경우</p><ul><li><p>Geolocation 정책은 기본적으로 DNS 질의(Query)를 하는 Local DNS Server(예, KT DNS 등)의 IP의 위치를 기반하여 AWS Route 53에 지정된 IP 정보를 전달(Answer)한다</p></li><li><p>아래처럼 한국에 PC에서 한국 DNS서버(168.126.63.1)로 <span class="exturl" data-url="aHR0cDovL3d3dy5nc2lkYS5uZXQ=">www.gsida.net<i class="fa fa-external-link-alt"></i></span> 질의 시 한국 DNS서버는 자신의 IP로 AWS Route53에 질의하게 된다.</p></li><li><p>이때 Route53은 한국DNS 서버의 IP를 확인하고 위치가 한국인 것을 알고 Seoul-Web 의 IP정보인 60.1.1.1 을 전달한다.</p><p>  <img src="/images/Route53-Geolocation/Untitled1.png" alt="Route53%20Geolocation%20247d8a8c113e42e29a751d6e98ff864f/Untitled%201.png"></p></li></ul><p>1.2.2 Local DNS 서버가 EDNS 를 지원 하는 경우</p><ul><li><p>DNS 서버(예. 구글DNS 8.8.8.8)가 ENDS 를 지원하는 경우 사용자가 DNS 질의 시 사용자의 IP대역을 DNS 확장 헤더에 담아서 AWS Route 53에 질의를 하게 된다.</p></li><li><p>AWS Route 53 역시 EDNS 를 지원하므로 DNS 확장 헤더의 Client-Subnet 의 대역의 IP의 위치를 기준하여 결정한다</p><p>  <img src="/images/Route53-Geolocation/Untitled2.png" alt="Route53%20Geolocation%20247d8a8c113e42e29a751d6e98ff864f/Untitled%202.png"></p></li></ul><hr><br><h3 id="2-DNS-동작에-대한-오해"><a href="#2-DNS-동작에-대한-오해" class="headerlink" title="2. DNS 동작에 대한 오해"></a>2. DNS 동작에 대한 오해</h3><ul><li>DNS 서버로 데이터 트래픽(웹 트래픽)이 전달 된다.<ul><li>🙅🏻‍♀️No! 위 그림 동작을 보면 알겠지만 DNS 트래픽은 사람이 알기 쉬운 ‘도메인 주소(예. <span class="exturl" data-url="aHR0cDovL3d3dy5kYXVtLm5ldCkmIzM5Ow==">www.daum.net)&#39;<i class="fa fa-external-link-alt"></i></span> 에 대한 ‘IP 주소’를 알아오는 과정이다.</li><li>실제 ‘IP주소’ 를 알아온 이후에는  해당 단말PC에서 ‘웹서버 IP’ 로 직접 데이터 트래픽(웹 트래픽) 통신을 시작한다.</li></ul></li><li>DNS 서버는 사용자의 IP를 기반으로 정확한 위치를 알 수 있다.<ul><li>🙅🏻‍♀️꼭 그렇지만은 않는다. 예를 들면 한국에 단말PC에 미국DNS서버를 설정하게 되면 DNS질의 시 미국DNS서버 IP이므로 미국웹서버 IP를 알려준다.</li><li>즉, Geolocation 의 기본 동작은 최종 DNS Query 하는 소스IP의 위치(일반적인 로컬DNS서버)를 기반하여 ‘IP주소’ 값을 반환한다</li></ul></li><li>그럼 사용자의 IP를 알 수 있는 방법이 없나요?<ul><li>그래서 DNS에 확장 필드 EDNS 에 Client Subnet 필드를 통해서 ‘최종 사용자’의 IP 대역 정보를 전달함으로써 DNS서버가 사용자의 위치를 알 수 있다</li></ul></li></ul><hr><br><h3 id="3-Lab-Topology"><a href="#3-Lab-Topology" class="headerlink" title="3. Lab Topology"></a>3. Lab Topology</h3><ul><li><p>Route 53 DNS - GeoLocation Policy → <span class="exturl" data-url="aHR0cDovL2dlb2xvLmdhc2lkYS5uZXQ=">geolo.gasida.net<i class="fa fa-external-link-alt"></i></span></p><ul><li>Query IP가 한국 일 경우 → 한국 위치한 웹서버 IP 정보를 전달</li><li>Query IP가 미국 일 경우 → 미국 위치한 웹서버 IP 정보를 전달</li></ul></li><li><p>단말</p><ul><li><p>한국 위치 단말 : IP주소(한국 위치 IP), DNS서버(한국 위치한 DNS 서버 IP)</p></li><li><p>미국 위치 단말 : IP주소(미국 위치 IP), DNS서버(미국 위치한 DNS 서버 IP)</p><p>  <img src="/images/Route53-Geolocation/Untitled3.png" alt="Route53%20Geolocation%20247d8a8c113e42e29a751d6e98ff864f/Untitled%203.png"></p></li></ul></li></ul><hr><br><h3 id="4-Config-Geolocation-Policy-amp-Logging"><a href="#4-Config-Geolocation-Policy-amp-Logging" class="headerlink" title="4. Config Geolocation Policy &amp; Logging"></a>4. Config Geolocation Policy &amp; Logging</h3><br><p>4.1 AWS Web EC2 설정</p><ul><li>Seoul-Web : 서울리전, Public Subnet 에 생성 및 웹 서버 설치 → EC2 Public IP <strong>3.34.3.33</strong></li></ul><details><summary>EC2 생성 시 User Data 에 입력 : 웹 서버 설치, index.html 생성</summary><div markdown="1"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">AZ=`curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone`</span><br><span class="line">IP=`curl -s http://169.254.169.254/latest/meta-data/<span class="built_in">local</span>-ipv4`</span><br><span class="line">yum install -y httpd</span><br><span class="line">service httpd start</span><br><span class="line">chkconfig httpd on</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;html&gt;&lt;h1&gt;Hello from Web Server - Region ( "</span><span class="variable">$AZ</span><span class="string">" ) - Private IP ( "</span><span class="variable">$IP</span><span class="string">" )&lt;/h1&gt;&lt;/html&gt;"</span> &gt; /var/www/html/index.html</span><br></pre></td></tr></table></figure></div></details><br><ul><li>Virginia-Web : 버지니아리전, Public Subnet 에 생성 및 웹 서버 설치 → EC2 Public IP <strong>18.206.97.145</strong></li></ul><details><summary>EC2 생성 시 User Data 에 입력 : 웹 서버 설치, index.html 생성</summary><div markdown="1"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">AZ=`curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone`</span><br><span class="line">IP=`curl -s http://169.254.169.254/latest/meta-data/<span class="built_in">local</span>-ipv4`</span><br><span class="line">yum install -y httpd</span><br><span class="line">service httpd start</span><br><span class="line">chkconfig httpd on</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;html&gt;&lt;h1&gt;Hello from Web Server - Region ( "</span><span class="variable">$AZ</span><span class="string">" ) - Private IP ( "</span><span class="variable">$IP</span><span class="string">" )&lt;/h1&gt;&lt;/html&gt;"</span> &gt; /var/www/html/index.html</span><br></pre></td></tr></table></figure></div></details><br><p>4.2 단말 설정</p><ul><li>한국 위치 단말 : 자신의 PC를 활용, DNS서버 (168.126.63.1) → 220.117.X.Y</li><li>미국 위치 단말 : 필자는 GCP 활용, DNS서버(192.221.159.0) → 35.186.188.100</li></ul><details><summary>VM Instance 생성 시 시작 스크립트에 입력 : DNS 관련 툴 설치, 기본 DNS를 변경</summary><div markdown="1"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">yum -y install <span class="built_in">bind</span>-utils traceroute dig jq</span><br><span class="line">sed -i <span class="string">"s/^nameserver 169.254.169.254/nameserver 192.221.159.0/g"</span> /etc/resolv.conf</span><br></pre></td></tr></table></figure></div></details><br><p>4.3 AWS Route 53 설정</p><ul><li>[Route 53 - 호스팅 영역 - 레코드 세트 생성] geolo.gasida.net</li></ul><details><summary>한국 위치 시 한국 웹서버 전달 레코드 생성</summary><div markdown="1"><pre><code>- 이름: **geolo**.gasida.net- 유형: **A - IPv4 주소**- 별침: **아니요**- TTL(초): **300**- 값: **3.34.3.33**- 라우팅 정책: **지리적 위치**    - 위치: **대한민국**    - 세트 ID(*설명, 일종의 주석*): **한국IP만 허용**- 상태 검사와 연결: **아니요**    - 하단 `생성` 클릭</code></pre></div></details><br><details><summary>미국 위치 시 한국 웹서버 전달 레코드 생성</summary><div markdown="1"><pre><code>- 이름: **geolo**.gasida.net- 유형: **A - IPv4 주소**- 별침: **아니요**- TTL(초): **300**- 값: **18.206.97.145**- 라우팅 정책: **지리적 위치**    - 위치: **미국**        - 하위 위치: skip → 미국의 경우 주별로 제한 설정 가능    - 세트 ID(*설명, 일종의 주석*): **미국IP만 허용**- 상태 검사와 연결: **아니요**    - 하단 `생성` 클릭</code></pre></div></details><ul><li><p>위치를 ‘기본값’ 을 설정을 해야 위 ‘한국과 미국 위치’ 제외한 나머지 곳에서 접속이 가능하다 ⇒ 즉, 지리적 접속 제한 가능</p><p>  <img src="/images/Route53-Geolocation/Untitled4.png" alt="Route53%20Geolocation%20247d8a8c113e42e29a751d6e98ff864f/Untitled%204.png"></p></li></ul><br><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2tvX2tyL1JvdXRlNTMvbGF0ZXN0L0RldmVsb3Blckd1aWRlL3F1ZXJ5LWxvZ3MuaHRtbA==">해당 호스팅 영역 ‘쿼리 로깅’ 설정<i class="fa fa-external-link-alt"></i></span></p><ul><li><p>[Route 53 - 호스팅 영역] 도메인  선택 후 우측 하단에 <code>쿼리 로깅</code> 설정 : 동작 발생 후 50초 정도 후에 CloudWatch Log 로 수집된다</p><ul><li>새 로그 그룹 생성 : /aws/route53/hosted-zone-name (필자는 gasida 로 설정)</li><li>새 리소스 정책 생성</li></ul><p><img src="/images/Route53-Geolocation/Untitled5.png" alt="Route53%20Geolocation%20247d8a8c113e42e29a751d6e98ff864f/Untitled%205.png"></p></li></ul></li></ul><hr><br><h3 id="5-Verify"><a href="#5-Verify" class="headerlink" title="5. Verify"></a>5. Verify</h3><br><p>5.1 기본 정보 확인</p><ul><li><p>단말 : 자신의 공인IP 정보와 위치 정보를 확인, DNS서버 확인, 웹 서비스 확인(EC2 Public IP)</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 한국 위치 단말 (윈도우 단말의 경우 dig 대신 nslookup 사용)</span></span><br><span class="line">curl https://checkip.amazonaws.com/</span><br><span class="line">curl https://ipvigilante.com/220.117.X.Y</span><br><span class="line">curl -s https://ipvigilante.com/$(curl -s checkip.amazonaws.com) | jq <span class="string">'.data.country_name, .data.city_name, .data.ipv4'</span></span><br><span class="line"><span class="string">"Republic of Korea"</span></span><br><span class="line"><span class="string">"Seoul"</span></span><br><span class="line"><span class="string">"220.117.X.Y"</span></span><br><span class="line"></span><br><span class="line">dig www.google.com |grep SERVER</span><br><span class="line">;; SERVER: 168.126.63.1<span class="comment">#53(168.126.63.1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 미국 위치 단말</span></span><br><span class="line">curl -s https://ipvigilante.com/$(curl -s checkip.amazonaws.com) | jq <span class="string">'.data.country_name, .data.city_name, .data.ipv4'</span></span><br><span class="line"><span class="string">"United States"</span></span><br><span class="line"><span class="string">"Ann Arbor"</span></span><br><span class="line"><span class="string">"35.245.140.130"</span></span><br><span class="line"></span><br><span class="line">dig www.google.com |grep SERVER</span><br><span class="line">;; SERVER: 192.221.159.0<span class="comment">#53(192.221.159.0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># EC2 웹서비스 확인</span></span><br><span class="line">curl 3.34.3.33</span><br><span class="line">&lt;html&gt;&lt;h1&gt;Hello from MCN Web Server - Seoul Area&lt;/h1&gt;&lt;/html&gt;</span><br><span class="line">curl 18.206.97.145</span><br><span class="line">&lt;html&gt;&lt;h1&gt;Hello from MCN Web Server - Virgina Area&lt;/h1&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ul><br><p>5.2 <span class="exturl" data-url="aHR0cDovL2dlb2xvLmdhc2lkYS5uZXQ=">geolo.gasida.net<i class="fa fa-external-link-alt"></i></span> DNS조회 및 접속 확인</p><ul><li><p>한국 위치 단말(한국 DNS서버)와 미국 위치 단말(미국 DNS서버)가 각각 가까운 위치의 웹 서버로 접속됨을 확인</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 한국 단말 (윈도우 단말의 경우 dig 대신 nslookup 사용)</span></span><br><span class="line">curl geolo.gasida.net</span><br><span class="line">&lt;html&gt;&lt;h1&gt;Hello from MCN Web Server - Seoul Area&lt;/h1&gt;&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">dig geolo.gasida.net +short</span><br><span class="line">3.34.3.33</span><br><span class="line"></span><br><span class="line"><span class="comment"># 미국 단말</span></span><br><span class="line">curl geolo.gasida.net</span><br><span class="line">&lt;html&gt;&lt;h1&gt;Hello from MCN Web Server - Virgina Area&lt;/h1&gt;&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">dig geolo.gasida.net +short</span><br><span class="line">18.206.97.145</span><br></pre></td></tr></table></figure></li><li><p>DNS Query Log ( 로그그룹보기, 필터 geolo -“AAAA” )</p><ul><li><p>KT DNS서버 에서 소스IP를 121.138.224.3(한국IP) 로 AWS Route53(gasida.net)로 질의를 했음 ⇒ Seoul-Web IP 정보를 전달</p></li><li><p>미국 DNS서버 에서 소스IP를 192.221.159.15(미국IP) 로 AWS Route53(gasida.net)로 질의를 했음 ⇒ Virginia-Web IP 정보를 전달</p><p>  <img src="/images/Route53-Geolocation/Untitled6.png" alt="Route53%20Geolocation%20247d8a8c113e42e29a751d6e98ff864f/Untitled%206.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">geolo.gasida.net A NOERROR UDP ICN51-C1 (121.138.224.3 &#x3D; 한국 KT IP)</span><br><span class="line">geolo.gasida.net A NOERROR UDP ATL51-C1 (192.221.159.15 &#x3D; 미국 Lv3 LLC IP)</span><br></pre></td></tr></table></figure></li></ul></li></ul><br><p>(옵션) 5.3 한국과 미국이 아닌 타 나라의 사용자에서 접속 확인</p><details><summary>현재 '한국 , 미국' 이외에 타 나라(예, 중국 단말에서 테스트)에서는 DNS Query 에 대한 응답을 하지 않는다</summary><div markdown="1"><ul><li>이럴 경우에 위치를 <code>기본값</code> 을 선택하게 되면 지리 위치에 매칭되지 않는 모든 경우에 <code>기본값</code>에 정의된 IP 정보를 전달해준다</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 중국 단말</span></span><br><span class="line">curl -s https://ipvigilante.com/$(curl -s checkip.amazonaws.com) | jq <span class="string">'.data.country_name, .data.city_name, .data.ipv4'</span></span><br><span class="line"><span class="string">"China"</span></span><br><span class="line"><span class="string">"Suzhou"</span></span><br><span class="line"><span class="string">"103.125.234.199"</span></span><br><span class="line"></span><br><span class="line">curl geox.gasida.net</span><br><span class="line">curl: (6) Could not resolve host: geox.gasida.net</span><br><span class="line"></span><br><span class="line">dig geox.gasida.net +short</span><br></pre></td></tr></table></figure></div></details><hr><br><h3 id="6-Issue"><a href="#6-Issue" class="headerlink" title="6. Issue"></a>6. Issue</h3><ul><li><p>VPN, CDN 환경이나 혹은 아래 처럼 다른 지역의 DNS서버를 설정 할 경우 Issue 가 발생한다</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 미국 단말 DNS서버를 KT DNS로 변경</span></span><br><span class="line">cat /etc/resolv.conf |grep ^name</span><br><span class="line">nameserver 192.221.159.0</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">"s/^nameserver 192.221.159.0/nameserver 168.126.63.1/g"</span> /etc/resolv.conf</span><br><span class="line"></span><br><span class="line">dig www.google.com |grep SERVER</span><br><span class="line">;; SERVER: 168.126.63.1<span class="comment">#53(168.126.63.1)</span></span><br></pre></td></tr></table></figure><p>  <img src="/images/Route53-Geolocation/Untitled7.png" alt="Route53%20Geolocation%20247d8a8c113e42e29a751d6e98ff864f/Untitled%207.png"></p></li><li><p>아래 처럼 실제로는 미국에 위치한 단말에서 웹 접속 시 자신의 위치와 떨어진 미국에 위치한 웹서버로 접속을 한다</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 미국 단말</span></span><br><span class="line">curl -s https://ipvigilante.com/$(curl -s checkip.amazonaws.com) | jq <span class="string">'.data.country_name, .data.city_name, .data.ipv4'</span></span><br><span class="line"><span class="string">"United States"</span></span><br><span class="line"><span class="string">"Ann Arbor"</span></span><br><span class="line"><span class="string">"35.245.140.130"</span></span><br><span class="line"></span><br><span class="line">curl geolo.gasida.net</span><br><span class="line">&lt;html&gt;&lt;h1&gt;Hello from MCN Web Server - Seoul Area&lt;/h1&gt;&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">dig geolo.gasida.net +short</span><br><span class="line">3.34.3.33</span><br></pre></td></tr></table></figure></li><li><p>Route Query Log 확인하면 KT DNS IP가 Query를 했음므로 한국에 위치한 웹서버 IP 주소를 전달했다</p><p>  <img src="/images/Route53-Geolocation/Untitled8.png" alt="Route53%20Geolocation%20247d8a8c113e42e29a751d6e98ff864f/Untitled%208.png"></p></li></ul><hr><br><h3 id="7-EDNS-Client-Subnet"><a href="#7-EDNS-Client-Subnet" class="headerlink" title="7. EDNS Client Subnet"></a>7. EDNS Client Subnet</h3><ul><li><p>사용자의 위치(IP)를 최종 DNS서버가 알기 위해서 DNS에 확장 필드 EDNS 에 Client Subnet 필드를 통해서 ‘최종 사용자’의 IP 대역 정보를 전달할 수 있다</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzc4NzE=">Client Subnet in DNS Queries<i class="fa fa-external-link-alt"></i></span> (RFC 7871)</li></ul></li><li><p>EDNS 기능을 제공하는 DNS 서버 : 구글 DNS 서버( 8.8.8.8 8.8.8.4 ) , OpenDNS 서버 ( 208.67.222.222 208.67.220.220)</p><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly9hd3MuYW1hem9uLmNvbS9rby9wcmVtaXVtc3VwcG9ydC9rbm93bGVkZ2UtY2VudGVyL3Ryb3VibGVzaG9vdC1sYXRlbmN5LWJhc2VkLXJlY29yZHMv">EDNS 기능 제공 확인<i class="fa fa-external-link-alt"></i></span></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># EDNS 제공 시</span></span><br><span class="line">dig +nocl TXT o-o.myaddr.l.google.com @8.8.8.8 +short</span><br><span class="line"><span class="string">"2607:f8b0:4004:c02::102"</span></span><br><span class="line"><span class="string">"edns0-client-subnet 35.245.140.0/24"</span></span><br><span class="line">dig +nocl TXT o-o.myaddr.l.google.com @8.8.4.4 +short</span><br><span class="line">dig +nocl TXT o-o.myaddr.l.google.com @208.67.222.222 +short</span><br><span class="line">dig +nocl TXT o-o.myaddr.l.google.com @208.67.220.220 +short</span><br><span class="line"></span><br><span class="line"><span class="comment"># EDNS 미 제공 시</span></span><br><span class="line">dig +nocl TXT o-o.myaddr.l.google.com @168.126.63.1 +short</span><br><span class="line"><span class="string">"59.18.51.28"</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><br><p>7.1 ENDS 미제공 환경에서 테스트</p><ul><li><p>아래 처럼 미국 위치 단말이 MPLS VPN 등 환경으로 한국을 반드시 경유하는 환경이다</p><ul><li><p>DNS 서버를 한국 KT DNS(EDNS 미제공)를 설정하고 접속 시 한국에 위치한 웹서버로 접속을 한다</p><p>  <img src="/images/Route53-Geolocation/Untitled9.png" alt="Route53%20Geolocation%20247d8a8c113e42e29a751d6e98ff864f/Untitled%209.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 미국 위치 단말</span></span><br><span class="line">curl -s https://ipvigilante.com/$(curl -s checkip.amazonaws.com) | jq <span class="string">'.data.country_name, .data.city_name, .data.ipv4'</span></span><br><span class="line"><span class="string">"United States"</span></span><br><span class="line">null</span><br><span class="line"><span class="string">"34.64.138.144"</span></span><br><span class="line">dig www.google.com |grep SERVER</span><br><span class="line">;; SERVER: 168.126.63.1<span class="comment">#53(168.126.63.1)</span></span><br><span class="line"></span><br><span class="line">curl geolo.gasida.net</span><br><span class="line">&lt;html&gt;&lt;h1&gt;Hello from MCN Web Server - Seoul Area&lt;/h1&gt;&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">dig geolo.gasida.net +short</span><br><span class="line">3.34.3.33</span><br></pre></td></tr></table></figure></li><li><p>Route 53 Query Log 확인 : 아래  59. IP는 한국 위치 IP 이다</p><p>  <img src="/images/Route53-Geolocation/Untitled10.png" alt="Route53%20Geolocation%20247d8a8c113e42e29a751d6e98ff864f/Untitled%2010.png"></p></li></ul></li></ul><br><p>7.2 EDNS 제공 환경에서 테스트</p><ul><li><p>구글 DNS 경우 EDNS 를 제공하기 때문에 DNS Query 시 확장헤더에 사용자의 공인IP대역을 담아서 전달하여 Route53에서 인식 후 미국 위치 웹 서버 IP를 전달 해줌</p><p>  <img src="/images/Route53-Geolocation/Untitled11.png" alt="Route53%20Geolocation%20247d8a8c113e42e29a751d6e98ff864f/Untitled%2011.png"></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">"s/^nameserver 168.126.63.1/nameserver 8.8.8.8/g"</span> /etc/resolv.conf</span><br><span class="line">dig www.google.com |grep SERVER</span><br><span class="line">;; SERVER: 8.8.8.8<span class="comment">#53(8.8.8.8)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 아래처럼 EDNS 제공 여부 확인 할 수 있다</span></span><br><span class="line">dig +nocl TXT o-o.myaddr.l.google.com  +short</span><br><span class="line"><span class="string">"173.194.168.5"</span></span><br><span class="line"><span class="string">"edns0-client-subnet 34.64.138.0/24"</span></span><br><span class="line"></span><br><span class="line">curl geolo.gasida.net</span><br><span class="line">&lt;html&gt;&lt;h1&gt;Hello from MCN Web Server - Virgina Area&lt;/h1&gt;&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">dig geolo.gasida.net +short</span><br><span class="line">18.206.97.145</span><br></pre></td></tr></table></figure><ul><li><p>EDNS 의 패킷 내용은 대략 아래와 같다</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 아래 처럼 실행 후 패킷 캡쳐 해서 확인 해보자</span></span><br><span class="line">dig +nocl TXT o-o.myaddr.l.google.com @8.8.8.8 +short +subnet=34.64.138.0/24</span><br><span class="line"><span class="string">"2404:6800:400b:c002::101"</span></span><br><span class="line"><span class="string">"edns0-client-subnet 34.64.138.0/24"</span></span><br></pre></td></tr></table></figure><p>  <img src="/images/Route53-Geolocation/Untitled12.png" alt="Route53%20Geolocation%20247d8a8c113e42e29a751d6e98ff864f/Untitled%2012.png"></p></li></ul></li></ul><hr><br><h3 id="8-The-bottom-line"><a href="#8-The-bottom-line" class="headerlink" title="8. The bottom line"></a>8. The bottom line</h3><ul><li>일반적인 사용자의 환경에서는 DNS GeoLocation 정책에 Issue 가 발생하지 않아서 DNS서버가 반드시 EDNS 를 제공하는것 필요 없다</li><li>다만, VPN CDN 등의 환경에서 EDNS Client Subnet 을 제공 시 정확한 사용자의 위치를 기반하기 때문에 제공을 권장한다</li></ul><blockquote><p>💡 전 세계 모든 DNS 서버에 EDNS 확장 기능을 제공하기 위해서 2019 DNS Flag Day 에 적용을 하였다. <span class="exturl" data-url="aHR0cHM6Ly9ibG9ncy5ha2FtYWkuY29tL2tyLzIwMTkvMDEvZG5zLWZsYWctZGF5LWFrYW1haS5odG1s">참고링크<i class="fa fa-external-link-alt"></i></span></p></blockquote><br>]]></content:encoded>
      
      <comments>http://cloudneta.github.io/2020/05/06/Route53-Geolocation/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
